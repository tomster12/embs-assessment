// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="toplevel_toplevel,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.213000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=290,HLS_SYN_DSP=0,HLS_SYN_FF=4765,HLS_SYN_LUT=7727,HLS_VERSION=2020_2}" *)

module toplevel (
        ap_clk,
        ap_rst_n,
        m_axi_MAXI_AWVALID,
        m_axi_MAXI_AWREADY,
        m_axi_MAXI_AWADDR,
        m_axi_MAXI_AWID,
        m_axi_MAXI_AWLEN,
        m_axi_MAXI_AWSIZE,
        m_axi_MAXI_AWBURST,
        m_axi_MAXI_AWLOCK,
        m_axi_MAXI_AWCACHE,
        m_axi_MAXI_AWPROT,
        m_axi_MAXI_AWQOS,
        m_axi_MAXI_AWREGION,
        m_axi_MAXI_AWUSER,
        m_axi_MAXI_WVALID,
        m_axi_MAXI_WREADY,
        m_axi_MAXI_WDATA,
        m_axi_MAXI_WSTRB,
        m_axi_MAXI_WLAST,
        m_axi_MAXI_WID,
        m_axi_MAXI_WUSER,
        m_axi_MAXI_ARVALID,
        m_axi_MAXI_ARREADY,
        m_axi_MAXI_ARADDR,
        m_axi_MAXI_ARID,
        m_axi_MAXI_ARLEN,
        m_axi_MAXI_ARSIZE,
        m_axi_MAXI_ARBURST,
        m_axi_MAXI_ARLOCK,
        m_axi_MAXI_ARCACHE,
        m_axi_MAXI_ARPROT,
        m_axi_MAXI_ARQOS,
        m_axi_MAXI_ARREGION,
        m_axi_MAXI_ARUSER,
        m_axi_MAXI_RVALID,
        m_axi_MAXI_RREADY,
        m_axi_MAXI_RDATA,
        m_axi_MAXI_RLAST,
        m_axi_MAXI_RID,
        m_axi_MAXI_RUSER,
        m_axi_MAXI_RRESP,
        m_axi_MAXI_BVALID,
        m_axi_MAXI_BREADY,
        m_axi_MAXI_BRESP,
        m_axi_MAXI_BID,
        m_axi_MAXI_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_pp0_stage0 = 27'd256;
parameter    ap_ST_fsm_state12 = 27'd512;
parameter    ap_ST_fsm_state13 = 27'd1024;
parameter    ap_ST_fsm_state14 = 27'd2048;
parameter    ap_ST_fsm_pp1_stage0 = 27'd4096;
parameter    ap_ST_fsm_state17 = 27'd8192;
parameter    ap_ST_fsm_state18 = 27'd16384;
parameter    ap_ST_fsm_state19 = 27'd32768;
parameter    ap_ST_fsm_state20 = 27'd65536;
parameter    ap_ST_fsm_state21 = 27'd131072;
parameter    ap_ST_fsm_state22 = 27'd262144;
parameter    ap_ST_fsm_state23 = 27'd524288;
parameter    ap_ST_fsm_state24 = 27'd1048576;
parameter    ap_ST_fsm_state25 = 27'd2097152;
parameter    ap_ST_fsm_state26 = 27'd4194304;
parameter    ap_ST_fsm_state27 = 27'd8388608;
parameter    ap_ST_fsm_state28 = 27'd16777216;
parameter    ap_ST_fsm_state29 = 27'd33554432;
parameter    ap_ST_fsm_state30 = 27'd67108864;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_M_AXI_MAXI_ID_WIDTH = 1;
parameter    C_M_AXI_MAXI_ADDR_WIDTH = 64;
parameter    C_M_AXI_MAXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MAXI_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_WUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_RUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_BUSER_WIDTH = 1;
parameter    C_M_AXI_MAXI_USER_VALUE = 0;
parameter    C_M_AXI_MAXI_PROT_VALUE = 0;
parameter    C_M_AXI_MAXI_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MAXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_MAXI_AWVALID;
input   m_axi_MAXI_AWREADY;
output  [C_M_AXI_MAXI_ADDR_WIDTH - 1:0] m_axi_MAXI_AWADDR;
output  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_AWID;
output  [7:0] m_axi_MAXI_AWLEN;
output  [2:0] m_axi_MAXI_AWSIZE;
output  [1:0] m_axi_MAXI_AWBURST;
output  [1:0] m_axi_MAXI_AWLOCK;
output  [3:0] m_axi_MAXI_AWCACHE;
output  [2:0] m_axi_MAXI_AWPROT;
output  [3:0] m_axi_MAXI_AWQOS;
output  [3:0] m_axi_MAXI_AWREGION;
output  [C_M_AXI_MAXI_AWUSER_WIDTH - 1:0] m_axi_MAXI_AWUSER;
output   m_axi_MAXI_WVALID;
input   m_axi_MAXI_WREADY;
output  [C_M_AXI_MAXI_DATA_WIDTH - 1:0] m_axi_MAXI_WDATA;
output  [C_M_AXI_MAXI_WSTRB_WIDTH - 1:0] m_axi_MAXI_WSTRB;
output   m_axi_MAXI_WLAST;
output  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_WID;
output  [C_M_AXI_MAXI_WUSER_WIDTH - 1:0] m_axi_MAXI_WUSER;
output   m_axi_MAXI_ARVALID;
input   m_axi_MAXI_ARREADY;
output  [C_M_AXI_MAXI_ADDR_WIDTH - 1:0] m_axi_MAXI_ARADDR;
output  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_ARID;
output  [7:0] m_axi_MAXI_ARLEN;
output  [2:0] m_axi_MAXI_ARSIZE;
output  [1:0] m_axi_MAXI_ARBURST;
output  [1:0] m_axi_MAXI_ARLOCK;
output  [3:0] m_axi_MAXI_ARCACHE;
output  [2:0] m_axi_MAXI_ARPROT;
output  [3:0] m_axi_MAXI_ARQOS;
output  [3:0] m_axi_MAXI_ARREGION;
output  [C_M_AXI_MAXI_ARUSER_WIDTH - 1:0] m_axi_MAXI_ARUSER;
input   m_axi_MAXI_RVALID;
output   m_axi_MAXI_RREADY;
input  [C_M_AXI_MAXI_DATA_WIDTH - 1:0] m_axi_MAXI_RDATA;
input   m_axi_MAXI_RLAST;
input  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_RID;
input  [C_M_AXI_MAXI_RUSER_WIDTH - 1:0] m_axi_MAXI_RUSER;
input  [1:0] m_axi_MAXI_RRESP;
input   m_axi_MAXI_BVALID;
output   m_axi_MAXI_BREADY;
input  [1:0] m_axi_MAXI_BRESP;
input  [C_M_AXI_MAXI_ID_WIDTH - 1:0] m_axi_MAXI_BID;
input  [C_M_AXI_MAXI_BUSER_WIDTH - 1:0] m_axi_MAXI_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] ram;
reg    code_ap_vld;
reg   [31:0] error_flag;
reg   [12:0] local_ram_address0;
reg    local_ram_ce0;
reg    local_ram_we0;
wire   [31:0] local_ram_q0;
reg   [12:0] local_ram_address1;
reg    local_ram_ce1;
wire   [31:0] local_ram_q1;
reg   [15:0] world_size;
reg    MAXI_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    MAXI_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln401_reg_640;
reg    MAXI_blk_n_AW;
wire    ap_CS_fsm_state24;
reg    MAXI_blk_n_W;
wire    ap_CS_fsm_state25;
reg    MAXI_blk_n_B;
wire    ap_CS_fsm_state30;
reg    MAXI_AWVALID;
wire    MAXI_AWREADY;
reg    MAXI_WVALID;
wire    MAXI_WREADY;
wire   [31:0] MAXI_WDATA;
reg    MAXI_ARVALID;
wire    MAXI_ARREADY;
wire    MAXI_RVALID;
reg    MAXI_RREADY;
wire   [31:0] MAXI_RDATA;
wire    MAXI_RLAST;
wire   [0:0] MAXI_RID;
wire   [0:0] MAXI_RUSER;
wire   [1:0] MAXI_RRESP;
wire    MAXI_BVALID;
reg    MAXI_BREADY;
wire   [1:0] MAXI_BRESP;
wire   [0:0] MAXI_BID;
wire   [0:0] MAXI_BUSER;
reg   [12:0] i_reg_287;
reg   [12:0] i_reg_287_pp0_iter1_reg;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] i_2_reg_299;
reg   [63:0] MAXI_addr_reg_628;
wire   [12:0] i_1_fu_426_p2;
reg   [12:0] i_1_reg_635;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln401_fu_432_p2;
reg   [0:0] icmp_ln401_reg_640_pp0_iter1_reg;
reg   [31:0] MAXI_addr_read_reg_644;
wire   [15:0] waypoint_count_fu_453_p1;
reg   [15:0] waypoint_count_reg_649;
wire    ap_CS_fsm_state13;
wire   [8:0] trunc_ln405_1_fu_457_p1;
reg   [8:0] trunc_ln405_1_reg_655;
wire   [0:0] icmp_ln406_fu_461_p2;
reg   [0:0] icmp_ln406_reg_660;
wire   [0:0] icmp_ln406_1_fu_467_p2;
reg   [0:0] icmp_ln406_1_reg_665;
wire   [0:0] or_ln406_1_fu_493_p2;
reg   [0:0] or_ln406_1_reg_670;
wire    ap_CS_fsm_state14;
wire   [7:0] i_3_fu_498_p2;
reg   [7:0] i_3_reg_674;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state15_pp1_stage0_iter0;
wire    ap_block_state16_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln412_fu_508_p2;
reg   [0:0] icmp_ln412_reg_679;
wire   [8:0] add_ln427_fu_550_p2;
reg   [8:0] add_ln427_reg_688;
wire    ap_CS_fsm_state17;
wire   [0:0] icmp_ln427_fu_555_p2;
reg   [0:0] icmp_ln427_reg_693;
wire   [0:0] icmp_ln427_1_fu_565_p2;
reg   [0:0] icmp_ln427_1_reg_697;
wire    ap_CS_fsm_state18;
wire   [7:0] i_5_fu_570_p2;
reg   [7:0] i_5_reg_701;
wire   [15:0] waypoints_x_q1;
reg   [15:0] waypoints_x_load_reg_727;
wire    ap_CS_fsm_state19;
wire   [15:0] waypoints_y_q1;
reg   [15:0] waypoints_y_load_reg_732;
wire   [15:0] waypoints_x_q0;
reg   [15:0] waypoints_x_load_1_reg_737;
wire   [15:0] waypoints_y_q0;
reg   [15:0] waypoints_y_load_1_reg_742;
wire   [15:0] grp_a_star_len_fu_372_ap_return;
reg   [15:0] ret_reg_747;
wire    ap_CS_fsm_state20;
wire   [23:0] total_len_1_fu_601_p2;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln431_fu_595_p2;
wire   [31:0] grp_fu_620_p3;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state15;
reg    ap_enable_reg_pp1_iter1;
reg   [3:0] waypoints_x_address0;
reg    waypoints_x_ce0;
reg    waypoints_x_we0;
wire   [15:0] waypoints_x_d0;
wire   [3:0] waypoints_x_address1;
reg    waypoints_x_ce1;
reg   [3:0] waypoints_y_address0;
reg    waypoints_y_ce0;
reg    waypoints_y_we0;
wire   [15:0] waypoints_y_d0;
wire   [3:0] waypoints_y_address1;
reg    waypoints_y_ce1;
wire    grp_a_star_len_fu_372_ap_start;
wire    grp_a_star_len_fu_372_ap_done;
wire    grp_a_star_len_fu_372_ap_idle;
wire    grp_a_star_len_fu_372_ap_ready;
wire   [31:0] grp_a_star_len_fu_372_error_flag_o;
wire    grp_a_star_len_fu_372_error_flag_o_ap_vld;
wire   [12:0] grp_a_star_len_fu_372_local_ram_address0;
wire    grp_a_star_len_fu_372_local_ram_ce0;
reg   [12:0] ap_phi_mux_i_phi_fu_291_p4;
reg   [7:0] ap_phi_mux_i_2_phi_fu_303_p4;
wire    ap_block_pp1_stage0;
reg   [7:0] i_4_reg_311;
wire   [23:0] ap_phi_mux_total_len_phi_fu_326_p4;
reg   [23:0] total_len_reg_322;
reg   [23:0] storemerge3_reg_334;
reg   [31:0] storemerge_reg_353;
reg    grp_a_star_len_fu_372_ap_start_reg;
wire   [63:0] zext_ln402_fu_438_p1;
wire   [63:0] zext_ln413_fu_523_p1;
wire   [63:0] zext_ln414_fu_539_p1;
wire   [63:0] zext_ln430_fu_576_p1;
wire   [63:0] zext_ln430_1_fu_582_p1;
wire  signed [63:0] sext_ln401_fu_416_p1;
wire   [15:0] trunc_ln404_fu_443_p1;
wire    ap_CS_fsm_state12;
wire   [61:0] trunc_ln_fu_406_p4;
wire   [16:0] zext_ln406_fu_473_p1;
wire   [16:0] add_ln406_fu_476_p2;
wire   [0:0] icmp_ln406_2_fu_482_p2;
wire   [0:0] or_ln406_fu_488_p2;
wire   [15:0] zext_ln412_1_fu_504_p1;
wire   [8:0] zext_ln412_fu_513_p1;
wire   [8:0] add_ln413_fu_517_p2;
wire   [8:0] zext_ln427_fu_561_p1;
wire   [23:0] zext_ln430_3_fu_588_p1;
wire   [7:0] grp_fu_620_p0;
wire   [10:0] grp_fu_620_p1;
wire    ap_CS_fsm_state23;
reg    grp_fu_620_ce;
wire    ap_CS_fsm_state22;
reg   [26:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [17:0] grp_fu_620_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
#0 error_flag = 32'd0;
#0 world_size = 16'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 grp_a_star_len_fu_372_ap_start_reg = 1'b0;
end

toplevel_local_ram #(
    .DataWidth( 32 ),
    .AddressRange( 7831 ),
    .AddressWidth( 13 ))
local_ram_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(local_ram_address0),
    .ce0(local_ram_ce0),
    .we0(local_ram_we0),
    .d0(MAXI_addr_read_reg_644),
    .q0(local_ram_q0),
    .address1(local_ram_address1),
    .ce1(local_ram_ce1),
    .q1(local_ram_q1)
);

toplevel_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .code(storemerge_reg_353),
    .code_ap_vld(code_ap_vld),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

toplevel_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ram(ram)
);

toplevel_MAXI_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MAXI_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MAXI_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MAXI_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MAXI_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MAXI_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MAXI_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MAXI_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MAXI_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_MAXI_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MAXI_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MAXI_CACHE_VALUE ))
MAXI_m_axi_U(
    .AWVALID(m_axi_MAXI_AWVALID),
    .AWREADY(m_axi_MAXI_AWREADY),
    .AWADDR(m_axi_MAXI_AWADDR),
    .AWID(m_axi_MAXI_AWID),
    .AWLEN(m_axi_MAXI_AWLEN),
    .AWSIZE(m_axi_MAXI_AWSIZE),
    .AWBURST(m_axi_MAXI_AWBURST),
    .AWLOCK(m_axi_MAXI_AWLOCK),
    .AWCACHE(m_axi_MAXI_AWCACHE),
    .AWPROT(m_axi_MAXI_AWPROT),
    .AWQOS(m_axi_MAXI_AWQOS),
    .AWREGION(m_axi_MAXI_AWREGION),
    .AWUSER(m_axi_MAXI_AWUSER),
    .WVALID(m_axi_MAXI_WVALID),
    .WREADY(m_axi_MAXI_WREADY),
    .WDATA(m_axi_MAXI_WDATA),
    .WSTRB(m_axi_MAXI_WSTRB),
    .WLAST(m_axi_MAXI_WLAST),
    .WID(m_axi_MAXI_WID),
    .WUSER(m_axi_MAXI_WUSER),
    .ARVALID(m_axi_MAXI_ARVALID),
    .ARREADY(m_axi_MAXI_ARREADY),
    .ARADDR(m_axi_MAXI_ARADDR),
    .ARID(m_axi_MAXI_ARID),
    .ARLEN(m_axi_MAXI_ARLEN),
    .ARSIZE(m_axi_MAXI_ARSIZE),
    .ARBURST(m_axi_MAXI_ARBURST),
    .ARLOCK(m_axi_MAXI_ARLOCK),
    .ARCACHE(m_axi_MAXI_ARCACHE),
    .ARPROT(m_axi_MAXI_ARPROT),
    .ARQOS(m_axi_MAXI_ARQOS),
    .ARREGION(m_axi_MAXI_ARREGION),
    .ARUSER(m_axi_MAXI_ARUSER),
    .RVALID(m_axi_MAXI_RVALID),
    .RREADY(m_axi_MAXI_RREADY),
    .RDATA(m_axi_MAXI_RDATA),
    .RLAST(m_axi_MAXI_RLAST),
    .RID(m_axi_MAXI_RID),
    .RUSER(m_axi_MAXI_RUSER),
    .RRESP(m_axi_MAXI_RRESP),
    .BVALID(m_axi_MAXI_BVALID),
    .BREADY(m_axi_MAXI_BREADY),
    .BRESP(m_axi_MAXI_BRESP),
    .BID(m_axi_MAXI_BID),
    .BUSER(m_axi_MAXI_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(MAXI_ARVALID),
    .I_ARREADY(MAXI_ARREADY),
    .I_ARADDR(MAXI_addr_reg_628),
    .I_ARID(1'd0),
    .I_ARLEN(32'd7831),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(MAXI_RVALID),
    .I_RREADY(MAXI_RREADY),
    .I_RDATA(MAXI_RDATA),
    .I_RID(MAXI_RID),
    .I_RUSER(MAXI_RUSER),
    .I_RRESP(MAXI_RRESP),
    .I_RLAST(MAXI_RLAST),
    .I_AWVALID(MAXI_AWVALID),
    .I_AWREADY(MAXI_AWREADY),
    .I_AWADDR(MAXI_addr_reg_628),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(MAXI_WVALID),
    .I_WREADY(MAXI_WREADY),
    .I_WDATA(MAXI_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(MAXI_BVALID),
    .I_BREADY(MAXI_BREADY),
    .I_BRESP(MAXI_BRESP),
    .I_BID(MAXI_BID),
    .I_BUSER(MAXI_BUSER)
);

toplevel_waypoints_x #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
waypoints_x_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(waypoints_x_address0),
    .ce0(waypoints_x_ce0),
    .we0(waypoints_x_we0),
    .d0(waypoints_x_d0),
    .q0(waypoints_x_q0),
    .address1(waypoints_x_address1),
    .ce1(waypoints_x_ce1),
    .q1(waypoints_x_q1)
);

toplevel_waypoints_x #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
waypoints_y_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(waypoints_y_address0),
    .ce0(waypoints_y_ce0),
    .we0(waypoints_y_we0),
    .d0(waypoints_y_d0),
    .q0(waypoints_y_q0),
    .address1(waypoints_y_address1),
    .ce1(waypoints_y_ce1),
    .q1(waypoints_y_q1)
);

toplevel_a_star_len grp_a_star_len_fu_372(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_a_star_len_fu_372_ap_start),
    .ap_done(grp_a_star_len_fu_372_ap_done),
    .ap_idle(grp_a_star_len_fu_372_ap_idle),
    .ap_ready(grp_a_star_len_fu_372_ap_ready),
    .start_x(waypoints_x_load_reg_727),
    .start_y(waypoints_y_load_reg_732),
    .goal_x(waypoints_x_load_1_reg_737),
    .goal_y(waypoints_y_load_1_reg_742),
    .error_flag_i(error_flag),
    .error_flag_o(grp_a_star_len_fu_372_error_flag_o),
    .error_flag_o_ap_vld(grp_a_star_len_fu_372_error_flag_o_ap_vld),
    .world_size(world_size),
    .local_ram_address0(grp_a_star_len_fu_372_local_ram_address0),
    .local_ram_ce0(grp_a_star_len_fu_372_local_ram_ce0),
    .local_ram_q0(local_ram_q0),
    .ap_return(grp_a_star_len_fu_372_ap_return)
);

toplevel_mac_muladd_8ns_11ns_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8ns_11ns_32ns_32_4_1_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_620_p0),
    .din1(grp_fu_620_p1),
    .din2(error_flag),
    .ce(grp_fu_620_ce),
    .dout(grp_fu_620_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state15) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((or_ln406_1_fu_493_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state15) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state15);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((or_ln406_1_fu_493_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_a_star_len_fu_372_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state19)) begin
            grp_a_star_len_fu_372_ap_start_reg <= 1'b1;
        end else if ((grp_a_star_len_fu_372_ap_ready == 1'b1)) begin
            grp_a_star_len_fu_372_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        error_flag <= 32'd0;
    end else if (((icmp_ln427_1_reg_697 == 1'd1) & (icmp_ln427_reg_693 == 1'd1) & (or_ln406_1_reg_670 == 1'd0) & (1'b1 == MAXI_AWREADY) & (1'b1 == ap_CS_fsm_state24))) begin
        error_flag <= grp_fu_620_p3;
    end else if (((grp_a_star_len_fu_372_error_flag_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        error_flag <= grp_a_star_len_fu_372_error_flag_o;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln406_1_fu_493_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        i_2_reg_299 <= 8'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln412_reg_679 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_2_reg_299 <= i_3_reg_674;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln427_fu_555_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        i_4_reg_311 <= 8'd0;
    end else if (((icmp_ln431_fu_595_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        i_4_reg_311 <= i_5_reg_701;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln401_reg_640 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_287 <= i_1_reg_635;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_287 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln427_1_fu_565_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        storemerge3_reg_334 <= ap_phi_mux_total_len_phi_fu_326_p4;
    end else if (((icmp_ln427_fu_555_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        storemerge3_reg_334 <= 24'd0;
    end else if (((or_ln406_1_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        storemerge3_reg_334 <= 24'd65535;
    end else if (((icmp_ln427_1_reg_697 == 1'd1) & (icmp_ln427_reg_693 == 1'd1) & (or_ln406_1_reg_670 == 1'd0) & (1'b1 == MAXI_AWREADY) & (1'b1 == ap_CS_fsm_state24))) begin
        storemerge3_reg_334 <= total_len_reg_322;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln427_1_fu_565_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18)) | ((icmp_ln427_fu_555_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17)))) begin
        storemerge_reg_353 <= 32'd0;
    end else if (((or_ln406_1_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        storemerge_reg_353 <= 32'd10000;
    end else if (((icmp_ln427_1_reg_697 == 1'd1) & (icmp_ln427_reg_693 == 1'd1) & (or_ln406_1_reg_670 == 1'd0) & (1'b1 == MAXI_AWREADY) & (1'b1 == ap_CS_fsm_state24))) begin
        storemerge_reg_353 <= grp_fu_620_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln427_fu_555_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        total_len_reg_322 <= 24'd0;
    end else if (((icmp_ln431_fu_595_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        total_len_reg_322 <= total_len_1_fu_601_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln401_reg_640 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MAXI_addr_read_reg_644 <= MAXI_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        MAXI_addr_reg_628 <= sext_ln401_fu_416_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        add_ln427_reg_688 <= add_ln427_fu_550_p2;
        icmp_ln427_reg_693 <= icmp_ln427_fu_555_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_1_reg_635 <= i_1_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_3_reg_674 <= i_3_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i_5_reg_701 <= i_5_fu_570_p2;
        icmp_ln427_1_reg_697 <= icmp_ln427_1_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_287_pp0_iter1_reg <= i_reg_287;
        icmp_ln401_reg_640 <= icmp_ln401_fu_432_p2;
        icmp_ln401_reg_640_pp0_iter1_reg <= icmp_ln401_reg_640;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        icmp_ln406_1_reg_665 <= icmp_ln406_1_fu_467_p2;
        icmp_ln406_reg_660 <= icmp_ln406_fu_461_p2;
        trunc_ln405_1_reg_655 <= trunc_ln405_1_fu_457_p1;
        waypoint_count_reg_649 <= waypoint_count_fu_453_p1;
        world_size <= trunc_ln404_fu_443_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln412_reg_679 <= icmp_ln412_fu_508_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        or_ln406_1_reg_670 <= or_ln406_1_fu_493_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ret_reg_747 <= grp_a_star_len_fu_372_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        waypoints_x_load_1_reg_737 <= waypoints_x_q0;
        waypoints_x_load_reg_727 <= waypoints_x_q1;
        waypoints_y_load_1_reg_742 <= waypoints_y_q0;
        waypoints_y_load_reg_732 <= waypoints_y_q1;
    end
end

always @ (*) begin
    if (((1'b1 == MAXI_ARREADY) & (1'b1 == ap_CS_fsm_state2))) begin
        MAXI_ARVALID = 1'b1;
    end else begin
        MAXI_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == MAXI_AWREADY) & (1'b1 == ap_CS_fsm_state24))) begin
        MAXI_AWVALID = 1'b1;
    end else begin
        MAXI_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == MAXI_BVALID) & (1'b1 == ap_CS_fsm_state30))) begin
        MAXI_BREADY = 1'b1;
    end else begin
        MAXI_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln401_reg_640 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        MAXI_RREADY = 1'b1;
    end else begin
        MAXI_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == MAXI_WREADY) & (1'b1 == ap_CS_fsm_state25))) begin
        MAXI_WVALID = 1'b1;
    end else begin
        MAXI_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        MAXI_blk_n_AR = m_axi_MAXI_ARREADY;
    end else begin
        MAXI_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        MAXI_blk_n_AW = m_axi_MAXI_AWREADY;
    end else begin
        MAXI_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        MAXI_blk_n_B = m_axi_MAXI_BVALID;
    end else begin
        MAXI_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln401_reg_640 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        MAXI_blk_n_R = m_axi_MAXI_RVALID;
    end else begin
        MAXI_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        MAXI_blk_n_W = m_axi_MAXI_WREADY;
    end else begin
        MAXI_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln401_fu_432_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln412_fu_508_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state15 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state15 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == MAXI_BVALID) & (1'b1 == ap_CS_fsm_state30))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln412_reg_679 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_i_2_phi_fu_303_p4 = i_3_reg_674;
    end else begin
        ap_phi_mux_i_2_phi_fu_303_p4 = i_2_reg_299;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln401_reg_640 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_291_p4 = i_1_reg_635;
    end else begin
        ap_phi_mux_i_phi_fu_291_p4 = i_reg_287;
    end
end

always @ (*) begin
    if (((1'b1 == MAXI_BVALID) & (1'b1 == ap_CS_fsm_state30))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == MAXI_WREADY) & (1'b1 == ap_CS_fsm_state25))) begin
        code_ap_vld = 1'b1;
    end else begin
        code_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | ((1'b1 == MAXI_AWREADY) & (1'b1 == ap_CS_fsm_state24)))) begin
        grp_fu_620_ce = 1'b1;
    end else begin
        grp_fu_620_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        local_ram_address0 = 13'd1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        local_ram_address0 = zext_ln402_fu_438_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        local_ram_address0 = grp_a_star_len_fu_372_local_ram_address0;
    end else begin
        local_ram_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        local_ram_address1 = zext_ln413_fu_523_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        local_ram_address1 = 13'd0;
    end else begin
        local_ram_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        local_ram_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        local_ram_ce0 = grp_a_star_len_fu_372_local_ram_ce0;
    end else begin
        local_ram_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        local_ram_ce1 = 1'b1;
    end else begin
        local_ram_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln401_reg_640_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        local_ram_we0 = 1'b1;
    end else begin
        local_ram_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        waypoints_x_address0 = zext_ln430_1_fu_582_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        waypoints_x_address0 = zext_ln414_fu_539_p1;
    end else begin
        waypoints_x_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        waypoints_x_ce0 = 1'b1;
    end else begin
        waypoints_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        waypoints_x_ce1 = 1'b1;
    end else begin
        waypoints_x_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln412_reg_679 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        waypoints_x_we0 = 1'b1;
    end else begin
        waypoints_x_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        waypoints_y_address0 = zext_ln430_1_fu_582_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        waypoints_y_address0 = zext_ln414_fu_539_p1;
    end else begin
        waypoints_y_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        waypoints_y_ce0 = 1'b1;
    end else begin
        waypoints_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        waypoints_y_ce1 = 1'b1;
    end else begin
        waypoints_y_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln412_reg_679 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        waypoints_y_we0 = 1'b1;
    end else begin
        waypoints_y_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == MAXI_ARREADY) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln401_fu_432_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln401_fu_432_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((or_ln406_1_fu_493_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln412_fu_508_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln412_fu_508_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((icmp_ln427_fu_555_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln427_1_fu_565_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((grp_a_star_len_fu_372_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln431_fu_595_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == MAXI_AWREADY) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == MAXI_WREADY) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == MAXI_BVALID) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MAXI_WDATA = storemerge3_reg_334;

assign add_ln406_fu_476_p2 = ($signed(zext_ln406_fu_473_p1) + $signed(17'd131070));

assign add_ln413_fu_517_p2 = (zext_ln412_fu_513_p1 + 9'd2);

assign add_ln427_fu_550_p2 = ($signed(trunc_ln405_1_reg_655) + $signed(9'd511));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == MAXI_RVALID) & (icmp_ln401_reg_640 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == MAXI_RVALID) & (icmp_ln401_reg_640 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((1'b0 == MAXI_RVALID) & (icmp_ln401_reg_640 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_total_len_phi_fu_326_p4 = total_len_reg_322;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_a_star_len_fu_372_ap_start = grp_a_star_len_fu_372_ap_start_reg;

assign grp_fu_620_p0 = grp_fu_620_p00;

assign grp_fu_620_p00 = i_5_reg_701;

assign grp_fu_620_p1 = 18'd1000;

assign i_1_fu_426_p2 = (ap_phi_mux_i_phi_fu_291_p4 + 13'd1);

assign i_3_fu_498_p2 = (ap_phi_mux_i_2_phi_fu_303_p4 + 8'd1);

assign i_5_fu_570_p2 = (i_4_reg_311 + 8'd1);

assign icmp_ln401_fu_432_p2 = ((ap_phi_mux_i_phi_fu_291_p4 == 13'd7831) ? 1'b1 : 1'b0);

assign icmp_ln406_1_fu_467_p2 = ((trunc_ln404_fu_443_p1 > 16'd500) ? 1'b1 : 1'b0);

assign icmp_ln406_2_fu_482_p2 = ((add_ln406_fu_476_p2 > 17'd14) ? 1'b1 : 1'b0);

assign icmp_ln406_fu_461_p2 = ((trunc_ln404_fu_443_p1 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln412_fu_508_p2 = ((zext_ln412_1_fu_504_p1 < waypoint_count_reg_649) ? 1'b1 : 1'b0);

assign icmp_ln427_1_fu_565_p2 = (($signed(zext_ln427_fu_561_p1) < $signed(add_ln427_reg_688)) ? 1'b1 : 1'b0);

assign icmp_ln427_fu_555_p2 = (($signed(add_ln427_fu_550_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln431_fu_595_p2 = ((error_flag == 32'd0) ? 1'b1 : 1'b0);

assign or_ln406_1_fu_493_p2 = (or_ln406_fu_488_p2 | icmp_ln406_reg_660);

assign or_ln406_fu_488_p2 = (icmp_ln406_2_fu_482_p2 | icmp_ln406_1_reg_665);

assign sext_ln401_fu_416_p1 = $signed(trunc_ln_fu_406_p4);

assign total_len_1_fu_601_p2 = (zext_ln430_3_fu_588_p1 + total_len_reg_322);

assign trunc_ln404_fu_443_p1 = local_ram_q1[15:0];

assign trunc_ln405_1_fu_457_p1 = local_ram_q0[8:0];

assign trunc_ln_fu_406_p4 = {{ram[63:2]}};

assign waypoint_count_fu_453_p1 = local_ram_q0[15:0];

assign waypoints_x_address1 = zext_ln430_fu_576_p1;

assign waypoints_x_d0 = {{local_ram_q1[31:16]}};

assign waypoints_y_address1 = zext_ln430_fu_576_p1;

assign waypoints_y_d0 = local_ram_q1[15:0];

assign zext_ln402_fu_438_p1 = i_reg_287_pp0_iter1_reg;

assign zext_ln406_fu_473_p1 = waypoint_count_reg_649;

assign zext_ln412_1_fu_504_p1 = ap_phi_mux_i_2_phi_fu_303_p4;

assign zext_ln412_fu_513_p1 = ap_phi_mux_i_2_phi_fu_303_p4;

assign zext_ln413_fu_523_p1 = add_ln413_fu_517_p2;

assign zext_ln414_fu_539_p1 = i_2_reg_299;

assign zext_ln427_fu_561_p1 = i_4_reg_311;

assign zext_ln430_1_fu_582_p1 = i_5_fu_570_p2;

assign zext_ln430_3_fu_588_p1 = ret_reg_747;

assign zext_ln430_fu_576_p1 = i_4_reg_311;

endmodule //toplevel
