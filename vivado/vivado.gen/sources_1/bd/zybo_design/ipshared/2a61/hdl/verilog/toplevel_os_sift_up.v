// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module toplevel_os_sift_up (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        idx,
        open_set_heap_f_score_V_address0,
        open_set_heap_f_score_V_ce0,
        open_set_heap_f_score_V_we0,
        open_set_heap_f_score_V_d0,
        open_set_heap_f_score_V_q0,
        open_set_heap_g_score_V_address0,
        open_set_heap_g_score_V_ce0,
        open_set_heap_g_score_V_we0,
        open_set_heap_g_score_V_d0,
        open_set_heap_g_score_V_q0,
        open_set_heap_x_V_address0,
        open_set_heap_x_V_ce0,
        open_set_heap_x_V_we0,
        open_set_heap_x_V_d0,
        open_set_heap_x_V_q0,
        open_set_heap_y_V_address0,
        open_set_heap_y_V_ce0,
        open_set_heap_y_V_we0,
        open_set_heap_y_V_d0,
        open_set_heap_y_V_q0
);

parameter    ap_ST_fsm_state1 = 43'd1;
parameter    ap_ST_fsm_state2 = 43'd2;
parameter    ap_ST_fsm_state3 = 43'd4;
parameter    ap_ST_fsm_state4 = 43'd8;
parameter    ap_ST_fsm_state5 = 43'd16;
parameter    ap_ST_fsm_state6 = 43'd32;
parameter    ap_ST_fsm_state7 = 43'd64;
parameter    ap_ST_fsm_state8 = 43'd128;
parameter    ap_ST_fsm_state9 = 43'd256;
parameter    ap_ST_fsm_state10 = 43'd512;
parameter    ap_ST_fsm_state11 = 43'd1024;
parameter    ap_ST_fsm_state12 = 43'd2048;
parameter    ap_ST_fsm_state13 = 43'd4096;
parameter    ap_ST_fsm_state14 = 43'd8192;
parameter    ap_ST_fsm_state15 = 43'd16384;
parameter    ap_ST_fsm_state16 = 43'd32768;
parameter    ap_ST_fsm_state17 = 43'd65536;
parameter    ap_ST_fsm_state18 = 43'd131072;
parameter    ap_ST_fsm_state19 = 43'd262144;
parameter    ap_ST_fsm_state20 = 43'd524288;
parameter    ap_ST_fsm_state21 = 43'd1048576;
parameter    ap_ST_fsm_state22 = 43'd2097152;
parameter    ap_ST_fsm_state23 = 43'd4194304;
parameter    ap_ST_fsm_state24 = 43'd8388608;
parameter    ap_ST_fsm_state25 = 43'd16777216;
parameter    ap_ST_fsm_state26 = 43'd33554432;
parameter    ap_ST_fsm_state27 = 43'd67108864;
parameter    ap_ST_fsm_state28 = 43'd134217728;
parameter    ap_ST_fsm_state29 = 43'd268435456;
parameter    ap_ST_fsm_state30 = 43'd536870912;
parameter    ap_ST_fsm_state31 = 43'd1073741824;
parameter    ap_ST_fsm_state32 = 43'd2147483648;
parameter    ap_ST_fsm_state33 = 43'd4294967296;
parameter    ap_ST_fsm_state34 = 43'd8589934592;
parameter    ap_ST_fsm_state35 = 43'd17179869184;
parameter    ap_ST_fsm_state36 = 43'd34359738368;
parameter    ap_ST_fsm_state37 = 43'd68719476736;
parameter    ap_ST_fsm_state38 = 43'd137438953472;
parameter    ap_ST_fsm_state39 = 43'd274877906944;
parameter    ap_ST_fsm_state40 = 43'd549755813888;
parameter    ap_ST_fsm_state41 = 43'd1099511627776;
parameter    ap_ST_fsm_pp0_stage0 = 43'd2199023255552;
parameter    ap_ST_fsm_state44 = 43'd4398046511104;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] idx;
output  [11:0] open_set_heap_f_score_V_address0;
output   open_set_heap_f_score_V_ce0;
output   open_set_heap_f_score_V_we0;
output  [10:0] open_set_heap_f_score_V_d0;
input  [10:0] open_set_heap_f_score_V_q0;
output  [11:0] open_set_heap_g_score_V_address0;
output   open_set_heap_g_score_V_ce0;
output   open_set_heap_g_score_V_we0;
output  [10:0] open_set_heap_g_score_V_d0;
input  [10:0] open_set_heap_g_score_V_q0;
output  [11:0] open_set_heap_x_V_address0;
output   open_set_heap_x_V_ce0;
output   open_set_heap_x_V_we0;
output  [8:0] open_set_heap_x_V_d0;
input  [8:0] open_set_heap_x_V_q0;
output  [11:0] open_set_heap_y_V_address0;
output   open_set_heap_y_V_ce0;
output   open_set_heap_y_V_we0;
output  [8:0] open_set_heap_y_V_d0;
input  [8:0] open_set_heap_y_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] open_set_heap_f_score_V_address0;
reg open_set_heap_f_score_V_ce0;
reg open_set_heap_f_score_V_we0;
reg[10:0] open_set_heap_f_score_V_d0;
reg[11:0] open_set_heap_g_score_V_address0;
reg open_set_heap_g_score_V_ce0;
reg open_set_heap_g_score_V_we0;
reg[10:0] open_set_heap_g_score_V_d0;
reg[11:0] open_set_heap_x_V_address0;
reg open_set_heap_x_V_ce0;
reg open_set_heap_x_V_we0;
reg[8:0] open_set_heap_x_V_d0;
reg[11:0] open_set_heap_y_V_address0;
reg open_set_heap_y_V_ce0;
reg open_set_heap_y_V_we0;
reg[8:0] open_set_heap_y_V_d0;

(* fsm_encoding = "none" *) reg   [42:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] i_reg_1839;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [11:0] empty_fu_1855_p1;
reg   [11:0] empty_reg_3351;
reg   [10:0] node_f_score_V_reg_3428;
wire    ap_CS_fsm_state8;
reg   [10:0] node_g_score_V_reg_3434;
reg   [8:0] node_x_V_reg_3439;
reg   [8:0] node_y_V_reg_3444;
wire   [15:0] select_ln244_fu_1921_p3;
reg   [15:0] select_ln244_reg_3502;
wire   [0:0] icmp_ln238_fu_1867_p2;
wire   [11:0] trunc_ln245_fu_1929_p1;
reg   [11:0] trunc_ln245_reg_3508;
wire   [63:0] zext_ln245_fu_1933_p1;
reg   [63:0] zext_ln245_reg_3515;
wire    ap_CS_fsm_state9;
wire   [0:0] grp_fu_1850_p2;
wire   [15:0] select_ln244_1_fu_1992_p3;
reg   [15:0] select_ln244_1_reg_3548;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln238_1_fu_1938_p2;
wire   [11:0] trunc_ln245_1_fu_2000_p1;
reg   [11:0] trunc_ln245_1_reg_3554;
wire   [63:0] zext_ln245_1_fu_2004_p1;
reg   [63:0] zext_ln245_1_reg_3561;
wire    ap_CS_fsm_state11;
wire   [15:0] select_ln244_2_fu_2063_p3;
reg   [15:0] select_ln244_2_reg_3594;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln238_2_fu_2009_p2;
wire   [11:0] trunc_ln245_2_fu_2071_p1;
reg   [11:0] trunc_ln245_2_reg_3600;
wire   [63:0] zext_ln245_2_fu_2075_p1;
reg   [63:0] zext_ln245_2_reg_3607;
wire    ap_CS_fsm_state13;
wire   [15:0] select_ln244_3_fu_2134_p3;
reg   [15:0] select_ln244_3_reg_3640;
wire    ap_CS_fsm_state14;
wire   [0:0] icmp_ln238_3_fu_2080_p2;
wire   [11:0] trunc_ln245_3_fu_2142_p1;
reg   [11:0] trunc_ln245_3_reg_3646;
wire   [63:0] zext_ln245_3_fu_2146_p1;
reg   [63:0] zext_ln245_3_reg_3653;
wire    ap_CS_fsm_state15;
wire   [15:0] select_ln244_4_fu_2205_p3;
reg   [15:0] select_ln244_4_reg_3686;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln238_4_fu_2151_p2;
wire   [11:0] trunc_ln245_4_fu_2213_p1;
reg   [11:0] trunc_ln245_4_reg_3692;
wire   [63:0] zext_ln245_4_fu_2217_p1;
reg   [63:0] zext_ln245_4_reg_3699;
wire    ap_CS_fsm_state17;
wire   [15:0] select_ln244_5_fu_2276_p3;
reg   [15:0] select_ln244_5_reg_3732;
wire    ap_CS_fsm_state18;
wire   [0:0] icmp_ln238_5_fu_2222_p2;
wire   [11:0] trunc_ln245_5_fu_2284_p1;
reg   [11:0] trunc_ln245_5_reg_3738;
wire   [63:0] zext_ln245_5_fu_2288_p1;
reg   [63:0] zext_ln245_5_reg_3745;
wire    ap_CS_fsm_state19;
wire   [15:0] select_ln244_6_fu_2347_p3;
reg   [15:0] select_ln244_6_reg_3778;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln238_6_fu_2293_p2;
wire   [11:0] trunc_ln245_6_fu_2355_p1;
reg   [11:0] trunc_ln245_6_reg_3784;
wire   [63:0] zext_ln245_6_fu_2359_p1;
reg   [63:0] zext_ln245_6_reg_3791;
wire    ap_CS_fsm_state21;
wire   [15:0] select_ln244_7_fu_2418_p3;
reg   [15:0] select_ln244_7_reg_3824;
wire    ap_CS_fsm_state22;
wire   [0:0] icmp_ln238_7_fu_2364_p2;
wire   [11:0] trunc_ln245_7_fu_2426_p1;
reg   [11:0] trunc_ln245_7_reg_3830;
wire   [63:0] zext_ln245_7_fu_2430_p1;
reg   [63:0] zext_ln245_7_reg_3837;
wire    ap_CS_fsm_state23;
wire   [15:0] select_ln244_8_fu_2489_p3;
reg   [15:0] select_ln244_8_reg_3870;
wire    ap_CS_fsm_state24;
wire   [0:0] icmp_ln238_8_fu_2435_p2;
wire   [11:0] trunc_ln245_8_fu_2497_p1;
reg   [11:0] trunc_ln245_8_reg_3876;
wire   [63:0] zext_ln245_8_fu_2501_p1;
reg   [63:0] zext_ln245_8_reg_3883;
wire    ap_CS_fsm_state25;
wire   [15:0] select_ln244_9_fu_2560_p3;
reg   [15:0] select_ln244_9_reg_3916;
wire    ap_CS_fsm_state26;
wire   [0:0] icmp_ln238_9_fu_2506_p2;
wire   [11:0] trunc_ln245_9_fu_2568_p1;
reg   [11:0] trunc_ln245_9_reg_3922;
wire   [63:0] zext_ln245_9_fu_2572_p1;
reg   [63:0] zext_ln245_9_reg_3929;
wire    ap_CS_fsm_state27;
wire   [15:0] select_ln244_10_fu_2631_p3;
reg   [15:0] select_ln244_10_reg_3962;
wire    ap_CS_fsm_state28;
wire   [0:0] icmp_ln238_10_fu_2577_p2;
wire   [11:0] trunc_ln245_10_fu_2639_p1;
reg   [11:0] trunc_ln245_10_reg_3968;
wire   [63:0] zext_ln245_10_fu_2643_p1;
reg   [63:0] zext_ln245_10_reg_3975;
wire    ap_CS_fsm_state29;
wire   [15:0] select_ln244_11_fu_2702_p3;
reg   [15:0] select_ln244_11_reg_4008;
wire    ap_CS_fsm_state30;
wire   [0:0] icmp_ln238_11_fu_2648_p2;
wire   [11:0] trunc_ln245_11_fu_2710_p1;
reg   [11:0] trunc_ln245_11_reg_4014;
wire   [63:0] zext_ln245_11_fu_2714_p1;
reg   [63:0] zext_ln245_11_reg_4021;
wire    ap_CS_fsm_state31;
wire   [15:0] select_ln244_12_fu_2773_p3;
reg   [15:0] select_ln244_12_reg_4054;
wire    ap_CS_fsm_state32;
wire   [0:0] icmp_ln238_12_fu_2719_p2;
wire   [11:0] trunc_ln245_12_fu_2781_p1;
reg   [11:0] trunc_ln245_12_reg_4060;
wire   [63:0] zext_ln245_12_fu_2785_p1;
reg   [63:0] zext_ln245_12_reg_4067;
wire    ap_CS_fsm_state33;
wire   [15:0] select_ln244_13_fu_2844_p3;
reg   [15:0] select_ln244_13_reg_4100;
wire    ap_CS_fsm_state34;
wire   [0:0] icmp_ln238_13_fu_2790_p2;
wire   [11:0] trunc_ln245_13_fu_2852_p1;
reg   [11:0] trunc_ln245_13_reg_4106;
wire   [63:0] zext_ln245_13_fu_2856_p1;
reg   [63:0] zext_ln245_13_reg_4113;
wire    ap_CS_fsm_state35;
wire   [15:0] select_ln244_14_fu_2915_p3;
reg   [15:0] select_ln244_14_reg_4146;
wire    ap_CS_fsm_state36;
wire   [0:0] icmp_ln238_14_fu_2861_p2;
wire   [11:0] trunc_ln245_14_fu_2923_p1;
reg   [11:0] trunc_ln245_14_reg_4153;
wire   [63:0] zext_ln245_14_fu_2927_p1;
reg   [63:0] zext_ln245_14_reg_4160;
wire    ap_CS_fsm_state37;
wire   [11:0] select_ln244_15_fu_2995_p3;
reg   [11:0] select_ln244_15_reg_4193;
wire    ap_CS_fsm_state38;
wire   [0:0] icmp_ln238_15_fu_2932_p2;
wire   [63:0] zext_ln245_15_fu_3003_p1;
reg   [63:0] zext_ln245_15_reg_4198;
wire    ap_CS_fsm_state39;
wire   [4:0] i_18_fu_3008_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state42_pp0_stage0_iter0;
wire    ap_block_state43_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln260_fu_3014_p2;
reg   [0:0] icmp_ln260_reg_4233;
wire    ap_CS_fsm_state41;
wire   [0:0] ap_phi_mux_phi_ln259_phi_fu_1615_p66;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state42;
reg    ap_enable_reg_pp0_iter1;
reg   [3:0] moves_node_f_score_V_address0;
reg    moves_node_f_score_V_ce0;
reg    moves_node_f_score_V_we0;
reg   [10:0] moves_node_f_score_V_d0;
wire   [10:0] moves_node_f_score_V_q0;
reg   [3:0] moves_node_f_score_V_address1;
reg    moves_node_f_score_V_ce1;
reg    moves_node_f_score_V_we1;
reg   [10:0] moves_node_f_score_V_d1;
reg   [3:0] moves_node_g_score_V_address0;
reg    moves_node_g_score_V_ce0;
reg    moves_node_g_score_V_we0;
reg   [10:0] moves_node_g_score_V_d0;
wire   [10:0] moves_node_g_score_V_q0;
reg   [3:0] moves_node_g_score_V_address1;
reg    moves_node_g_score_V_ce1;
reg    moves_node_g_score_V_we1;
reg   [10:0] moves_node_g_score_V_d1;
reg   [3:0] moves_node_x_V_address0;
reg    moves_node_x_V_ce0;
reg    moves_node_x_V_we0;
reg   [8:0] moves_node_x_V_d0;
wire   [8:0] moves_node_x_V_q0;
reg   [3:0] moves_node_x_V_address1;
reg    moves_node_x_V_ce1;
reg    moves_node_x_V_we1;
reg   [8:0] moves_node_x_V_d1;
reg   [3:0] moves_node_y_V_address0;
reg    moves_node_y_V_ce0;
reg    moves_node_y_V_we0;
reg   [8:0] moves_node_y_V_d0;
wire   [8:0] moves_node_y_V_q0;
reg   [3:0] moves_node_y_V_address1;
reg    moves_node_y_V_ce1;
reg    moves_node_y_V_we1;
reg   [8:0] moves_node_y_V_d1;
reg   [3:0] moves_target_address0;
reg    moves_target_ce0;
reg    moves_target_we0;
reg   [11:0] moves_target_d0;
wire   [11:0] moves_target_q0;
reg   [3:0] moves_target_address1;
reg    moves_target_ce1;
reg    moves_target_we1;
reg   [11:0] moves_target_d1;
reg   [11:0] current_lcssa_reg_1538;
wire    ap_CS_fsm_state40;
reg   [0:0] phi_ln259_reg_1610;
reg   [4:0] indvars_iv1_lcssa_reg_1717;
wire   [63:0] zext_ln220_fu_1859_p1;
wire   [63:0] zext_ln263_fu_3020_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln263_1_fu_3029_p1;
wire   [63:0] zext_ln265_fu_3037_p1;
wire    ap_CS_fsm_state44;
wire   [16:0] zext_ln244_fu_1872_p1;
wire   [16:0] add_ln244_fu_1875_p2;
wire   [16:0] sub_ln244_fu_1889_p2;
wire   [15:0] trunc_ln244_1_fu_1895_p4;
wire   [0:0] tmp_fu_1881_p3;
wire   [15:0] sub_ln244_1_fu_1905_p2;
wire   [15:0] trunc_ln244_2_fu_1911_p4;
wire   [16:0] zext_ln244_1_fu_1943_p1;
wire   [16:0] add_ln244_1_fu_1946_p2;
wire   [16:0] sub_ln244_2_fu_1960_p2;
wire   [15:0] trunc_ln244_4_fu_1966_p4;
wire   [0:0] tmp_6_fu_1952_p3;
wire   [15:0] sub_ln244_3_fu_1976_p2;
wire   [15:0] trunc_ln244_5_fu_1982_p4;
wire   [16:0] zext_ln244_2_fu_2014_p1;
wire   [16:0] add_ln244_2_fu_2017_p2;
wire   [16:0] sub_ln244_4_fu_2031_p2;
wire   [15:0] trunc_ln244_7_fu_2037_p4;
wire   [0:0] tmp_7_fu_2023_p3;
wire   [15:0] sub_ln244_5_fu_2047_p2;
wire   [15:0] trunc_ln244_8_fu_2053_p4;
wire   [16:0] zext_ln244_3_fu_2085_p1;
wire   [16:0] add_ln244_3_fu_2088_p2;
wire   [16:0] sub_ln244_6_fu_2102_p2;
wire   [15:0] trunc_ln244_s_fu_2108_p4;
wire   [0:0] tmp_8_fu_2094_p3;
wire   [15:0] sub_ln244_7_fu_2118_p2;
wire   [15:0] trunc_ln244_3_fu_2124_p4;
wire   [16:0] zext_ln244_4_fu_2156_p1;
wire   [16:0] add_ln244_4_fu_2159_p2;
wire   [16:0] sub_ln244_8_fu_2173_p2;
wire   [15:0] trunc_ln244_6_fu_2179_p4;
wire   [0:0] tmp_9_fu_2165_p3;
wire   [15:0] sub_ln244_9_fu_2189_p2;
wire   [15:0] trunc_ln244_9_fu_2195_p4;
wire   [16:0] zext_ln244_5_fu_2227_p1;
wire   [16:0] add_ln244_5_fu_2230_p2;
wire   [16:0] sub_ln244_10_fu_2244_p2;
wire   [15:0] trunc_ln244_10_fu_2250_p4;
wire   [0:0] tmp_10_fu_2236_p3;
wire   [15:0] sub_ln244_11_fu_2260_p2;
wire   [15:0] trunc_ln244_11_fu_2266_p4;
wire   [16:0] zext_ln244_6_fu_2298_p1;
wire   [16:0] add_ln244_6_fu_2301_p2;
wire   [16:0] sub_ln244_12_fu_2315_p2;
wire   [15:0] trunc_ln244_12_fu_2321_p4;
wire   [0:0] tmp_11_fu_2307_p3;
wire   [15:0] sub_ln244_13_fu_2331_p2;
wire   [15:0] trunc_ln244_13_fu_2337_p4;
wire   [16:0] zext_ln244_7_fu_2369_p1;
wire   [16:0] add_ln244_7_fu_2372_p2;
wire   [16:0] sub_ln244_14_fu_2386_p2;
wire   [15:0] trunc_ln244_14_fu_2392_p4;
wire   [0:0] tmp_12_fu_2378_p3;
wire   [15:0] sub_ln244_15_fu_2402_p2;
wire   [15:0] trunc_ln244_15_fu_2408_p4;
wire   [16:0] zext_ln244_8_fu_2440_p1;
wire   [16:0] add_ln244_8_fu_2443_p2;
wire   [16:0] sub_ln244_16_fu_2457_p2;
wire   [15:0] trunc_ln244_16_fu_2463_p4;
wire   [0:0] tmp_13_fu_2449_p3;
wire   [15:0] sub_ln244_17_fu_2473_p2;
wire   [15:0] trunc_ln244_17_fu_2479_p4;
wire   [16:0] zext_ln244_9_fu_2511_p1;
wire   [16:0] add_ln244_9_fu_2514_p2;
wire   [16:0] sub_ln244_18_fu_2528_p2;
wire   [15:0] trunc_ln244_18_fu_2534_p4;
wire   [0:0] tmp_14_fu_2520_p3;
wire   [15:0] sub_ln244_19_fu_2544_p2;
wire   [15:0] trunc_ln244_19_fu_2550_p4;
wire   [16:0] zext_ln244_10_fu_2582_p1;
wire   [16:0] add_ln244_10_fu_2585_p2;
wire   [16:0] sub_ln244_20_fu_2599_p2;
wire   [15:0] trunc_ln244_20_fu_2605_p4;
wire   [0:0] tmp_15_fu_2591_p3;
wire   [15:0] sub_ln244_21_fu_2615_p2;
wire   [15:0] trunc_ln244_21_fu_2621_p4;
wire   [16:0] zext_ln244_11_fu_2653_p1;
wire   [16:0] add_ln244_11_fu_2656_p2;
wire   [16:0] sub_ln244_22_fu_2670_p2;
wire   [15:0] trunc_ln244_22_fu_2676_p4;
wire   [0:0] tmp_16_fu_2662_p3;
wire   [15:0] sub_ln244_23_fu_2686_p2;
wire   [15:0] trunc_ln244_23_fu_2692_p4;
wire   [16:0] zext_ln244_12_fu_2724_p1;
wire   [16:0] add_ln244_12_fu_2727_p2;
wire   [16:0] sub_ln244_24_fu_2741_p2;
wire   [15:0] trunc_ln244_24_fu_2747_p4;
wire   [0:0] tmp_17_fu_2733_p3;
wire   [15:0] sub_ln244_25_fu_2757_p2;
wire   [15:0] trunc_ln244_25_fu_2763_p4;
wire   [16:0] zext_ln244_13_fu_2795_p1;
wire   [16:0] add_ln244_13_fu_2798_p2;
wire   [16:0] sub_ln244_26_fu_2812_p2;
wire   [15:0] trunc_ln244_26_fu_2818_p4;
wire   [0:0] tmp_18_fu_2804_p3;
wire   [15:0] sub_ln244_27_fu_2828_p2;
wire   [15:0] trunc_ln244_27_fu_2834_p4;
wire   [16:0] zext_ln244_14_fu_2866_p1;
wire   [16:0] add_ln244_14_fu_2869_p2;
wire   [16:0] sub_ln244_28_fu_2883_p2;
wire   [15:0] trunc_ln244_28_fu_2889_p4;
wire   [0:0] tmp_19_fu_2875_p3;
wire   [15:0] sub_ln244_29_fu_2899_p2;
wire   [15:0] trunc_ln244_29_fu_2905_p4;
wire   [16:0] zext_ln244_15_fu_2940_p1;
wire   [12:0] trunc_ln244_fu_2937_p1;
wire   [16:0] add_ln244_15_fu_2943_p2;
wire   [12:0] sub_ln244_30_fu_2963_p2;
wire   [11:0] trunc_ln244_30_fu_2969_p4;
wire   [12:0] add_ln244_16_fu_2949_p2;
wire   [0:0] tmp_20_fu_2955_p3;
wire   [11:0] sub_ln244_31_fu_2979_p2;
wire   [11:0] trunc_ln244_31_fu_2985_p4;
reg   [42:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 43'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

toplevel_os_sift_up_moves_node_f_score_V #(
    .DataWidth( 11 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
moves_node_f_score_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(moves_node_f_score_V_address0),
    .ce0(moves_node_f_score_V_ce0),
    .we0(moves_node_f_score_V_we0),
    .d0(moves_node_f_score_V_d0),
    .q0(moves_node_f_score_V_q0),
    .address1(moves_node_f_score_V_address1),
    .ce1(moves_node_f_score_V_ce1),
    .we1(moves_node_f_score_V_we1),
    .d1(moves_node_f_score_V_d1)
);

toplevel_os_sift_up_moves_node_f_score_V #(
    .DataWidth( 11 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
moves_node_g_score_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(moves_node_g_score_V_address0),
    .ce0(moves_node_g_score_V_ce0),
    .we0(moves_node_g_score_V_we0),
    .d0(moves_node_g_score_V_d0),
    .q0(moves_node_g_score_V_q0),
    .address1(moves_node_g_score_V_address1),
    .ce1(moves_node_g_score_V_ce1),
    .we1(moves_node_g_score_V_we1),
    .d1(moves_node_g_score_V_d1)
);

toplevel_os_sift_up_moves_node_x_V #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
moves_node_x_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(moves_node_x_V_address0),
    .ce0(moves_node_x_V_ce0),
    .we0(moves_node_x_V_we0),
    .d0(moves_node_x_V_d0),
    .q0(moves_node_x_V_q0),
    .address1(moves_node_x_V_address1),
    .ce1(moves_node_x_V_ce1),
    .we1(moves_node_x_V_we1),
    .d1(moves_node_x_V_d1)
);

toplevel_os_sift_up_moves_node_x_V #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
moves_node_y_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(moves_node_y_V_address0),
    .ce0(moves_node_y_V_ce0),
    .we0(moves_node_y_V_we0),
    .d0(moves_node_y_V_d0),
    .q0(moves_node_y_V_q0),
    .address1(moves_node_y_V_address1),
    .ce1(moves_node_y_V_ce1),
    .we1(moves_node_y_V_we1),
    .d1(moves_node_y_V_d1)
);

toplevel_os_sift_up_moves_target #(
    .DataWidth( 12 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
moves_target_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(moves_target_address0),
    .ce0(moves_target_ce0),
    .we0(moves_target_we0),
    .d0(moves_target_d0),
    .q0(moves_target_q0),
    .address1(moves_target_address1),
    .ce1(moves_target_ce1),
    .we1(moves_target_we1),
    .d1(moves_target_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state42) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_phi_mux_phi_ln259_phi_fu_1615_p66 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state42))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state42);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_phi_mux_phi_ln259_phi_fu_1615_p66 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        current_lcssa_reg_1538 <= select_ln244_15_reg_4193;
    end else if ((((icmp_ln238_15_fu_2932_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state38)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39)))) begin
        current_lcssa_reg_1538 <= trunc_ln245_14_reg_4153;
    end else if ((((icmp_ln238_14_fu_2861_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37)))) begin
        current_lcssa_reg_1538 <= trunc_ln245_13_reg_4106;
    end else if ((((icmp_ln238_13_fu_2790_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35)))) begin
        current_lcssa_reg_1538 <= trunc_ln245_12_reg_4060;
    end else if ((((icmp_ln238_12_fu_2719_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33)))) begin
        current_lcssa_reg_1538 <= trunc_ln245_11_reg_4014;
    end else if ((((icmp_ln238_11_fu_2648_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state31)))) begin
        current_lcssa_reg_1538 <= trunc_ln245_10_reg_3968;
    end else if ((((icmp_ln238_10_fu_2577_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29)))) begin
        current_lcssa_reg_1538 <= trunc_ln245_9_reg_3922;
    end else if ((((icmp_ln238_9_fu_2506_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27)))) begin
        current_lcssa_reg_1538 <= trunc_ln245_8_reg_3876;
    end else if ((((icmp_ln238_8_fu_2435_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25)))) begin
        current_lcssa_reg_1538 <= trunc_ln245_7_reg_3830;
    end else if ((((icmp_ln238_7_fu_2364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23)))) begin
        current_lcssa_reg_1538 <= trunc_ln245_6_reg_3784;
    end else if ((((icmp_ln238_6_fu_2293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        current_lcssa_reg_1538 <= trunc_ln245_5_reg_3738;
    end else if ((((icmp_ln238_5_fu_2222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19)))) begin
        current_lcssa_reg_1538 <= trunc_ln245_4_reg_3692;
    end else if ((((icmp_ln238_4_fu_2151_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17)))) begin
        current_lcssa_reg_1538 <= trunc_ln245_3_reg_3646;
    end else if ((((icmp_ln238_3_fu_2080_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15)))) begin
        current_lcssa_reg_1538 <= trunc_ln245_2_reg_3600;
    end else if ((((icmp_ln238_2_fu_2009_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13)))) begin
        current_lcssa_reg_1538 <= trunc_ln245_1_reg_3554;
    end else if ((((icmp_ln238_1_fu_1938_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11)))) begin
        current_lcssa_reg_1538 <= trunc_ln245_reg_3508;
    end else if ((((icmp_ln238_fu_1867_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)))) begin
        current_lcssa_reg_1538 <= empty_reg_3351;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_phi_ln259_phi_fu_1615_p66 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
        i_reg_1839 <= 5'd0;
    end else if (((icmp_ln260_fu_3014_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_1839 <= i_18_fu_3008_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        indvars_iv1_lcssa_reg_1717 <= 5'd16;
    end else if ((((icmp_ln238_15_fu_2932_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state38)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39)))) begin
        indvars_iv1_lcssa_reg_1717 <= 5'd15;
    end else if ((((icmp_ln238_14_fu_2861_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37)))) begin
        indvars_iv1_lcssa_reg_1717 <= 5'd14;
    end else if ((((icmp_ln238_13_fu_2790_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35)))) begin
        indvars_iv1_lcssa_reg_1717 <= 5'd13;
    end else if ((((icmp_ln238_12_fu_2719_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33)))) begin
        indvars_iv1_lcssa_reg_1717 <= 5'd12;
    end else if ((((icmp_ln238_11_fu_2648_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state31)))) begin
        indvars_iv1_lcssa_reg_1717 <= 5'd11;
    end else if ((((icmp_ln238_10_fu_2577_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29)))) begin
        indvars_iv1_lcssa_reg_1717 <= 5'd10;
    end else if ((((icmp_ln238_9_fu_2506_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27)))) begin
        indvars_iv1_lcssa_reg_1717 <= 5'd9;
    end else if ((((icmp_ln238_8_fu_2435_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25)))) begin
        indvars_iv1_lcssa_reg_1717 <= 5'd8;
    end else if ((((icmp_ln238_7_fu_2364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23)))) begin
        indvars_iv1_lcssa_reg_1717 <= 5'd7;
    end else if ((((icmp_ln238_6_fu_2293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        indvars_iv1_lcssa_reg_1717 <= 5'd6;
    end else if ((((icmp_ln238_5_fu_2222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19)))) begin
        indvars_iv1_lcssa_reg_1717 <= 5'd5;
    end else if ((((icmp_ln238_4_fu_2151_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17)))) begin
        indvars_iv1_lcssa_reg_1717 <= 5'd4;
    end else if ((((icmp_ln238_3_fu_2080_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15)))) begin
        indvars_iv1_lcssa_reg_1717 <= 5'd3;
    end else if ((((icmp_ln238_2_fu_2009_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13)))) begin
        indvars_iv1_lcssa_reg_1717 <= 5'd2;
    end else if ((((icmp_ln238_1_fu_1938_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11)))) begin
        indvars_iv1_lcssa_reg_1717 <= 5'd1;
    end else if ((((icmp_ln238_fu_1867_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)))) begin
        indvars_iv1_lcssa_reg_1717 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) | ((icmp_ln238_15_fu_2932_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state38)) | ((icmp_ln238_14_fu_2861_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36)) | ((icmp_ln238_13_fu_2790_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34)) | ((icmp_ln238_12_fu_2719_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32)) | ((icmp_ln238_11_fu_2648_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30)) | ((icmp_ln238_10_fu_2577_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28)) | ((icmp_ln238_9_fu_2506_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26)) | ((icmp_ln238_8_fu_2435_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24)) | ((icmp_ln238_7_fu_2364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln238_6_fu_2293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20)) | ((icmp_ln238_5_fu_2222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18)) | ((icmp_ln238_4_fu_2151_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16)) | ((icmp_ln238_3_fu_2080_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14)) | ((icmp_ln238_2_fu_2009_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln238_1_fu_1938_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state31)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11)))) begin
        phi_ln259_reg_1610 <= 1'd0;
    end else if ((((icmp_ln238_fu_1867_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8)) | ((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)))) begin
        phi_ln259_reg_1610 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        empty_reg_3351 <= empty_fu_1855_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln260_reg_4233 <= icmp_ln260_fu_3014_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        node_f_score_V_reg_3428 <= open_set_heap_f_score_V_q0;
        node_g_score_V_reg_3434 <= open_set_heap_g_score_V_q0;
        node_x_V_reg_3439 <= open_set_heap_x_V_q0;
        node_y_V_reg_3444 <= open_set_heap_y_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_10_fu_2577_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        select_ln244_10_reg_3962 <= select_ln244_10_fu_2631_p3;
        trunc_ln245_10_reg_3968 <= trunc_ln245_10_fu_2639_p1;
        zext_ln245_10_reg_3975[15 : 0] <= zext_ln245_10_fu_2643_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_11_fu_2648_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        select_ln244_11_reg_4008 <= select_ln244_11_fu_2702_p3;
        trunc_ln245_11_reg_4014 <= trunc_ln245_11_fu_2710_p1;
        zext_ln245_11_reg_4021[15 : 0] <= zext_ln245_11_fu_2714_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_12_fu_2719_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state32))) begin
        select_ln244_12_reg_4054 <= select_ln244_12_fu_2773_p3;
        trunc_ln245_12_reg_4060 <= trunc_ln245_12_fu_2781_p1;
        zext_ln245_12_reg_4067[15 : 0] <= zext_ln245_12_fu_2785_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_13_fu_2790_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state34))) begin
        select_ln244_13_reg_4100 <= select_ln244_13_fu_2844_p3;
        trunc_ln245_13_reg_4106 <= trunc_ln245_13_fu_2852_p1;
        zext_ln245_13_reg_4113[15 : 0] <= zext_ln245_13_fu_2856_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_14_fu_2861_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state36))) begin
        select_ln244_14_reg_4146 <= select_ln244_14_fu_2915_p3;
        trunc_ln245_14_reg_4153 <= trunc_ln245_14_fu_2923_p1;
        zext_ln245_14_reg_4160[15 : 0] <= zext_ln245_14_fu_2927_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_15_fu_2932_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state38))) begin
        select_ln244_15_reg_4193 <= select_ln244_15_fu_2995_p3;
        zext_ln245_15_reg_4198[11 : 0] <= zext_ln245_15_fu_3003_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_1_fu_1938_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        select_ln244_1_reg_3548 <= select_ln244_1_fu_1992_p3;
        trunc_ln245_1_reg_3554 <= trunc_ln245_1_fu_2000_p1;
        zext_ln245_1_reg_3561[15 : 0] <= zext_ln245_1_fu_2004_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_2_fu_2009_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        select_ln244_2_reg_3594 <= select_ln244_2_fu_2063_p3;
        trunc_ln245_2_reg_3600 <= trunc_ln245_2_fu_2071_p1;
        zext_ln245_2_reg_3607[15 : 0] <= zext_ln245_2_fu_2075_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_3_fu_2080_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        select_ln244_3_reg_3640 <= select_ln244_3_fu_2134_p3;
        trunc_ln245_3_reg_3646 <= trunc_ln245_3_fu_2142_p1;
        zext_ln245_3_reg_3653[15 : 0] <= zext_ln245_3_fu_2146_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_4_fu_2151_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        select_ln244_4_reg_3686 <= select_ln244_4_fu_2205_p3;
        trunc_ln245_4_reg_3692 <= trunc_ln245_4_fu_2213_p1;
        zext_ln245_4_reg_3699[15 : 0] <= zext_ln245_4_fu_2217_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_5_fu_2222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        select_ln244_5_reg_3732 <= select_ln244_5_fu_2276_p3;
        trunc_ln245_5_reg_3738 <= trunc_ln245_5_fu_2284_p1;
        zext_ln245_5_reg_3745[15 : 0] <= zext_ln245_5_fu_2288_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_6_fu_2293_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        select_ln244_6_reg_3778 <= select_ln244_6_fu_2347_p3;
        trunc_ln245_6_reg_3784 <= trunc_ln245_6_fu_2355_p1;
        zext_ln245_6_reg_3791[15 : 0] <= zext_ln245_6_fu_2359_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_7_fu_2364_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        select_ln244_7_reg_3824 <= select_ln244_7_fu_2418_p3;
        trunc_ln245_7_reg_3830 <= trunc_ln245_7_fu_2426_p1;
        zext_ln245_7_reg_3837[15 : 0] <= zext_ln245_7_fu_2430_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_8_fu_2435_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        select_ln244_8_reg_3870 <= select_ln244_8_fu_2489_p3;
        trunc_ln245_8_reg_3876 <= trunc_ln245_8_fu_2497_p1;
        zext_ln245_8_reg_3883[15 : 0] <= zext_ln245_8_fu_2501_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_9_fu_2506_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        select_ln244_9_reg_3916 <= select_ln244_9_fu_2560_p3;
        trunc_ln245_9_reg_3922 <= trunc_ln245_9_fu_2568_p1;
        zext_ln245_9_reg_3929[15 : 0] <= zext_ln245_9_fu_2572_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_fu_1867_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        select_ln244_reg_3502 <= select_ln244_fu_1921_p3;
        trunc_ln245_reg_3508 <= trunc_ln245_fu_1929_p1;
        zext_ln245_reg_3515[15 : 0] <= zext_ln245_fu_1933_p1[15 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln260_fu_3014_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state42 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state42 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        moves_node_f_score_V_address0 = zext_ln263_fu_3020_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        moves_node_f_score_V_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        moves_node_f_score_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        moves_node_f_score_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        moves_node_f_score_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        moves_node_f_score_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        moves_node_f_score_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        moves_node_f_score_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        moves_node_f_score_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        moves_node_f_score_V_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        moves_node_f_score_V_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        moves_node_f_score_V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        moves_node_f_score_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        moves_node_f_score_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        moves_node_f_score_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        moves_node_f_score_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        moves_node_f_score_V_address0 = 64'd1;
    end else begin
        moves_node_f_score_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        moves_node_f_score_V_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        moves_node_f_score_V_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        moves_node_f_score_V_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        moves_node_f_score_V_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        moves_node_f_score_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        moves_node_f_score_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        moves_node_f_score_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        moves_node_f_score_V_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        moves_node_f_score_V_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        moves_node_f_score_V_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        moves_node_f_score_V_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        moves_node_f_score_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        moves_node_f_score_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        moves_node_f_score_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        moves_node_f_score_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        moves_node_f_score_V_address1 = 64'd0;
    end else begin
        moves_node_f_score_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        moves_node_f_score_V_ce0 = 1'b1;
    end else begin
        moves_node_f_score_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        moves_node_f_score_V_ce1 = 1'b1;
    end else begin
        moves_node_f_score_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        moves_node_f_score_V_d0 = open_set_heap_f_score_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        moves_node_f_score_V_d0 = 11'd0;
    end else begin
        moves_node_f_score_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11))) begin
        moves_node_f_score_V_d1 = open_set_heap_f_score_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        moves_node_f_score_V_d1 = 11'd0;
    end else begin
        moves_node_f_score_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state37)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state33)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state29)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        moves_node_f_score_V_we0 = 1'b1;
    end else begin
        moves_node_f_score_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state39)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state35)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state27)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        moves_node_f_score_V_we1 = 1'b1;
    end else begin
        moves_node_f_score_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        moves_node_g_score_V_address0 = zext_ln263_fu_3020_p1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        moves_node_g_score_V_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        moves_node_g_score_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        moves_node_g_score_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        moves_node_g_score_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        moves_node_g_score_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        moves_node_g_score_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        moves_node_g_score_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        moves_node_g_score_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        moves_node_g_score_V_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        moves_node_g_score_V_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        moves_node_g_score_V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        moves_node_g_score_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        moves_node_g_score_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        moves_node_g_score_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        moves_node_g_score_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        moves_node_g_score_V_address0 = 64'd1;
    end else begin
        moves_node_g_score_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        moves_node_g_score_V_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        moves_node_g_score_V_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        moves_node_g_score_V_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        moves_node_g_score_V_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        moves_node_g_score_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        moves_node_g_score_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        moves_node_g_score_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        moves_node_g_score_V_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        moves_node_g_score_V_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        moves_node_g_score_V_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        moves_node_g_score_V_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        moves_node_g_score_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        moves_node_g_score_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        moves_node_g_score_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        moves_node_g_score_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        moves_node_g_score_V_address1 = 64'd0;
    end else begin
        moves_node_g_score_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        moves_node_g_score_V_ce0 = 1'b1;
    end else begin
        moves_node_g_score_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        moves_node_g_score_V_ce1 = 1'b1;
    end else begin
        moves_node_g_score_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10))) begin
        moves_node_g_score_V_d0 = open_set_heap_g_score_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        moves_node_g_score_V_d0 = 11'd0;
    end else begin
        moves_node_g_score_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        moves_node_g_score_V_d1 = open_set_heap_g_score_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        moves_node_g_score_V_d1 = 11'd0;
    end else begin
        moves_node_g_score_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        moves_node_g_score_V_we0 = 1'b1;
    end else begin
        moves_node_g_score_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        moves_node_g_score_V_we1 = 1'b1;
    end else begin
        moves_node_g_score_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        moves_node_x_V_address0 = zext_ln263_fu_3020_p1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        moves_node_x_V_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        moves_node_x_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        moves_node_x_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        moves_node_x_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        moves_node_x_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        moves_node_x_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        moves_node_x_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        moves_node_x_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        moves_node_x_V_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        moves_node_x_V_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        moves_node_x_V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        moves_node_x_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        moves_node_x_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        moves_node_x_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        moves_node_x_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        moves_node_x_V_address0 = 64'd1;
    end else begin
        moves_node_x_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        moves_node_x_V_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        moves_node_x_V_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        moves_node_x_V_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        moves_node_x_V_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        moves_node_x_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        moves_node_x_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        moves_node_x_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        moves_node_x_V_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        moves_node_x_V_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        moves_node_x_V_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        moves_node_x_V_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        moves_node_x_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        moves_node_x_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        moves_node_x_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        moves_node_x_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        moves_node_x_V_address1 = 64'd0;
    end else begin
        moves_node_x_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        moves_node_x_V_ce0 = 1'b1;
    end else begin
        moves_node_x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        moves_node_x_V_ce1 = 1'b1;
    end else begin
        moves_node_x_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10))) begin
        moves_node_x_V_d0 = open_set_heap_x_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        moves_node_x_V_d0 = 9'd0;
    end else begin
        moves_node_x_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        moves_node_x_V_d1 = open_set_heap_x_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        moves_node_x_V_d1 = 9'd0;
    end else begin
        moves_node_x_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        moves_node_x_V_we0 = 1'b1;
    end else begin
        moves_node_x_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        moves_node_x_V_we1 = 1'b1;
    end else begin
        moves_node_x_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        moves_node_y_V_address0 = zext_ln263_fu_3020_p1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        moves_node_y_V_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        moves_node_y_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        moves_node_y_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        moves_node_y_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        moves_node_y_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        moves_node_y_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        moves_node_y_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        moves_node_y_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        moves_node_y_V_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        moves_node_y_V_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        moves_node_y_V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        moves_node_y_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        moves_node_y_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        moves_node_y_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        moves_node_y_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        moves_node_y_V_address0 = 64'd1;
    end else begin
        moves_node_y_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        moves_node_y_V_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        moves_node_y_V_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        moves_node_y_V_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        moves_node_y_V_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        moves_node_y_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        moves_node_y_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        moves_node_y_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        moves_node_y_V_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        moves_node_y_V_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        moves_node_y_V_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        moves_node_y_V_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        moves_node_y_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        moves_node_y_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        moves_node_y_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        moves_node_y_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        moves_node_y_V_address1 = 64'd0;
    end else begin
        moves_node_y_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        moves_node_y_V_ce0 = 1'b1;
    end else begin
        moves_node_y_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        moves_node_y_V_ce1 = 1'b1;
    end else begin
        moves_node_y_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10))) begin
        moves_node_y_V_d0 = open_set_heap_y_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        moves_node_y_V_d0 = 9'd0;
    end else begin
        moves_node_y_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        moves_node_y_V_d1 = open_set_heap_y_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        moves_node_y_V_d1 = 9'd0;
    end else begin
        moves_node_y_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        moves_node_y_V_we0 = 1'b1;
    end else begin
        moves_node_y_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        moves_node_y_V_we1 = 1'b1;
    end else begin
        moves_node_y_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        moves_target_address0 = zext_ln263_fu_3020_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        moves_target_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        moves_target_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        moves_target_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        moves_target_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        moves_target_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        moves_target_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        moves_target_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        moves_target_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        moves_target_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        moves_target_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        moves_target_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        moves_target_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        moves_target_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        moves_target_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        moves_target_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        moves_target_address0 = 64'd1;
    end else begin
        moves_target_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        moves_target_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        moves_target_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        moves_target_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        moves_target_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        moves_target_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        moves_target_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        moves_target_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        moves_target_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        moves_target_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        moves_target_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        moves_target_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        moves_target_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        moves_target_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        moves_target_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        moves_target_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        moves_target_address1 = 64'd0;
    end else begin
        moves_target_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        moves_target_ce0 = 1'b1;
    end else begin
        moves_target_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        moves_target_ce1 = 1'b1;
    end else begin
        moves_target_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        moves_target_d0 = trunc_ln245_13_reg_4106;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        moves_target_d0 = trunc_ln245_11_reg_4014;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        moves_target_d0 = trunc_ln245_9_reg_3922;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        moves_target_d0 = trunc_ln245_7_reg_3830;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        moves_target_d0 = trunc_ln245_5_reg_3738;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        moves_target_d0 = trunc_ln245_3_reg_3646;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        moves_target_d0 = trunc_ln245_1_reg_3554;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        moves_target_d0 = empty_reg_3351;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        moves_target_d0 = 12'd0;
    end else begin
        moves_target_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        moves_target_d1 = trunc_ln245_14_reg_4153;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        moves_target_d1 = trunc_ln245_12_reg_4060;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        moves_target_d1 = trunc_ln245_10_reg_3968;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        moves_target_d1 = trunc_ln245_8_reg_3876;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        moves_target_d1 = trunc_ln245_6_reg_3784;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        moves_target_d1 = trunc_ln245_4_reg_3692;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        moves_target_d1 = trunc_ln245_2_reg_3600;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        moves_target_d1 = trunc_ln245_reg_3508;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        moves_target_d1 = 12'd0;
    end else begin
        moves_target_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state37)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state33)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state29)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        moves_target_we0 = 1'b1;
    end else begin
        moves_target_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state39)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state35)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state27)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15)) | ((grp_fu_1850_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        moves_target_we1 = 1'b1;
    end else begin
        moves_target_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        open_set_heap_f_score_V_address0 = zext_ln265_fu_3037_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        open_set_heap_f_score_V_address0 = zext_ln263_1_fu_3029_p1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        open_set_heap_f_score_V_address0 = zext_ln245_15_fu_3003_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        open_set_heap_f_score_V_address0 = zext_ln245_14_fu_2927_p1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        open_set_heap_f_score_V_address0 = zext_ln245_13_fu_2856_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        open_set_heap_f_score_V_address0 = zext_ln245_12_fu_2785_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        open_set_heap_f_score_V_address0 = zext_ln245_11_fu_2714_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        open_set_heap_f_score_V_address0 = zext_ln245_10_fu_2643_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        open_set_heap_f_score_V_address0 = zext_ln245_9_fu_2572_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        open_set_heap_f_score_V_address0 = zext_ln245_8_fu_2501_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        open_set_heap_f_score_V_address0 = zext_ln245_7_fu_2430_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        open_set_heap_f_score_V_address0 = zext_ln245_6_fu_2359_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        open_set_heap_f_score_V_address0 = zext_ln245_5_fu_2288_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        open_set_heap_f_score_V_address0 = zext_ln245_4_fu_2217_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        open_set_heap_f_score_V_address0 = zext_ln245_3_fu_2146_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        open_set_heap_f_score_V_address0 = zext_ln245_2_fu_2075_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        open_set_heap_f_score_V_address0 = zext_ln245_1_fu_2004_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        open_set_heap_f_score_V_address0 = zext_ln245_fu_1933_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        open_set_heap_f_score_V_address0 = zext_ln220_fu_1859_p1;
    end else begin
        open_set_heap_f_score_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state44) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        open_set_heap_f_score_V_ce0 = 1'b1;
    end else begin
        open_set_heap_f_score_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        open_set_heap_f_score_V_d0 = node_f_score_V_reg_3428;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        open_set_heap_f_score_V_d0 = moves_node_f_score_V_q0;
    end else begin
        open_set_heap_f_score_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((phi_ln259_reg_1610 == 1'd0) & (1'b1 == ap_CS_fsm_state44)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln260_reg_4233 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        open_set_heap_f_score_V_we0 = 1'b1;
    end else begin
        open_set_heap_f_score_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        open_set_heap_g_score_V_address0 = zext_ln265_fu_3037_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        open_set_heap_g_score_V_address0 = zext_ln263_1_fu_3029_p1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        open_set_heap_g_score_V_address0 = zext_ln245_15_reg_4198;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        open_set_heap_g_score_V_address0 = zext_ln245_14_reg_4160;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        open_set_heap_g_score_V_address0 = zext_ln245_13_reg_4113;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        open_set_heap_g_score_V_address0 = zext_ln245_12_reg_4067;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        open_set_heap_g_score_V_address0 = zext_ln245_11_reg_4021;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        open_set_heap_g_score_V_address0 = zext_ln245_10_reg_3975;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        open_set_heap_g_score_V_address0 = zext_ln245_9_reg_3929;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        open_set_heap_g_score_V_address0 = zext_ln245_8_reg_3883;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        open_set_heap_g_score_V_address0 = zext_ln245_7_reg_3837;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        open_set_heap_g_score_V_address0 = zext_ln245_6_reg_3791;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        open_set_heap_g_score_V_address0 = zext_ln245_5_reg_3745;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        open_set_heap_g_score_V_address0 = zext_ln245_4_reg_3699;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        open_set_heap_g_score_V_address0 = zext_ln245_3_reg_3653;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        open_set_heap_g_score_V_address0 = zext_ln245_2_reg_3607;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        open_set_heap_g_score_V_address0 = zext_ln245_1_reg_3561;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        open_set_heap_g_score_V_address0 = zext_ln245_reg_3515;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        open_set_heap_g_score_V_address0 = zext_ln220_fu_1859_p1;
    end else begin
        open_set_heap_g_score_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state44) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        open_set_heap_g_score_V_ce0 = 1'b1;
    end else begin
        open_set_heap_g_score_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        open_set_heap_g_score_V_d0 = node_g_score_V_reg_3434;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        open_set_heap_g_score_V_d0 = moves_node_g_score_V_q0;
    end else begin
        open_set_heap_g_score_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((phi_ln259_reg_1610 == 1'd0) & (1'b1 == ap_CS_fsm_state44)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln260_reg_4233 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        open_set_heap_g_score_V_we0 = 1'b1;
    end else begin
        open_set_heap_g_score_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        open_set_heap_x_V_address0 = zext_ln265_fu_3037_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        open_set_heap_x_V_address0 = zext_ln263_1_fu_3029_p1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        open_set_heap_x_V_address0 = zext_ln245_15_reg_4198;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        open_set_heap_x_V_address0 = zext_ln245_14_reg_4160;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        open_set_heap_x_V_address0 = zext_ln245_13_reg_4113;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        open_set_heap_x_V_address0 = zext_ln245_12_reg_4067;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        open_set_heap_x_V_address0 = zext_ln245_11_reg_4021;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        open_set_heap_x_V_address0 = zext_ln245_10_reg_3975;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        open_set_heap_x_V_address0 = zext_ln245_9_reg_3929;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        open_set_heap_x_V_address0 = zext_ln245_8_reg_3883;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        open_set_heap_x_V_address0 = zext_ln245_7_reg_3837;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        open_set_heap_x_V_address0 = zext_ln245_6_reg_3791;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        open_set_heap_x_V_address0 = zext_ln245_5_reg_3745;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        open_set_heap_x_V_address0 = zext_ln245_4_reg_3699;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        open_set_heap_x_V_address0 = zext_ln245_3_reg_3653;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        open_set_heap_x_V_address0 = zext_ln245_2_reg_3607;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        open_set_heap_x_V_address0 = zext_ln245_1_reg_3561;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        open_set_heap_x_V_address0 = zext_ln245_reg_3515;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        open_set_heap_x_V_address0 = zext_ln220_fu_1859_p1;
    end else begin
        open_set_heap_x_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state44) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        open_set_heap_x_V_ce0 = 1'b1;
    end else begin
        open_set_heap_x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        open_set_heap_x_V_d0 = node_x_V_reg_3439;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        open_set_heap_x_V_d0 = moves_node_x_V_q0;
    end else begin
        open_set_heap_x_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((phi_ln259_reg_1610 == 1'd0) & (1'b1 == ap_CS_fsm_state44)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln260_reg_4233 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        open_set_heap_x_V_we0 = 1'b1;
    end else begin
        open_set_heap_x_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        open_set_heap_y_V_address0 = zext_ln265_fu_3037_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        open_set_heap_y_V_address0 = zext_ln263_1_fu_3029_p1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        open_set_heap_y_V_address0 = zext_ln245_15_reg_4198;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        open_set_heap_y_V_address0 = zext_ln245_14_reg_4160;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        open_set_heap_y_V_address0 = zext_ln245_13_reg_4113;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        open_set_heap_y_V_address0 = zext_ln245_12_reg_4067;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        open_set_heap_y_V_address0 = zext_ln245_11_reg_4021;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        open_set_heap_y_V_address0 = zext_ln245_10_reg_3975;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        open_set_heap_y_V_address0 = zext_ln245_9_reg_3929;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        open_set_heap_y_V_address0 = zext_ln245_8_reg_3883;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        open_set_heap_y_V_address0 = zext_ln245_7_reg_3837;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        open_set_heap_y_V_address0 = zext_ln245_6_reg_3791;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        open_set_heap_y_V_address0 = zext_ln245_5_reg_3745;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        open_set_heap_y_V_address0 = zext_ln245_4_reg_3699;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        open_set_heap_y_V_address0 = zext_ln245_3_reg_3653;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        open_set_heap_y_V_address0 = zext_ln245_2_reg_3607;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        open_set_heap_y_V_address0 = zext_ln245_1_reg_3561;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        open_set_heap_y_V_address0 = zext_ln245_reg_3515;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        open_set_heap_y_V_address0 = zext_ln220_fu_1859_p1;
    end else begin
        open_set_heap_y_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state44) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        open_set_heap_y_V_ce0 = 1'b1;
    end else begin
        open_set_heap_y_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        open_set_heap_y_V_d0 = node_y_V_reg_3444;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        open_set_heap_y_V_d0 = moves_node_y_V_q0;
    end else begin
        open_set_heap_y_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((phi_ln259_reg_1610 == 1'd0) & (1'b1 == ap_CS_fsm_state44)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln260_reg_4233 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        open_set_heap_y_V_we0 = 1'b1;
    end else begin
        open_set_heap_y_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln238_fu_1867_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln238_1_fu_1938_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln238_2_fu_2009_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln238_3_fu_2080_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln238_4_fu_2151_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln238_5_fu_2222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((icmp_ln238_6_fu_2293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((icmp_ln238_7_fu_2364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((icmp_ln238_8_fu_2435_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((icmp_ln238_9_fu_2506_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((icmp_ln238_10_fu_2577_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((icmp_ln238_11_fu_2648_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((icmp_ln238_12_fu_2719_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((icmp_ln238_13_fu_2790_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((icmp_ln238_14_fu_2861_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((icmp_ln238_15_fu_2932_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((grp_fu_1850_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((ap_phi_mux_phi_ln259_phi_fu_1615_p66 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln260_fu_3014_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln260_fu_3014_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln244_10_fu_2585_p2 = ($signed(zext_ln244_10_fu_2582_p1) + $signed(17'd131071));

assign add_ln244_11_fu_2656_p2 = ($signed(zext_ln244_11_fu_2653_p1) + $signed(17'd131071));

assign add_ln244_12_fu_2727_p2 = ($signed(zext_ln244_12_fu_2724_p1) + $signed(17'd131071));

assign add_ln244_13_fu_2798_p2 = ($signed(zext_ln244_13_fu_2795_p1) + $signed(17'd131071));

assign add_ln244_14_fu_2869_p2 = ($signed(zext_ln244_14_fu_2866_p1) + $signed(17'd131071));

assign add_ln244_15_fu_2943_p2 = ($signed(zext_ln244_15_fu_2940_p1) + $signed(17'd131071));

assign add_ln244_16_fu_2949_p2 = ($signed(trunc_ln244_fu_2937_p1) + $signed(13'd8191));

assign add_ln244_1_fu_1946_p2 = ($signed(zext_ln244_1_fu_1943_p1) + $signed(17'd131071));

assign add_ln244_2_fu_2017_p2 = ($signed(zext_ln244_2_fu_2014_p1) + $signed(17'd131071));

assign add_ln244_3_fu_2088_p2 = ($signed(zext_ln244_3_fu_2085_p1) + $signed(17'd131071));

assign add_ln244_4_fu_2159_p2 = ($signed(zext_ln244_4_fu_2156_p1) + $signed(17'd131071));

assign add_ln244_5_fu_2230_p2 = ($signed(zext_ln244_5_fu_2227_p1) + $signed(17'd131071));

assign add_ln244_6_fu_2301_p2 = ($signed(zext_ln244_6_fu_2298_p1) + $signed(17'd131071));

assign add_ln244_7_fu_2372_p2 = ($signed(zext_ln244_7_fu_2369_p1) + $signed(17'd131071));

assign add_ln244_8_fu_2443_p2 = ($signed(zext_ln244_8_fu_2440_p1) + $signed(17'd131071));

assign add_ln244_9_fu_2514_p2 = ($signed(zext_ln244_9_fu_2511_p1) + $signed(17'd131071));

assign add_ln244_fu_1875_p2 = ($signed(zext_ln244_fu_1872_p1) + $signed(17'd131071));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_phi_ln259_phi_fu_1615_p66 = phi_ln259_reg_1610;

assign empty_fu_1855_p1 = idx[11:0];

assign grp_fu_1850_p2 = ((open_set_heap_f_score_V_q0 < node_f_score_V_reg_3428) ? 1'b1 : 1'b0);

assign i_18_fu_3008_p2 = (i_reg_1839 + 5'd1);

assign icmp_ln238_10_fu_2577_p2 = ((select_ln244_9_reg_3916 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln238_11_fu_2648_p2 = ((select_ln244_10_reg_3962 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln238_12_fu_2719_p2 = ((select_ln244_11_reg_4008 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln238_13_fu_2790_p2 = ((select_ln244_12_reg_4054 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln238_14_fu_2861_p2 = ((select_ln244_13_reg_4100 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln238_15_fu_2932_p2 = ((select_ln244_14_reg_4146 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln238_1_fu_1938_p2 = ((select_ln244_reg_3502 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln238_2_fu_2009_p2 = ((select_ln244_1_reg_3548 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln238_3_fu_2080_p2 = ((select_ln244_2_reg_3594 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln238_4_fu_2151_p2 = ((select_ln244_3_reg_3640 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln238_5_fu_2222_p2 = ((select_ln244_4_reg_3686 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln238_6_fu_2293_p2 = ((select_ln244_5_reg_3732 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln238_7_fu_2364_p2 = ((select_ln244_6_reg_3778 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln238_8_fu_2435_p2 = ((select_ln244_7_reg_3824 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln238_9_fu_2506_p2 = ((select_ln244_8_reg_3870 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln238_fu_1867_p2 = ((idx == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln260_fu_3014_p2 = ((i_reg_1839 == indvars_iv1_lcssa_reg_1717) ? 1'b1 : 1'b0);

assign select_ln244_10_fu_2631_p3 = ((tmp_15_fu_2591_p3[0:0] == 1'b1) ? sub_ln244_21_fu_2615_p2 : trunc_ln244_21_fu_2621_p4);

assign select_ln244_11_fu_2702_p3 = ((tmp_16_fu_2662_p3[0:0] == 1'b1) ? sub_ln244_23_fu_2686_p2 : trunc_ln244_23_fu_2692_p4);

assign select_ln244_12_fu_2773_p3 = ((tmp_17_fu_2733_p3[0:0] == 1'b1) ? sub_ln244_25_fu_2757_p2 : trunc_ln244_25_fu_2763_p4);

assign select_ln244_13_fu_2844_p3 = ((tmp_18_fu_2804_p3[0:0] == 1'b1) ? sub_ln244_27_fu_2828_p2 : trunc_ln244_27_fu_2834_p4);

assign select_ln244_14_fu_2915_p3 = ((tmp_19_fu_2875_p3[0:0] == 1'b1) ? sub_ln244_29_fu_2899_p2 : trunc_ln244_29_fu_2905_p4);

assign select_ln244_15_fu_2995_p3 = ((tmp_20_fu_2955_p3[0:0] == 1'b1) ? sub_ln244_31_fu_2979_p2 : trunc_ln244_31_fu_2985_p4);

assign select_ln244_1_fu_1992_p3 = ((tmp_6_fu_1952_p3[0:0] == 1'b1) ? sub_ln244_3_fu_1976_p2 : trunc_ln244_5_fu_1982_p4);

assign select_ln244_2_fu_2063_p3 = ((tmp_7_fu_2023_p3[0:0] == 1'b1) ? sub_ln244_5_fu_2047_p2 : trunc_ln244_8_fu_2053_p4);

assign select_ln244_3_fu_2134_p3 = ((tmp_8_fu_2094_p3[0:0] == 1'b1) ? sub_ln244_7_fu_2118_p2 : trunc_ln244_3_fu_2124_p4);

assign select_ln244_4_fu_2205_p3 = ((tmp_9_fu_2165_p3[0:0] == 1'b1) ? sub_ln244_9_fu_2189_p2 : trunc_ln244_9_fu_2195_p4);

assign select_ln244_5_fu_2276_p3 = ((tmp_10_fu_2236_p3[0:0] == 1'b1) ? sub_ln244_11_fu_2260_p2 : trunc_ln244_11_fu_2266_p4);

assign select_ln244_6_fu_2347_p3 = ((tmp_11_fu_2307_p3[0:0] == 1'b1) ? sub_ln244_13_fu_2331_p2 : trunc_ln244_13_fu_2337_p4);

assign select_ln244_7_fu_2418_p3 = ((tmp_12_fu_2378_p3[0:0] == 1'b1) ? sub_ln244_15_fu_2402_p2 : trunc_ln244_15_fu_2408_p4);

assign select_ln244_8_fu_2489_p3 = ((tmp_13_fu_2449_p3[0:0] == 1'b1) ? sub_ln244_17_fu_2473_p2 : trunc_ln244_17_fu_2479_p4);

assign select_ln244_9_fu_2560_p3 = ((tmp_14_fu_2520_p3[0:0] == 1'b1) ? sub_ln244_19_fu_2544_p2 : trunc_ln244_19_fu_2550_p4);

assign select_ln244_fu_1921_p3 = ((tmp_fu_1881_p3[0:0] == 1'b1) ? sub_ln244_1_fu_1905_p2 : trunc_ln244_2_fu_1911_p4);

assign sub_ln244_10_fu_2244_p2 = (17'd1 - zext_ln244_5_fu_2227_p1);

assign sub_ln244_11_fu_2260_p2 = (16'd0 - trunc_ln244_10_fu_2250_p4);

assign sub_ln244_12_fu_2315_p2 = (17'd1 - zext_ln244_6_fu_2298_p1);

assign sub_ln244_13_fu_2331_p2 = (16'd0 - trunc_ln244_12_fu_2321_p4);

assign sub_ln244_14_fu_2386_p2 = (17'd1 - zext_ln244_7_fu_2369_p1);

assign sub_ln244_15_fu_2402_p2 = (16'd0 - trunc_ln244_14_fu_2392_p4);

assign sub_ln244_16_fu_2457_p2 = (17'd1 - zext_ln244_8_fu_2440_p1);

assign sub_ln244_17_fu_2473_p2 = (16'd0 - trunc_ln244_16_fu_2463_p4);

assign sub_ln244_18_fu_2528_p2 = (17'd1 - zext_ln244_9_fu_2511_p1);

assign sub_ln244_19_fu_2544_p2 = (16'd0 - trunc_ln244_18_fu_2534_p4);

assign sub_ln244_1_fu_1905_p2 = (16'd0 - trunc_ln244_1_fu_1895_p4);

assign sub_ln244_20_fu_2599_p2 = (17'd1 - zext_ln244_10_fu_2582_p1);

assign sub_ln244_21_fu_2615_p2 = (16'd0 - trunc_ln244_20_fu_2605_p4);

assign sub_ln244_22_fu_2670_p2 = (17'd1 - zext_ln244_11_fu_2653_p1);

assign sub_ln244_23_fu_2686_p2 = (16'd0 - trunc_ln244_22_fu_2676_p4);

assign sub_ln244_24_fu_2741_p2 = (17'd1 - zext_ln244_12_fu_2724_p1);

assign sub_ln244_25_fu_2757_p2 = (16'd0 - trunc_ln244_24_fu_2747_p4);

assign sub_ln244_26_fu_2812_p2 = (17'd1 - zext_ln244_13_fu_2795_p1);

assign sub_ln244_27_fu_2828_p2 = (16'd0 - trunc_ln244_26_fu_2818_p4);

assign sub_ln244_28_fu_2883_p2 = (17'd1 - zext_ln244_14_fu_2866_p1);

assign sub_ln244_29_fu_2899_p2 = (16'd0 - trunc_ln244_28_fu_2889_p4);

assign sub_ln244_2_fu_1960_p2 = (17'd1 - zext_ln244_1_fu_1943_p1);

assign sub_ln244_30_fu_2963_p2 = (13'd1 - trunc_ln244_fu_2937_p1);

assign sub_ln244_31_fu_2979_p2 = (12'd0 - trunc_ln244_30_fu_2969_p4);

assign sub_ln244_3_fu_1976_p2 = (16'd0 - trunc_ln244_4_fu_1966_p4);

assign sub_ln244_4_fu_2031_p2 = (17'd1 - zext_ln244_2_fu_2014_p1);

assign sub_ln244_5_fu_2047_p2 = (16'd0 - trunc_ln244_7_fu_2037_p4);

assign sub_ln244_6_fu_2102_p2 = (17'd1 - zext_ln244_3_fu_2085_p1);

assign sub_ln244_7_fu_2118_p2 = (16'd0 - trunc_ln244_s_fu_2108_p4);

assign sub_ln244_8_fu_2173_p2 = (17'd1 - zext_ln244_4_fu_2156_p1);

assign sub_ln244_9_fu_2189_p2 = (16'd0 - trunc_ln244_6_fu_2179_p4);

assign sub_ln244_fu_1889_p2 = (17'd1 - zext_ln244_fu_1872_p1);

assign tmp_10_fu_2236_p3 = add_ln244_5_fu_2230_p2[32'd16];

assign tmp_11_fu_2307_p3 = add_ln244_6_fu_2301_p2[32'd16];

assign tmp_12_fu_2378_p3 = add_ln244_7_fu_2372_p2[32'd16];

assign tmp_13_fu_2449_p3 = add_ln244_8_fu_2443_p2[32'd16];

assign tmp_14_fu_2520_p3 = add_ln244_9_fu_2514_p2[32'd16];

assign tmp_15_fu_2591_p3 = add_ln244_10_fu_2585_p2[32'd16];

assign tmp_16_fu_2662_p3 = add_ln244_11_fu_2656_p2[32'd16];

assign tmp_17_fu_2733_p3 = add_ln244_12_fu_2727_p2[32'd16];

assign tmp_18_fu_2804_p3 = add_ln244_13_fu_2798_p2[32'd16];

assign tmp_19_fu_2875_p3 = add_ln244_14_fu_2869_p2[32'd16];

assign tmp_20_fu_2955_p3 = add_ln244_15_fu_2943_p2[32'd16];

assign tmp_6_fu_1952_p3 = add_ln244_1_fu_1946_p2[32'd16];

assign tmp_7_fu_2023_p3 = add_ln244_2_fu_2017_p2[32'd16];

assign tmp_8_fu_2094_p3 = add_ln244_3_fu_2088_p2[32'd16];

assign tmp_9_fu_2165_p3 = add_ln244_4_fu_2159_p2[32'd16];

assign tmp_fu_1881_p3 = add_ln244_fu_1875_p2[32'd16];

assign trunc_ln244_10_fu_2250_p4 = {{sub_ln244_10_fu_2244_p2[16:1]}};

assign trunc_ln244_11_fu_2266_p4 = {{add_ln244_5_fu_2230_p2[16:1]}};

assign trunc_ln244_12_fu_2321_p4 = {{sub_ln244_12_fu_2315_p2[16:1]}};

assign trunc_ln244_13_fu_2337_p4 = {{add_ln244_6_fu_2301_p2[16:1]}};

assign trunc_ln244_14_fu_2392_p4 = {{sub_ln244_14_fu_2386_p2[16:1]}};

assign trunc_ln244_15_fu_2408_p4 = {{add_ln244_7_fu_2372_p2[16:1]}};

assign trunc_ln244_16_fu_2463_p4 = {{sub_ln244_16_fu_2457_p2[16:1]}};

assign trunc_ln244_17_fu_2479_p4 = {{add_ln244_8_fu_2443_p2[16:1]}};

assign trunc_ln244_18_fu_2534_p4 = {{sub_ln244_18_fu_2528_p2[16:1]}};

assign trunc_ln244_19_fu_2550_p4 = {{add_ln244_9_fu_2514_p2[16:1]}};

assign trunc_ln244_1_fu_1895_p4 = {{sub_ln244_fu_1889_p2[16:1]}};

assign trunc_ln244_20_fu_2605_p4 = {{sub_ln244_20_fu_2599_p2[16:1]}};

assign trunc_ln244_21_fu_2621_p4 = {{add_ln244_10_fu_2585_p2[16:1]}};

assign trunc_ln244_22_fu_2676_p4 = {{sub_ln244_22_fu_2670_p2[16:1]}};

assign trunc_ln244_23_fu_2692_p4 = {{add_ln244_11_fu_2656_p2[16:1]}};

assign trunc_ln244_24_fu_2747_p4 = {{sub_ln244_24_fu_2741_p2[16:1]}};

assign trunc_ln244_25_fu_2763_p4 = {{add_ln244_12_fu_2727_p2[16:1]}};

assign trunc_ln244_26_fu_2818_p4 = {{sub_ln244_26_fu_2812_p2[16:1]}};

assign trunc_ln244_27_fu_2834_p4 = {{add_ln244_13_fu_2798_p2[16:1]}};

assign trunc_ln244_28_fu_2889_p4 = {{sub_ln244_28_fu_2883_p2[16:1]}};

assign trunc_ln244_29_fu_2905_p4 = {{add_ln244_14_fu_2869_p2[16:1]}};

assign trunc_ln244_2_fu_1911_p4 = {{add_ln244_fu_1875_p2[16:1]}};

assign trunc_ln244_30_fu_2969_p4 = {{sub_ln244_30_fu_2963_p2[12:1]}};

assign trunc_ln244_31_fu_2985_p4 = {{add_ln244_16_fu_2949_p2[12:1]}};

assign trunc_ln244_3_fu_2124_p4 = {{add_ln244_3_fu_2088_p2[16:1]}};

assign trunc_ln244_4_fu_1966_p4 = {{sub_ln244_2_fu_1960_p2[16:1]}};

assign trunc_ln244_5_fu_1982_p4 = {{add_ln244_1_fu_1946_p2[16:1]}};

assign trunc_ln244_6_fu_2179_p4 = {{sub_ln244_8_fu_2173_p2[16:1]}};

assign trunc_ln244_7_fu_2037_p4 = {{sub_ln244_4_fu_2031_p2[16:1]}};

assign trunc_ln244_8_fu_2053_p4 = {{add_ln244_2_fu_2017_p2[16:1]}};

assign trunc_ln244_9_fu_2195_p4 = {{add_ln244_4_fu_2159_p2[16:1]}};

assign trunc_ln244_fu_2937_p1 = select_ln244_14_reg_4146[12:0];

assign trunc_ln244_s_fu_2108_p4 = {{sub_ln244_6_fu_2102_p2[16:1]}};

assign trunc_ln245_10_fu_2639_p1 = select_ln244_10_fu_2631_p3[11:0];

assign trunc_ln245_11_fu_2710_p1 = select_ln244_11_fu_2702_p3[11:0];

assign trunc_ln245_12_fu_2781_p1 = select_ln244_12_fu_2773_p3[11:0];

assign trunc_ln245_13_fu_2852_p1 = select_ln244_13_fu_2844_p3[11:0];

assign trunc_ln245_14_fu_2923_p1 = select_ln244_14_fu_2915_p3[11:0];

assign trunc_ln245_1_fu_2000_p1 = select_ln244_1_fu_1992_p3[11:0];

assign trunc_ln245_2_fu_2071_p1 = select_ln244_2_fu_2063_p3[11:0];

assign trunc_ln245_3_fu_2142_p1 = select_ln244_3_fu_2134_p3[11:0];

assign trunc_ln245_4_fu_2213_p1 = select_ln244_4_fu_2205_p3[11:0];

assign trunc_ln245_5_fu_2284_p1 = select_ln244_5_fu_2276_p3[11:0];

assign trunc_ln245_6_fu_2355_p1 = select_ln244_6_fu_2347_p3[11:0];

assign trunc_ln245_7_fu_2426_p1 = select_ln244_7_fu_2418_p3[11:0];

assign trunc_ln245_8_fu_2497_p1 = select_ln244_8_fu_2489_p3[11:0];

assign trunc_ln245_9_fu_2568_p1 = select_ln244_9_fu_2560_p3[11:0];

assign trunc_ln245_fu_1929_p1 = select_ln244_fu_1921_p3[11:0];

assign zext_ln220_fu_1859_p1 = idx;

assign zext_ln244_10_fu_2582_p1 = select_ln244_9_reg_3916;

assign zext_ln244_11_fu_2653_p1 = select_ln244_10_reg_3962;

assign zext_ln244_12_fu_2724_p1 = select_ln244_11_reg_4008;

assign zext_ln244_13_fu_2795_p1 = select_ln244_12_reg_4054;

assign zext_ln244_14_fu_2866_p1 = select_ln244_13_reg_4100;

assign zext_ln244_15_fu_2940_p1 = select_ln244_14_reg_4146;

assign zext_ln244_1_fu_1943_p1 = select_ln244_reg_3502;

assign zext_ln244_2_fu_2014_p1 = select_ln244_1_reg_3548;

assign zext_ln244_3_fu_2085_p1 = select_ln244_2_reg_3594;

assign zext_ln244_4_fu_2156_p1 = select_ln244_3_reg_3640;

assign zext_ln244_5_fu_2227_p1 = select_ln244_4_reg_3686;

assign zext_ln244_6_fu_2298_p1 = select_ln244_5_reg_3732;

assign zext_ln244_7_fu_2369_p1 = select_ln244_6_reg_3778;

assign zext_ln244_8_fu_2440_p1 = select_ln244_7_reg_3824;

assign zext_ln244_9_fu_2511_p1 = select_ln244_8_reg_3870;

assign zext_ln244_fu_1872_p1 = idx;

assign zext_ln245_10_fu_2643_p1 = select_ln244_10_fu_2631_p3;

assign zext_ln245_11_fu_2714_p1 = select_ln244_11_fu_2702_p3;

assign zext_ln245_12_fu_2785_p1 = select_ln244_12_fu_2773_p3;

assign zext_ln245_13_fu_2856_p1 = select_ln244_13_fu_2844_p3;

assign zext_ln245_14_fu_2927_p1 = select_ln244_14_fu_2915_p3;

assign zext_ln245_15_fu_3003_p1 = select_ln244_15_fu_2995_p3;

assign zext_ln245_1_fu_2004_p1 = select_ln244_1_fu_1992_p3;

assign zext_ln245_2_fu_2075_p1 = select_ln244_2_fu_2063_p3;

assign zext_ln245_3_fu_2146_p1 = select_ln244_3_fu_2134_p3;

assign zext_ln245_4_fu_2217_p1 = select_ln244_4_fu_2205_p3;

assign zext_ln245_5_fu_2288_p1 = select_ln244_5_fu_2276_p3;

assign zext_ln245_6_fu_2359_p1 = select_ln244_6_fu_2347_p3;

assign zext_ln245_7_fu_2430_p1 = select_ln244_7_fu_2418_p3;

assign zext_ln245_8_fu_2501_p1 = select_ln244_8_fu_2489_p3;

assign zext_ln245_9_fu_2572_p1 = select_ln244_9_fu_2560_p3;

assign zext_ln245_fu_1933_p1 = select_ln244_fu_1921_p3;

assign zext_ln263_1_fu_3029_p1 = moves_target_q0;

assign zext_ln263_fu_3020_p1 = i_reg_1839;

assign zext_ln265_fu_3037_p1 = current_lcssa_reg_1538;

always @ (posedge ap_clk) begin
    zext_ln245_reg_3515[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln245_1_reg_3561[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln245_2_reg_3607[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln245_3_reg_3653[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln245_4_reg_3699[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln245_5_reg_3745[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln245_6_reg_3791[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln245_7_reg_3837[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln245_8_reg_3883[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln245_9_reg_3929[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln245_10_reg_3975[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln245_11_reg_4021[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln245_12_reg_4067[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln245_13_reg_4113[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln245_14_reg_4160[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln245_15_reg_4198[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //toplevel_os_sift_up
