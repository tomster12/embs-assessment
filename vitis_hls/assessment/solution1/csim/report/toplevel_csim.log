INFO: [SIM 2] *************** CSIM start ***************
INFO: [SIM 4] CSIM will launch GCC as the compiler.
   Compiling ../../../testbench.cpp in debug mode
   Compiling ../../../toplevel.cpp in debug mode
   Generating csim.exe
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
Starting testbench
Test: 655368
Test: 0
Test: 196611
Test: 458753
Test: 458757
Running toplevel from testbench
Starting toplevel
World size: 10, waypoint count: 8
RAM_META_WORDS: 2, RAM_WAYPOINT_WORDS: 16, RAM_WORLD_WORDS: 7813, RAM_MAX_WORDS: 9831, RAM_WORLD_OFFSET: 18, RAM_WORLD_PATH_OFFSET: 7831
Pathfinding 0 to 1
    [OS] PUSH { 6, 0, 3, 3 }, size=1
    [OS] POP { 6, 0, 3, 3 }, size=0
[I0] Current node: { 6, 0, 3, 3 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (3, 2)
    [OS] PUSH { 6, 1, 3, 2 }, size=1
Neighbour 1 (-1, 0), blocked
Adding neighbour 2 (0, 1), pos (3, 4)
    [OS] PUSH { 8, 1, 3, 4 }, size=2
    [OS] S_UP, parent 0(6) is smaller than 1(8), stopping
Adding neighbour 3 (1, 0), pos (4, 3)
    [OS] PUSH { 6, 1, 4, 3 }, size=3
    [OS] S_UP, parent 0(6) is bigger than 2(6), sifting
    [OS] S_UP, sifted to the root with f_score 6
    [OS] POP { 6, 1, 4, 3 }, size=2
[I1] Current node: { 6, 1, 4, 3 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (4, 2)
    [OS] PUSH { 6, 2, 4, 2 }, size=3
    [OS] S_UP, parent 0(6) is bigger than 2(6), sifting
    [OS] S_UP, sifted to the root with f_score 6
Neighbour 1 (-1, 0), blocked
Adding neighbour 2 (0, 1), pos (4, 4)
    [OS] PUSH { 8, 2, 4, 4 }, size=4
    [OS] S_UP, parent 1(8) is bigger than 3(8), sifting
    [OS] S_UP, parent 0(6) is smaller than 1(8), stopping
Adding neighbour 3 (1, 0), pos (5, 3)
    [OS] PUSH { 6, 2, 5, 3 }, size=5
    [OS] S_UP, parent 1(8) is bigger than 4(6), sifting
    [OS] S_UP, parent 0(6) is bigger than 1(6), sifting
    [OS] S_UP, sifted to the root with f_score 6
    [OS] POP { 6, 2, 5, 3 }, size=4
    [OS] S_DOWN, right 2(6) is smaller than 0(8), sifting
[I2] Current node: { 6, 2, 5, 3 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (5, 2)
    [OS] PUSH { 6, 3, 5, 2 }, size=5
    [OS] S_UP, parent 1(6) is bigger than 4(6), sifting
    [OS] S_UP, parent 0(6) is bigger than 1(6), sifting
    [OS] S_UP, sifted to the root with f_score 6
Neighbour 1 (-1, 0), blocked
Adding neighbour 2 (0, 1), pos (5, 4)
    [OS] PUSH { 8, 3, 5, 4 }, size=6
    [OS] S_UP, parent 2(8) is bigger than 5(8), sifting
    [OS] S_UP, parent 0(6) is smaller than 2(8), stopping
Neighbour 3 (1, 0), blocked
    [OS] POP { 6, 3, 5, 2 }, size=5
    [OS] S_DOWN, left 1(6) is smaller than 0(8), sifting
    [OS] S_DOWN, right 4(6) is smaller than 1(8), sifting
[I3] Current node: { 6, 3, 5, 2 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (5, 1)
    [OS] PUSH { 6, 4, 5, 1 }, size=6
    [OS] S_UP, parent 2(8) is bigger than 5(6), sifting
    [OS] S_UP, parent 0(6) is bigger than 2(6), sifting
    [OS] S_UP, sifted to the root with f_score 6
Neighbour 1 (-1, 0), pos (4, 2) already exists
Neighbour 2 (0, 1), blocked
Neighbour 3 (1, 0), blocked
    [OS] POP { 6, 4, 5, 1 }, size=5
    [OS] S_DOWN, right 2(6) is smaller than 0(8), sifting
[I4] Current node: { 6, 4, 5, 1 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (5, 0)
    [OS] PUSH { 8, 5, 5, 0 }, size=6
    [OS] S_UP, parent 2(8) is bigger than 5(8), sifting
    [OS] S_UP, parent 0(6) is smaller than 2(8), stopping
Adding neighbour 1 (-1, 0), pos (4, 1)
    [OS] PUSH { 8, 5, 4, 1 }, size=7
    [OS] S_UP, parent 2(8) is bigger than 6(8), sifting
    [OS] S_UP, parent 0(6) is smaller than 2(8), stopping
Neighbour 2 (0, 1), blocked
Neighbour 3 (1, 0), blocked
    [OS] POP { 6, 1, 3, 2 }, size=6
    [OS] S_DOWN, left 1(6) is smaller than 0(8), sifting
    [OS] S_DOWN, right 4(8) is smaller than 1(8), sifting
[I5] Current node: { 6, 1, 3, 2 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (3, 1)
    [OS] PUSH { 6, 2, 3, 1 }, size=7
    [OS] S_UP, parent 2(8) is bigger than 6(6), sifting
    [OS] S_UP, parent 0(6) is bigger than 2(6), sifting
    [OS] S_UP, sifted to the root with f_score 6
Neighbour 1 (-1, 0), blocked
Neighbour 2 (0, 1), blocked
Neighbour 3 (1, 0), pos (4, 2) already exists
    [OS] POP { 6, 2, 3, 1 }, size=6
    [OS] S_DOWWARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
N, right 2(6) is smaller than 0(8), sifting
    [OS] S_DOWN, left 5(8) is smaller than 2(8), sifting
[I6] Current node: { 6, 2, 3, 1 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (3, 0)
    [OS] PUSH { 8, 3, 3, 0 }, size=7
    [OS] S_UP, parent 2(8) is bigger than 6(8), sifting
    [OS] S_UP, parent 0(6) is smaller than 2(8), stopping
Neighbour 1 (-1, 0), blocked
Neighbour 2 (0, 1), blocked
Updating neighbour 3 (1, 0), pos (4, 1)
    [OS] S_UP, parent 2(8) is bigger than 5(6), sifting
    [OS] S_UP, parent 0(6) is bigger than 2(6), sifting
    [OS] S_UP, sifted to the root with f_score 6
    [OS] POP { 6, 3, 4, 1 }, size=6
    [OS] S_DOWN, right 2(6) is smaller than 0(8), sifting
    [OS] S_DOWN, left 5(8) is smaller than 2(8), sifting
[I7] Current node: { 6, 3, 4, 1 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (4, 0)
    [OS] PUSH { 8, 4, 4, 0 }, size=7
    [OS] S_UP, parent 2(8) is bigger than 6(8), sifting
    [OS] S_UP, parent 0(6) is smaller than 2(8), stopping
Neighbour 1 (-1, 0), blocked
Neighbour 2 (0, 1), pos (4, 2) already exists
Neighbour 3 (1, 0), blocked
    [OS] POP { 6, 2, 4, 2 }, size=6
    [OS] S_DOWN, right 2(8) is smaller than 0(8), sifting
    [OS] S_DOWN, left 5(8) is smaller than 2(8), sifting
[I8] Current node: { 6, 2, 4, 2 }
Exploring current neighbours
Neighbour 0 (0, -1), blocked
Neighbour 1 (-1, 0), blocked
Neighbour 2 (0, 1), blocked
Neighbour 3 (1, 0), blocked
    [OS] POP { 8, 4, 4, 0 }, size=5
    [OS] S_DOWN, right 2(8) is smaller than 0(8), sifting
[I9] Current node: { 8, 4, 4, 0 }
Exploring current neighbours
Neighbour 1 (-1, 0), pos (3, 0) already exists
Neighbour 2 (0, 1), blocked
Neighbour 3 (1, 0), pos (5, 0) already exists
    [OS] POP { 8, 3, 5, 4 }, size=4
    [OS] S_DOWN, right 2(8) is smaller than 0(8), sifting
[I10] Current node: { 8, 3, 5, 4 }
Exploring current neighbours
Neighbour 0 (0, -1), blocked
Neighbour 1 (-1, 0), pos (4, 4) already exists
Adding neighbour 2 (0, 1), pos (5, 5)
    [OS] PUSH { 10, 4, 5, 5 }, size=5
    [OS] S_UP, parent 1(8) is smaller than 4(10), stopping
Neighbour 3 (1, 0), blocked
    [OS] POP { 8, 3, 3, 0 }, size=4
    [OS] S_DOWN, right 2(8) is smaller than 0(10), sifting
[I11] Current node: { 8, 3, 3, 0 }
Exploring current neighbours
Adding neighbour 1 (-1, 0), pos (2, 0)
    [OS] PUSH { 10, 4, 2, 0 }, size=5
    [OS] S_UP, parent 1(8) is smaller than 4(10), stopping
Neighbour 2 (0, 1), blocked
Neighbour 3 (1, 0), blocked
    [OS] POP { 8, 5, 5, 0 }, size=4
    [OS] S_DOWN, left 1(8) is smaller than 0(10), sifting
    [OS] S_DOWN, left 3(8) is smaller than 1(10), sifting
[I12] Current node: { 8, 5, 5, 0 }
Exploring current neighbours
Neighbour 1 (-1, 0), blocked
Neighbour 2 (0, 1), blocked
Adding neighbour 3 (1, 0), pos (6, 0)
    [OS] PUSH { 8, 6, 6, 0 }, size=5
    [OS] S_UP, parent 1(8) is bigger than 4(8), sifting
    [OS] S_UP, parent 0(8) is bigger than 1(8), sifting
    [OS] S_UP, sifted to the root with f_score 8
    [OS] POP { 8, 6, 6, 0 }, size=4
    [OS] S_DOWN, left 1(8) is smaller than 0(8), sifting
[I13] Current node: { 8, 6, 6, 0 }
Exploring current neighbours
Neighbour 1 (-1, 0), blocked
Neighbour 2 (0, 1), blocked
Adding neighbour 3 (1, 0), pos (7, 0)
    [OS] PUSH { 8, 7, 7, 0 }, size=5
    [OS] S_UP, parent 1(8) is bigger than 4(8), sifting
    [OS] S_UP, parent 0(8) is bigger than 1(8), sifting
    [OS] S_UP, sifted to the root with f_score 8
    [OS] POP { 8, 7, 7, 0 }, size=4
    [OS] S_DOWN, left 1(8) is smaller than 0(8), sifting
[I14] Current node: { 8, 7, 7, 0 }
Exploring current neighbours
Neighbour 1 (-1, 0), blocked
Adding neighbour 2 (0, 1), pos (7, 1)
    [OS] PUSH { 8, 8, 7, 1 }, size=5
    [OS] S_UP, parent 1(8) is bigger than 4(8), sifting
    [OS] S_UP, parent 0(8) is bigger than 1(8), sifting
    [OS] S_UP, sifted to the root with f_score 8
Adding neighbour 3 (1, 0), pos (8, 0)
    [OS] PUSH { 10, 8, 8, 0 }, size=6
    [OS] S_UP, parent 2(10) is bigger than 5(10), sifting
    [OS] S_WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
UP, parent 0(8) is smaller than 2(10), stopping
    [OS] POP { 8, 8, 7, 1 }, size=5
    [OS] S_DOWN, left 1(8) is smaller than 0(10), sifting
    [OS] S_DOWN, right 4(8) is smaller than 1(10), sifting
[I15] Current node: { 8, 8, 7, 1 }
Setting path position 7, 1 at 0
Setting path position 7, 0 at 1
Setting path position 6, 0 at 2
Setting path position 5, 0 at 3
Setting path position 5, 1 at 4
Setting path position 5, 2 at 5
Setting path position 5, 3 at 6
Setting path position 4, 3 at 7
Setting path position 3, 3 at 8
Pathfinding 1 to 2
    [OS] PUSH { 4, 0, 7, 1 }, size=1
    [OS] POP { 4, 0, 7, 1 }, size=0
[I0] Current node: { 4, 0, 7, 1 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (7, 0)
    [OS] PUSH { 6, 1, 7, 0 }, size=1
Neighbour 1 (-1, 0), blocked
Adding neighbour 2 (0, 1), pos (7, 2)
    [OS] PUSH { 4, 1, 7, 2 }, size=2
    [OS] S_UP, parent 0(6) is bigger than 1(4), sifting
    [OS] S_UP, sifted to the root with f_score 4
Adding neighbour 3 (1, 0), pos (8, 1)
    [OS] PUSH { 6, 1, 8, 1 }, size=3
    [OS] S_UP, parent 0(4) is smaller than 2(6), stopping
    [OS] POP { 4, 1, 7, 2 }, size=2
    [OS] S_DOWN, left 1(6) is smaller than 0(6), sifting
[I1] Current node: { 4, 1, 7, 2 }
Exploring current neighbours
Neighbour 0 (0, -1), blocked
Neighbour 1 (-1, 0), blocked
Adding neighbour 2 (0, 1), pos (7, 3)
    [OS] PUSH { 4, 2, 7, 3 }, size=3
    [OS] S_UP, parent 0(6) is bigger than 2(4), sifting
    [OS] S_UP, sifted to the root with f_score 4
Neighbour 3 (1, 0), blocked
    [OS] POP { 4, 2, 7, 3 }, size=2
    [OS] S_DOWN, left 1(6) is smaller than 0(6), sifting
[I2] Current node: { 4, 2, 7, 3 }
Exploring current neighbours
Neighbour 0 (0, -1), blocked
Neighbour 1 (-1, 0), blocked
Adding neighbour 2 (0, 1), pos (7, 4)
    [OS] PUSH { 4, 3, 7, 4 }, size=3
    [OS] S_UP, parent 0(6) is bigger than 2(4), sifting
    [OS] S_UP, sifted to the root with f_score 4
Adding neighbour 3 (1, 0), pos (8, 3)
    [OS] PUSH { 6, 3, 8, 3 }, size=4
    [OS] S_UP, parent 1(6) is bigger than 3(6), sifting
    [OS] S_UP, parent 0(4) is smaller than 1(6), stopping
    [OS] POP { 4, 3, 7, 4 }, size=3
    [OS] S_DOWN, right 2(6) is smaller than 0(6), sifting
[I3] Current node: { 4, 3, 7, 4 }
Exploring current neighbours
Neighbour 0 (0, -1), blocked
Neighbour 1 (-1, 0), blocked
Adding neighbour 2 (0, 1), pos (7, 5)
    [OS] PUSH { 4, 4, 7, 5 }, size=4
    [OS] S_UP, parent 1(6) is bigger than 3(4), sifting
    [OS] S_UP, parent 0(6) is bigger than 1(4), sifting
    [OS] S_UP, sifted to the root with f_score 4
Adding neighbour 3 (1, 0), pos (8, 4)
    [OS] PUSH { 6, 4, 8, 4 }, size=5
    [OS] S_UP, parent 1(6) is bigger than 4(6), sifting
    [OS] S_UP, parent 0(4) is smaller than 1(6), stopping
    [OS] POP { 4, 4, 7, 5 }, size=4
    [OS] S_DOWN, right 2(6) is smaller than 0(6), sifting
[I4] Current node: { 4, 4, 7, 5 }
Setting path position 7, 5 at 0
Setting path position 7, 4 at 1
Setting path position 7, 3 at 2
Setting path position 7, 2 at 3
Setting path position 7, 1 at 4
Pathfinding 2 to 3
    [OS] PUSH { 4, 0, 7, 5 }, size=1
    [OS] POP { 4, 0, 7, 5 }, size=0
[I0] Current node: { 4, 0, 7, 5 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (7, 4)
    [OS] PUSH { 6, 1, 7, 4 }, size=1
Neighbour 1 (-1, 0), blocked
Adding neighbour 2 (0, 1), pos (7, 6)
    [OS] PUSH { 4, 1, 7, 6 }, size=2
    [OS] S_UP, parent 0(6) is bigger than 1(4), sifting
    [OS] S_UP, sifted to the root with f_score 4
Adding neighbour 3 (1, 0), pos (8, 5)
    [OS] PUSH { 6, 1, 8, 5 }, size=3
    [OS] S_UP, parent 0(4) is smaller than 2(6), stopping
    [OS] POP { 4, 1, 7, 6 }, size=2
    [OS] S_DOWN, left 1(6) is smaller than 0(6), sifting
[I1] Current node: { 4, 1, 7, 6 }
Exploring current neighbours
Neighbour 0 (0, -1), blocked
Neighbour 1 (-1, 0), blocked
Adding neighbour 2 (0, 1), pos (7, 7)
    [OS] PUSH { 4, 2, 7, 7 }, size=3
    [OS] S_UP, parent 0(6) is bigger than 2(4), sifting
    [OS] S_UP, sifted to the root with f_score WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
4
Neighbour 3 (1, 0), blocked
    [OS] POP { 4, 2, 7, 7 }, size=2
    [OS] S_DOWN, left 1(6) is smaller than 0(6), sifting
[I2] Current node: { 4, 2, 7, 7 }
Exploring current neighbours
Neighbour 0 (0, -1), blocked
Neighbour 1 (-1, 0), blocked
Adding neighbour 2 (0, 1), pos (7, 8)
    [OS] PUSH { 6, 3, 7, 8 }, size=3
    [OS] S_UP, parent 0(6) is bigger than 2(6), sifting
    [OS] S_UP, sifted to the root with f_score 6
Neighbour 3 (1, 0), blocked
    [OS] POP { 6, 3, 7, 8 }, size=2
    [OS] S_DOWN, left 1(6) is smaller than 0(6), sifting
[I3] Current node: { 6, 3, 7, 8 }
Exploring current neighbours
Neighbour 0 (0, -1), blocked
Neighbour 1 (-1, 0), blocked
Adding neighbour 2 (0, 1), pos (7, 9)
    [OS] PUSH { 8, 4, 7, 9 }, size=3
    [OS] S_UP, parent 0(6) is smaller than 2(8), stopping
Neighbour 3 (1, 0), blocked
    [OS] POP { 6, 1, 7, 4 }, size=2
    [OS] S_DOWN, left 1(6) is smaller than 0(8), sifting
[I4] Current node: { 6, 1, 7, 4 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (7, 3)
    [OS] PUSH { 8, 2, 7, 3 }, size=3
    [OS] S_UP, parent 0(6) is smaller than 2(8), stopping
Neighbour 1 (-1, 0), blocked
Neighbour 2 (0, 1), blocked
Adding neighbour 3 (1, 0), pos (8, 4)
    [OS] PUSH { 8, 2, 8, 4 }, size=4
    [OS] S_UP, parent 1(8) is bigger than 3(8), sifting
    [OS] S_UP, parent 0(6) is smaller than 1(8), stopping
    [OS] POP { 6, 1, 8, 5 }, size=3
    [OS] S_DOWN, right 2(8) is smaller than 0(8), sifting
[I5] Current node: { 6, 1, 8, 5 }
Exploring current neighbours
Neighbour 0 (0, -1), pos (8, 4) already exists
Neighbour 1 (-1, 0), blocked
Neighbour 2 (0, 1), blocked
Adding neighbour 3 (1, 0), pos (9, 5)
    [OS] PUSH { 8, 2, 9, 5 }, size=4
    [OS] S_UP, parent 1(8) is bigger than 3(8), sifting
    [OS] S_UP, parent 0(8) is bigger than 1(8), sifting
    [OS] S_UP, sifted to the root with f_score 8
    [OS] POP { 8, 2, 9, 5 }, size=3
    [OS] S_DOWN, right 2(8) is smaller than 0(8), sifting
[I6] Current node: { 8, 2, 9, 5 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (9, 4)
    [OS] PUSH { 10, 3, 9, 4 }, size=4
    [OS] S_UP, parent 1(8) is smaller than 3(10), stopping
Neighbour 1 (-1, 0), blocked
Adding neighbour 2 (0, 1), pos (9, 6)
    [OS] PUSH { 8, 3, 9, 6 }, size=5
    [OS] S_UP, parent 1(8) is bigger than 4(8), sifting
    [OS] S_UP, parent 0(8) is bigger than 1(8), sifting
    [OS] S_UP, sifted to the root with f_score 8
Neighbour 3 (1, 0), out of top bounds
    [OS] POP { 8, 3, 9, 6 }, size=4
    [OS] S_DOWN, right 2(8) is smaller than 0(8), sifting
[I7] Current node: { 8, 3, 9, 6 }
Exploring current neighbours
Neighbour 0 (0, -1), blocked
Neighbour 1 (-1, 0), blocked
Adding neighbour 2 (0, 1), pos (9, 7)
    [OS] PUSH { 8, 4, 9, 7 }, size=5
    [OS] S_UP, parent 1(8) is bigger than 4(8), sifting
    [OS] S_UP, parent 0(8) is bigger than 1(8), sifting
    [OS] S_UP, sifted to the root with f_score 8
Neighbour 3 (1, 0), out of top bounds
    [OS] POP { 8, 4, 9, 7 }, size=4
    [OS] S_DOWN, right 2(8) is smaller than 0(8), sifting
[I8] Current node: { 8, 4, 9, 7 }
Exploring current neighbours
Neighbour 0 (0, -1), blocked
Neighbour 1 (-1, 0), blocked
Adding neighbour 2 (0, 1), pos (9, 8)
    [OS] PUSH { 10, 5, 9, 8 }, size=5
    [OS] S_UP, parent 1(8) is smaller than 4(10), stopping
Neighbour 3 (1, 0), out of top bounds
    [OS] POP { 8, 2, 7, 3 }, size=4
    [OS] S_DOWN, right 2(8) is smaller than 0(10), sifting
[I9] Current node: { 8, 2, 7, 3 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (7, 2)
    [OS] PUSH { 10, 3, 7, 2 }, size=5
    [OS] S_UP, parent 1(8) is smaller than 4(10), stopping
Neighbour 1 (-1, 0), blocked
Neighbour 2 (0, 1), blocked
Adding neighbour 3 (1, 0), pos (8, 3)
    [OS] PUSH { 10, 3, 8, 3 }, size=6
    [OS] S_UP, parent 2(10) is bigger than 5(10), sifting
    [OS] S_UP, parent 0(8) is smaller than 2(10), stopping
    [OS] POP { 8, 4, 7, 9 }, size=5
    [OS] S_DOWN, left 1(8) is smaller than 0(10), sifting
    [OS] S_DOWN, right 4(1WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
0) is smaller than 1(10), sifting
[I10] Current node: { 8, 4, 7, 9 }
Exploring current neighbours
Neighbour 0 (0, -1), blocked
Adding neighbour 1 (-1, 0), pos (6, 9)
    [OS] PUSH { 8, 5, 6, 9 }, size=6
    [OS] S_UP, parent 2(10) is bigger than 5(8), sifting
    [OS] S_UP, parent 0(8) is bigger than 2(8), sifting
    [OS] S_UP, sifted to the root with f_score 8
Neighbour 2 (0, 1), out of top bounds
Adding neighbour 3 (1, 0), pos (8, 9)
    [OS] PUSH { 10, 5, 8, 9 }, size=7
    [OS] S_UP, parent 2(8) is smaller than 6(10), stopping
    [OS] POP { 8, 5, 6, 9 }, size=6
    [OS] S_DOWN, right 2(8) is smaller than 0(10), sifting
    [OS] S_DOWN, left 5(10) is smaller than 2(10), sifting
[I11] Current node: { 8, 5, 6, 9 }
Exploring current neighbours
Neighbour 0 (0, -1), blocked
Adding neighbour 1 (-1, 0), pos (5, 9)
    [OS] PUSH { 8, 6, 5, 9 }, size=7
    [OS] S_UP, parent 2(10) is bigger than 6(8), sifting
    [OS] S_UP, parent 0(8) is bigger than 2(8), sifting
    [OS] S_UP, sifted to the root with f_score 8
Neighbour 2 (0, 1), out of top bounds
Neighbour 3 (1, 0), blocked
    [OS] POP { 8, 6, 5, 9 }, size=6
    [OS] S_DOWN, right 2(8) is smaller than 0(10), sifting
    [OS] S_DOWN, left 5(10) is smaller than 2(10), sifting
[I12] Current node: { 8, 6, 5, 9 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (5, 8)
    [OS] PUSH { 8, 7, 5, 8 }, size=7
    [OS] S_UP, parent 2(10) is bigger than 6(8), sifting
    [OS] S_UP, parent 0(8) is bigger than 2(8), sifting
    [OS] S_UP, sifted to the root with f_score 8
Adding neighbour 1 (-1, 0), pos (4, 9)
    [OS] PUSH { 10, 7, 4, 9 }, size=8
    [OS] S_UP, parent 3(10) is bigger than 7(10), sifting
    [OS] S_UP, parent 1(10) is bigger than 3(10), sifting
    [OS] S_UP, parent 0(8) is smaller than 1(10), stopping
Neighbour 2 (0, 1), out of top bounds
Neighbour 3 (1, 0), blocked
    [OS] POP { 8, 7, 5, 8 }, size=7
    [OS] S_DOWN, right 2(8) is smaller than 0(10), sifting
    [OS] S_DOWN, right 6(10) is smaller than 2(10), sifting
[I13] Current node: { 8, 7, 5, 8 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (5, 7)
    [OS] PUSH { 8, 8, 5, 7 }, size=8
    [OS] S_UP, parent 3(10) is bigger than 7(8), sifting
    [OS] S_UP, parent 1(10) is bigger than 3(8), sifting
    [OS] S_UP, parent 0(8) is bigger than 1(8), sifting
    [OS] S_UP, sifted to the root with f_score 8
Neighbour 1 (-1, 0), blocked
Neighbour 2 (0, 1), blocked
Neighbour 3 (1, 0), blocked
    [OS] POP { 8, 8, 5, 7 }, size=7
    [OS] S_DOWN, left 1(8) is smaller than 0(10), sifting
    [OS] S_DOWN, right 4(10) is smaller than 1(10), sifting
[I14] Current node: { 8, 8, 5, 7 }
Setting path position 5, 7 at 0
Setting path position 5, 8 at 1
Setting path position 5, 9 at 2
Setting path position 6, 9 at 3
Setting path position 7, 9 at 4
Setting path position 7, 8 at 5
Setting path position 7, 7 at 6
Setting path position 7, 6 at 7
Setting path position 7, 5 at 8
Pathfinding 3 to 4
    [OS] PUSH { 4, 0, 5, 7 }, size=1
    [OS] POP { 4, 0, 5, 7 }, size=0
[I0] Current node: { 4, 0, 5, 7 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (5, 6)
    [OS] PUSH { 6, 1, 5, 6 }, size=1
Adding neighbour 1 (-1, 0), pos (4, 7)
    [OS] PUSH { 4, 1, 4, 7 }, size=2
    [OS] S_UP, parent 0(6) is bigger than 1(4), sifting
    [OS] S_UP, sifted to the root with f_score 4
Adding neighbour 2 (0, 1), pos (5, 8)
    [OS] PUSH { 6, 1, 5, 8 }, size=3
    [OS] S_UP, parent 0(4) is smaller than 2(6), stopping
Neighbour 3 (1, 0), blocked
    [OS] POP { 4, 1, 4, 7 }, size=2
    [OS] S_DOWN, left 1(6) is smaller than 0(6), sifting
[I1] Current node: { 4, 1, 4, 7 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (4, 6)
    [OS] PUSH { 6, 2, 4, 6 }, size=3
    [OS] S_UP, parent 0(6) is bigger than 2(6), sifting
    [OS] S_UP, sifted to the root with f_score 6
Adding neighbour 1 (-1, 0), pos (3, 7)
    [OS] PUSH { 4, 2, 3, 7 }, size=4
    [OS] S_UP, parent 1(6) is bigger than 3(4), sifting
    [OS] S_UP, pareWARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
nt 0(6) is bigger than 1(4), sifting
    [OS] S_UP, sifted to the root with f_score 4
Neighbour 2 (0, 1), blocked
Neighbour 3 (1, 0), blocked
    [OS] POP { 4, 2, 3, 7 }, size=3
    [OS] S_DOWN, right 2(6) is smaller than 0(6), sifting
[I2] Current node: { 4, 2, 3, 7 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (3, 6)
    [OS] PUSH { 6, 3, 3, 6 }, size=4
    [OS] S_UP, parent 1(6) is bigger than 3(6), sifting
    [OS] S_UP, parent 0(6) is bigger than 1(6), sifting
    [OS] S_UP, sifted to the root with f_score 6
Neighbour 1 (-1, 0), blocked
Adding neighbour 2 (0, 1), pos (3, 8)
    [OS] PUSH { 6, 3, 3, 8 }, size=5
    [OS] S_UP, parent 1(6) is bigger than 4(6), sifting
    [OS] S_UP, parent 0(6) is bigger than 1(6), sifting
    [OS] S_UP, sifted to the root with f_score 6
Neighbour 3 (1, 0), blocked
    [OS] POP { 6, 3, 3, 8 }, size=4
    [OS] S_DOWN, right 2(6) is smaller than 0(6), sifting
[I3] Current node: { 6, 3, 3, 8 }
Exploring current neighbours
Neighbour 0 (0, -1), blocked
Neighbour 1 (-1, 0), blocked
Adding neighbour 2 (0, 1), pos (3, 9)
    [OS] PUSH { 8, 4, 3, 9 }, size=5
    [OS] S_UP, parent 1(6) is smaller than 4(8), stopping
Neighbour 3 (1, 0), blocked
    [OS] POP { 6, 1, 5, 8 }, size=4
    [OS] S_DOWN, right 2(6) is smaller than 0(8), sifting
[I4] Current node: { 6, 1, 5, 8 }
Exploring current neighbours
Neighbour 0 (0, -1), blocked
Neighbour 1 (-1, 0), blocked
Adding neighbour 2 (0, 1), pos (5, 9)
    [OS] PUSH { 8, 2, 5, 9 }, size=5
    [OS] S_UP, parent 1(6) is smaller than 4(8), stopping
Neighbour 3 (1, 0), blocked
    [OS] POP { 6, 1, 5, 6 }, size=4
    [OS] S_DOWN, left 1(6) is smaller than 0(8), sifting
    [OS] S_DOWN, left 3(6) is smaller than 1(8), sifting
[I5] Current node: { 6, 1, 5, 6 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (5, 5)
    [OS] PUSH { 8, 2, 5, 5 }, size=5
    [OS] S_UP, parent 1(6) is smaller than 4(8), stopping
Neighbour 1 (-1, 0), pos (4, 6) already exists
Neighbour 2 (0, 1), blocked
Neighbour 3 (1, 0), blocked
    [OS] POP { 6, 3, 3, 6 }, size=4
    [OS] S_DOWN, left 1(6) is smaller than 0(8), sifting
    [OS] S_DOWN, left 3(8) is smaller than 1(8), sifting
[I6] Current node: { 6, 3, 3, 6 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (3, 5)
    [OS] PUSH { 8, 4, 3, 5 }, size=5
    [OS] S_UP, parent 1(8) is bigger than 4(8), sifting
    [OS] S_UP, parent 0(6) is smaller than 1(8), stopping
Neighbour 1 (-1, 0), blocked
Neighbour 2 (0, 1), blocked
Neighbour 3 (1, 0), pos (4, 6) already exists
    [OS] POP { 6, 2, 4, 6 }, size=4
    [OS] S_DOWN, right 2(8) is smaller than 0(8), sifting
[I7] Current node: { 6, 2, 4, 6 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (4, 5)
    [OS] PUSH { 8, 3, 4, 5 }, size=5
    [OS] S_UP, parent 1(8) is bigger than 4(8), sifting
    [OS] S_UP, parent 0(8) is bigger than 1(8), sifting
    [OS] S_UP, sifted to the root with f_score 8
Neighbour 1 (-1, 0), blocked
Neighbour 2 (0, 1), blocked
Neighbour 3 (1, 0), blocked
    [OS] POP { 8, 3, 4, 5 }, size=4
    [OS] S_DOWN, right 2(8) is smaller than 0(8), sifting
[I8] Current node: { 8, 3, 4, 5 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (4, 4)
    [OS] PUSH { 10, 4, 4, 4 }, size=5
    [OS] S_UP, parent 1(8) is smaller than 4(10), stopping
Neighbour 1 (-1, 0), pos (3, 5) already exists
Neighbour 2 (0, 1), blocked
Neighbour 3 (1, 0), pos (5, 5) already exists
    [OS] POP { 8, 2, 5, 9 }, size=4
    [OS] S_DOWN, right 2(8) is smaller than 0(10), sifting
[I9] Current node: { 8, 2, 5, 9 }
Exploring current neighbours
Neighbour 0 (0, -1), blocked
Adding neighbour 1 (-1, 0), pos (4, 9)
    [OS] PUSH { 8, 3, 4, 9 }, size=5
    [OS] S_UP, parent 1(8) is bigger than 4(8), sifting
    [OS] S_UP, parent 0(8) is bigger than 1(8), sifting
    [OS] S_UP, sifted to the root with f_score 8
Neighbour 2 (0, 1), out of top bounds
Adding neighbour 3 (1, 0), pos (6, 9)
    [OS] PUSH { 10, 3, 6, 9 }, size=6
    [OS] S_UP, parent 2(10) isWARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
 bigger than 5(10), sifting
    [OS] S_UP, parent 0(8) is smaller than 2(10), stopping
    [OS] POP { 8, 3, 4, 9 }, size=5
    [OS] S_DOWN, left 1(8) is smaller than 0(10), sifting
    [OS] S_DOWN, right 4(8) is smaller than 1(10), sifting
[I10] Current node: { 8, 3, 4, 9 }
Exploring current neighbours
Neighbour 0 (0, -1), blocked
Neighbour 1 (-1, 0), pos (3, 9) already exists
Neighbour 2 (0, 1), out of top bounds
Neighbour 3 (1, 0), blocked
    [OS] POP { 8, 4, 3, 5 }, size=4
    [OS] S_DOWN, left 1(8) is smaller than 0(10), sifting
    [OS] S_DOWN, left 3(8) is smaller than 1(10), sifting
[I11] Current node: { 8, 4, 3, 5 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (3, 4)
    [OS] PUSH { 10, 5, 3, 4 }, size=5
    [OS] S_UP, parent 1(8) is smaller than 4(10), stopping
Neighbour 1 (-1, 0), blocked
Neighbour 2 (0, 1), blocked
Neighbour 3 (1, 0), blocked
    [OS] POP { 8, 4, 3, 9 }, size=4
    [OS] S_DOWN, left 1(8) is smaller than 0(10), sifting
    [OS] S_DOWN, left 3(10) is smaller than 1(10), sifting
[I12] Current node: { 8, 4, 3, 9 }
Exploring current neighbours
Neighbour 0 (0, -1), blocked
Adding neighbour 1 (-1, 0), pos (2, 9)
    [OS] PUSH { 8, 5, 2, 9 }, size=5
    [OS] S_UP, parent 1(10) is bigger than 4(8), sifting
    [OS] S_UP, parent 0(8) is bigger than 1(8), sifting
    [OS] S_UP, sifted to the root with f_score 8
Neighbour 2 (0, 1), out of top bounds
Neighbour 3 (1, 0), blocked
    [OS] POP { 8, 5, 2, 9 }, size=4
    [OS] S_DOWN, left 1(8) is smaller than 0(10), sifting
    [OS] S_DOWN, left 3(10) is smaller than 1(10), sifting
[I13] Current node: { 8, 5, 2, 9 }
Exploring current neighbours
Neighbour 0 (0, -1), blocked
Adding neighbour 1 (-1, 0), pos (1, 9)
    [OS] PUSH { 8, 6, 1, 9 }, size=5
    [OS] S_UP, parent 1(10) is bigger than 4(8), sifting
    [OS] S_UP, parent 0(8) is bigger than 1(8), sifting
    [OS] S_UP, sifted to the root with f_score 8
Neighbour 2 (0, 1), out of top bounds
Neighbour 3 (1, 0), blocked
    [OS] POP { 8, 6, 1, 9 }, size=4
    [OS] S_DOWN, left 1(8) is smaller than 0(10), sifting
    [OS] S_DOWN, left 3(10) is smaller than 1(10), sifting
[I14] Current node: { 8, 6, 1, 9 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (1, 8)
    [OS] PUSH { 8, 7, 1, 8 }, size=5
    [OS] S_UP, parent 1(10) is bigger than 4(8), sifting
    [OS] S_UP, parent 0(8) is bigger than 1(8), sifting
    [OS] S_UP, sifted to the root with f_score 8
Adding neighbour 1 (-1, 0), pos (0, 9)
    [OS] PUSH { 10, 7, 0, 9 }, size=6
    [OS] S_UP, parent 2(10) is bigger than 5(10), sifting
    [OS] S_UP, parent 0(8) is smaller than 2(10), stopping
Neighbour 2 (0, 1), out of top bounds
Neighbour 3 (1, 0), blocked
    [OS] POP { 8, 7, 1, 8 }, size=5
    [OS] S_DOWN, left 1(8) is smaller than 0(10), sifting
    [OS] S_DOWN, right 4(10) is smaller than 1(10), sifting
[I15] Current node: { 8, 7, 1, 8 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (1, 7)
    [OS] PUSH { 8, 8, 1, 7 }, size=6
    [OS] S_UP, parent 2(10) is bigger than 5(8), sifting
    [OS] S_UP, parent 0(8) is bigger than 2(8), sifting
    [OS] S_UP, sifted to the root with f_score 8
Adding neighbour 1 (-1, 0), pos (0, 8)
    [OS] PUSH { 10, 8, 0, 8 }, size=7
    [OS] S_UP, parent 2(8) is smaller than 6(10), stopping
Neighbour 2 (0, 1), blocked
Neighbour 3 (1, 0), blocked
    [OS] POP { 8, 8, 1, 7 }, size=6
    [OS] S_DOWN, right 2(8) is smaller than 0(10), sifting
    [OS] S_DOWN, left 5(10) is smaller than 2(10), sifting
[I16] Current node: { 8, 8, 1, 7 }
Setting path position 1, 7 at 0
Setting path position 1, 8 at 1
Setting path position 1, 9 at 2
Setting path position 2, 9 at 3
Setting path position 3, 9 at 4
Setting path position 3, 8 at 5
Setting path position 3, 7 at 6
Setting path position 4, 7 at 7
Setting path position 5, 7 at 8
Pathfinding 4 to 5
    [OS] PUSH { 7, 0, 1, 7 }, size=1
    [OS] POP { 7, 0, 1, 7 }, size=0
[I0] Current node: { 7, 0, 1, 7 }
Exploring current neighbours
Adding neighbour 0 (0WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
, -1), pos (1, 6)
    [OS] PUSH { 7, 1, 1, 6 }, size=1
Adding neighbour 1 (-1, 0), pos (0, 7)
    [OS] PUSH { 9, 1, 0, 7 }, size=2
    [OS] S_UP, parent 0(7) is smaller than 1(9), stopping
Adding neighbour 2 (0, 1), pos (1, 8)
    [OS] PUSH { 9, 1, 1, 8 }, size=3
    [OS] S_UP, parent 0(7) is smaller than 2(9), stopping
Neighbour 3 (1, 0), blocked
    [OS] POP { 7, 1, 1, 6 }, size=2
    [OS] S_DOWN, left 1(9) is smaller than 0(9), sifting
[I1] Current node: { 7, 1, 1, 6 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (1, 5)
    [OS] PUSH { 7, 2, 1, 5 }, size=3
    [OS] S_UP, parent 0(9) is bigger than 2(7), sifting
    [OS] S_UP, sifted to the root with f_score 7
Adding neighbour 1 (-1, 0), pos (0, 6)
    [OS] PUSH { 9, 2, 0, 6 }, size=4
    [OS] S_UP, parent 1(9) is bigger than 3(9), sifting
    [OS] S_UP, parent 0(7) is smaller than 1(9), stopping
Neighbour 2 (0, 1), blocked
Neighbour 3 (1, 0), blocked
    [OS] POP { 7, 2, 1, 5 }, size=3
    [OS] S_DOWN, right 2(9) is smaller than 0(9), sifting
[I2] Current node: { 7, 2, 1, 5 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (1, 4)
    [OS] PUSH { 7, 3, 1, 4 }, size=4
    [OS] S_UP, parent 1(9) is bigger than 3(7), sifting
    [OS] S_UP, parent 0(9) is bigger than 1(7), sifting
    [OS] S_UP, sifted to the root with f_score 7
Adding neighbour 1 (-1, 0), pos (0, 5)
    [OS] PUSH { 9, 3, 0, 5 }, size=5
    [OS] S_UP, parent 1(9) is bigger than 4(9), sifting
    [OS] S_UP, parent 0(7) is smaller than 1(9), stopping
Neighbour 2 (0, 1), blocked
Neighbour 3 (1, 0), blocked
    [OS] POP { 7, 3, 1, 4 }, size=4
    [OS] S_DOWN, right 2(9) is smaller than 0(9), sifting
[I3] Current node: { 7, 3, 1, 4 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (1, 3)
    [OS] PUSH { 7, 4, 1, 3 }, size=5
    [OS] S_UP, parent 1(9) is bigger than 4(7), sifting
    [OS] S_UP, parent 0(9) is bigger than 1(7), sifting
    [OS] S_UP, sifted to the root with f_score 7
Adding neighbour 1 (-1, 0), pos (0, 4)
    [OS] PUSH { 9, 4, 0, 4 }, size=6
    [OS] S_UP, parent 2(9) is bigger than 5(9), sifting
    [OS] S_UP, parent 0(7) is smaller than 2(9), stopping
Neighbour 2 (0, 1), blocked
Neighbour 3 (1, 0), blocked
    [OS] POP { 7, 4, 1, 3 }, size=5
    [OS] S_DOWN, right 2(9) is smaller than 0(9), sifting
[I4] Current node: { 7, 4, 1, 3 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (1, 2)
    [OS] PUSH { 7, 5, 1, 2 }, size=6
    [OS] S_UP, parent 2(9) is bigger than 5(7), sifting
    [OS] S_UP, parent 0(9) is bigger than 2(7), sifting
    [OS] S_UP, sifted to the root with f_score 7
Adding neighbour 1 (-1, 0), pos (0, 3)
    [OS] PUSH { 9, 5, 0, 3 }, size=7
    [OS] S_UP, parent 2(9) is bigger than 6(9), sifting
    [OS] S_UP, parent 0(7) is smaller than 2(9), stopping
Neighbour 2 (0, 1), blocked
Neighbour 3 (1, 0), blocked
    [OS] POP { 7, 5, 1, 2 }, size=6
    [OS] S_DOWN, right 2(9) is smaller than 0(9), sifting
    [OS] S_DOWN, left 5(9) is smaller than 2(9), sifting
[I5] Current node: { 7, 5, 1, 2 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (1, 1)
    [OS] PUSH { 7, 6, 1, 1 }, size=7
    [OS] S_UP, parent 2(9) is bigger than 6(7), sifting
    [OS] S_UP, parent 0(9) is bigger than 2(7), sifting
    [OS] S_UP, sifted to the root with f_score 7
Adding neighbour 1 (-1, 0), pos (0, 2)
    [OS] PUSH { 9, 6, 0, 2 }, size=8
    [OS] S_UP, parent 3(9) is bigger than 7(9), sifting
    [OS] S_UP, parent 1(9) is bigger than 3(9), sifting
    [OS] S_UP, parent 0(7) is smaller than 1(9), stopping
Neighbour 2 (0, 1), blocked
Neighbour 3 (1, 0), blocked
    [OS] POP { 7, 6, 1, 1 }, size=7
    [OS] S_DOWN, right 2(9) is smaller than 0(9), sifting
    [OS] S_DOWN, right 6(9) is smaller than 2(9), sifting
[I6] Current node: { 7, 6, 1, 1 }
Exploring current neighbours
Adding neighbour 0 (0, -1), pos (1, 0)
    [OS] PUSH { 7, 7, 1, 0 }, size=8
    [OS] S_UP, parent 3(9) is bigger than 7(7), sifting
    [OS] S_UP, parent 1(9) is bigger than 3(7), siWARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
WARNING: Bitsize mismatch for ap_[u]int|=ap_[u]int.
fting
    [OS] S_UP, parent 0(9) is bigger than 1(7), sifting
    [OS] S_UP, sifted to the root with f_score 7
Adding neighbour 1 (-1, 0), pos (0, 1)
    [OS] PUSH { 9, 7, 0, 1 }, size=9
    [OS] S_UP, parent 3(9) is bigger than 8(9), sifting
    [OS] S_UP, parent 1(9) is bigger than 3(9), sifting
    [OS] S_UP, parent 0(7) is smaller than 1(9), stopping
Neighbour 2 (0, 1), blocked
Neighbour 3 (1, 0), blocked
    [OS] POP { 7, 7, 1, 0 }, size=8
    [OS] S_DOWN, right 2(9) is smaller than 0(9), sifting
    [OS] S_DOWN, right 6(9) is smaller than 2(9), sifting
[I7] Current node: { 7, 7, 1, 0 }
Setting path position 1, 0 at 0
Setting path position 1, 1 at 1
Setting path position 1, 2 at 2
Setting path position 1, 3 at 3
Setting path position 1, 4 at 4
Setting path position 1, 5 at 5
Setting path position 1, 6 at 6
Setting path position 1, 7 at 7
Pathfinding 5 to 6
    [OS] PUSH { 1, 0, 1, 0 }, size=1
    [OS] POP { 1, 0, 1, 0 }, size=0
[I0] Current node: { 1, 0, 1, 0 }
Exploring current neighbours
Adding neighbour 1 (-1, 0), pos (0, 0)
    [OS] PUSH { 1, 1, 0, 0 }, size=1
Adding neighbour 2 (0, 1), pos (1, 1)
    [OS] PUSH { 3, 1, 1, 1 }, size=2
    [OS] S_UP, parent 0(1) is smaller than 1(3), stopping
Adding neighbour 3 (1, 0), pos (2, 0)
    [OS] PUSH { 3, 1, 2, 0 }, size=3
    [OS] S_UP, parent 0(1) is smaller than 2(3), stopping
    [OS] POP { 1, 1, 0, 0 }, size=2
    [OS] S_DOWN, left 1(3) is smaller than 0(3), sifting
[I1] Current node: { 1, 1, 0, 0 }
Setting path position 0, 0 at 0
Setting path position 1, 0 at 1
Pathfinding 6 to 7
    [OS] PUSH { 0, 0, 0, 0 }, size=1
    [OS] POP { 0, 0, 0, 0 }, size=0
[I0] Current node: { 0, 0, 0, 0 }
Setting path position 0, 0 at 0
World Bitmap (10 x 10), waypoints=8, length=36
Waypoint 0 at 3, 3
Waypoint 1 at 7, 1
Waypoint 2 at 7, 5
Waypoint 3 at 5, 7
Waypoint 4 at 1, 7
Waypoint 5 at 1, 0
Waypoint 6 at 0, 0
Waypoint 7 at 0, 0
.         
. O   O   
. O   O O 
. O   O   
. O   O   
. O   O   
. O   O O 
. O   O O 
. O O O O 
.         
Total Path Length: 36, code: 0
Test Passed.
INFO: [SIM 1] CSim done with 0 errors.
INFO: [SIM 3] *************** CSIM finish ***************
