-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity toplevel is
generic (
    C_M_AXI_MAXI_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_MAXI_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MAXI_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MAXI_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MAXI_USER_VALUE : INTEGER := 0;
    C_M_AXI_MAXI_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MAXI_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_MAXI_AWVALID : OUT STD_LOGIC;
    m_axi_MAXI_AWREADY : IN STD_LOGIC;
    m_axi_MAXI_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ADDR_WIDTH-1 downto 0);
    m_axi_MAXI_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_MAXI_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_AWUSER_WIDTH-1 downto 0);
    m_axi_MAXI_WVALID : OUT STD_LOGIC;
    m_axi_MAXI_WREADY : IN STD_LOGIC;
    m_axi_MAXI_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_DATA_WIDTH-1 downto 0);
    m_axi_MAXI_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_DATA_WIDTH/8-1 downto 0);
    m_axi_MAXI_WLAST : OUT STD_LOGIC;
    m_axi_MAXI_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_WUSER_WIDTH-1 downto 0);
    m_axi_MAXI_ARVALID : OUT STD_LOGIC;
    m_axi_MAXI_ARREADY : IN STD_LOGIC;
    m_axi_MAXI_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ADDR_WIDTH-1 downto 0);
    m_axi_MAXI_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_MAXI_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MAXI_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MAXI_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MAXI_ARUSER_WIDTH-1 downto 0);
    m_axi_MAXI_RVALID : IN STD_LOGIC;
    m_axi_MAXI_RREADY : OUT STD_LOGIC;
    m_axi_MAXI_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_DATA_WIDTH-1 downto 0);
    m_axi_MAXI_RLAST : IN STD_LOGIC;
    m_axi_MAXI_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_RUSER_WIDTH-1 downto 0);
    m_axi_MAXI_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_BVALID : IN STD_LOGIC;
    m_axi_MAXI_BREADY : OUT STD_LOGIC;
    m_axi_MAXI_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MAXI_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_ID_WIDTH-1 downto 0);
    m_axi_MAXI_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MAXI_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of toplevel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "toplevel_toplevel,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.213000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=290,HLS_SYN_DSP=0,HLS_SYN_FF=4765,HLS_SYN_LUT=7727,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv24_FFFF : STD_LOGIC_VECTOR (23 downto 0) := "000000001111111111111111";
    constant ap_const_lv32_2710 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010011100010000";
    constant ap_const_lv32_1E97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001111010010111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv13_1E97 : STD_LOGIC_VECTOR (12 downto 0) := "1111010010111";
    constant ap_const_lv16_1F4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000111110100";
    constant ap_const_lv17_1FFFE : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111110";
    constant ap_const_lv17_E : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv18_3E8 : STD_LOGIC_VECTOR (17 downto 0) := "000000001111101000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal ram : STD_LOGIC_VECTOR (63 downto 0);
    signal code_ap_vld : STD_LOGIC;
    signal error_flag : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal local_ram_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal local_ram_ce0 : STD_LOGIC;
    signal local_ram_we0 : STD_LOGIC;
    signal local_ram_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_ram_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal local_ram_ce1 : STD_LOGIC;
    signal local_ram_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal world_size : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal MAXI_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal MAXI_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln401_reg_640 : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal MAXI_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal MAXI_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal MAXI_AWVALID : STD_LOGIC;
    signal MAXI_AWREADY : STD_LOGIC;
    signal MAXI_WVALID : STD_LOGIC;
    signal MAXI_WREADY : STD_LOGIC;
    signal MAXI_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal MAXI_ARVALID : STD_LOGIC;
    signal MAXI_ARREADY : STD_LOGIC;
    signal MAXI_RVALID : STD_LOGIC;
    signal MAXI_RREADY : STD_LOGIC;
    signal MAXI_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal MAXI_RLAST : STD_LOGIC;
    signal MAXI_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal MAXI_BVALID : STD_LOGIC;
    signal MAXI_BREADY : STD_LOGIC;
    signal MAXI_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal MAXI_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_287 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_reg_287_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_2_reg_299 : STD_LOGIC_VECTOR (7 downto 0);
    signal MAXI_addr_reg_628 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_fu_426_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_635 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln401_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln401_reg_640_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal MAXI_addr_read_reg_644 : STD_LOGIC_VECTOR (31 downto 0);
    signal waypoint_count_fu_453_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal waypoint_count_reg_649 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal trunc_ln405_1_fu_457_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln405_1_reg_655 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln406_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln406_reg_660 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln406_1_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln406_1_reg_665 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln406_1_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln406_1_reg_670 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_3_fu_498_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_3_reg_674 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state15_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln412_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln412_reg_679 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln427_fu_550_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln427_reg_688 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln427_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln427_reg_693 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln427_1_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln427_1_reg_697 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_5_fu_570_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_5_reg_701 : STD_LOGIC_VECTOR (7 downto 0);
    signal waypoints_x_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal waypoints_x_load_reg_727 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal waypoints_y_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal waypoints_y_load_reg_732 : STD_LOGIC_VECTOR (15 downto 0);
    signal waypoints_x_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal waypoints_x_load_1_reg_737 : STD_LOGIC_VECTOR (15 downto 0);
    signal waypoints_y_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal waypoints_y_load_1_reg_742 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_a_star_len_fu_372_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_reg_747 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal total_len_1_fu_601_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln431_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_620_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state15 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal waypoints_x_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal waypoints_x_ce0 : STD_LOGIC;
    signal waypoints_x_we0 : STD_LOGIC;
    signal waypoints_x_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal waypoints_x_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal waypoints_x_ce1 : STD_LOGIC;
    signal waypoints_y_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal waypoints_y_ce0 : STD_LOGIC;
    signal waypoints_y_we0 : STD_LOGIC;
    signal waypoints_y_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal waypoints_y_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal waypoints_y_ce1 : STD_LOGIC;
    signal grp_a_star_len_fu_372_ap_start : STD_LOGIC;
    signal grp_a_star_len_fu_372_ap_done : STD_LOGIC;
    signal grp_a_star_len_fu_372_ap_idle : STD_LOGIC;
    signal grp_a_star_len_fu_372_ap_ready : STD_LOGIC;
    signal grp_a_star_len_fu_372_error_flag_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_a_star_len_fu_372_error_flag_o_ap_vld : STD_LOGIC;
    signal grp_a_star_len_fu_372_local_ram_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_a_star_len_fu_372_local_ram_ce0 : STD_LOGIC;
    signal ap_phi_mux_i_phi_fu_291_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_phi_mux_i_2_phi_fu_303_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal i_4_reg_311 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_total_len_phi_fu_326_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal total_len_reg_322 : STD_LOGIC_VECTOR (23 downto 0);
    signal storemerge3_reg_334 : STD_LOGIC_VECTOR (23 downto 0);
    signal storemerge_reg_353 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_a_star_len_fu_372_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln402_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln413_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln414_fu_539_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln430_fu_576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln430_1_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln401_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln404_fu_443_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal trunc_ln_fu_406_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln406_fu_473_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln406_fu_476_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln406_2_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln406_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln412_1_fu_504_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln412_fu_513_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln413_fu_517_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln427_fu_561_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln430_3_fu_588_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_620_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_620_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_620_ce : STD_LOGIC;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal grp_fu_620_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component toplevel_a_star_len IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_x : IN STD_LOGIC_VECTOR (15 downto 0);
        start_y : IN STD_LOGIC_VECTOR (15 downto 0);
        goal_x : IN STD_LOGIC_VECTOR (15 downto 0);
        goal_y : IN STD_LOGIC_VECTOR (15 downto 0);
        error_flag_i : IN STD_LOGIC_VECTOR (31 downto 0);
        error_flag_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        error_flag_o_ap_vld : OUT STD_LOGIC;
        world_size : IN STD_LOGIC_VECTOR (15 downto 0);
        local_ram_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        local_ram_ce0 : OUT STD_LOGIC;
        local_ram_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component toplevel_mac_muladd_8ns_11ns_32ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component toplevel_local_ram IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component toplevel_waypoints_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component toplevel_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        code : IN STD_LOGIC_VECTOR (31 downto 0);
        code_ap_vld : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component toplevel_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ram : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component toplevel_MAXI_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    local_ram_U : component toplevel_local_ram
    generic map (
        DataWidth => 32,
        AddressRange => 7831,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => local_ram_address0,
        ce0 => local_ram_ce0,
        we0 => local_ram_we0,
        d0 => MAXI_addr_read_reg_644,
        q0 => local_ram_q0,
        address1 => local_ram_address1,
        ce1 => local_ram_ce1,
        q1 => local_ram_q1);

    AXILiteS_s_axi_U : component toplevel_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        code => storemerge_reg_353,
        code_ap_vld => code_ap_vld,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    control_s_axi_U : component toplevel_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ram => ram);

    MAXI_m_axi_U : component toplevel_MAXI_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MAXI_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MAXI_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MAXI_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MAXI_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MAXI_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MAXI_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MAXI_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MAXI_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_MAXI_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MAXI_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MAXI_CACHE_VALUE)
    port map (
        AWVALID => m_axi_MAXI_AWVALID,
        AWREADY => m_axi_MAXI_AWREADY,
        AWADDR => m_axi_MAXI_AWADDR,
        AWID => m_axi_MAXI_AWID,
        AWLEN => m_axi_MAXI_AWLEN,
        AWSIZE => m_axi_MAXI_AWSIZE,
        AWBURST => m_axi_MAXI_AWBURST,
        AWLOCK => m_axi_MAXI_AWLOCK,
        AWCACHE => m_axi_MAXI_AWCACHE,
        AWPROT => m_axi_MAXI_AWPROT,
        AWQOS => m_axi_MAXI_AWQOS,
        AWREGION => m_axi_MAXI_AWREGION,
        AWUSER => m_axi_MAXI_AWUSER,
        WVALID => m_axi_MAXI_WVALID,
        WREADY => m_axi_MAXI_WREADY,
        WDATA => m_axi_MAXI_WDATA,
        WSTRB => m_axi_MAXI_WSTRB,
        WLAST => m_axi_MAXI_WLAST,
        WID => m_axi_MAXI_WID,
        WUSER => m_axi_MAXI_WUSER,
        ARVALID => m_axi_MAXI_ARVALID,
        ARREADY => m_axi_MAXI_ARREADY,
        ARADDR => m_axi_MAXI_ARADDR,
        ARID => m_axi_MAXI_ARID,
        ARLEN => m_axi_MAXI_ARLEN,
        ARSIZE => m_axi_MAXI_ARSIZE,
        ARBURST => m_axi_MAXI_ARBURST,
        ARLOCK => m_axi_MAXI_ARLOCK,
        ARCACHE => m_axi_MAXI_ARCACHE,
        ARPROT => m_axi_MAXI_ARPROT,
        ARQOS => m_axi_MAXI_ARQOS,
        ARREGION => m_axi_MAXI_ARREGION,
        ARUSER => m_axi_MAXI_ARUSER,
        RVALID => m_axi_MAXI_RVALID,
        RREADY => m_axi_MAXI_RREADY,
        RDATA => m_axi_MAXI_RDATA,
        RLAST => m_axi_MAXI_RLAST,
        RID => m_axi_MAXI_RID,
        RUSER => m_axi_MAXI_RUSER,
        RRESP => m_axi_MAXI_RRESP,
        BVALID => m_axi_MAXI_BVALID,
        BREADY => m_axi_MAXI_BREADY,
        BRESP => m_axi_MAXI_BRESP,
        BID => m_axi_MAXI_BID,
        BUSER => m_axi_MAXI_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => MAXI_ARVALID,
        I_ARREADY => MAXI_ARREADY,
        I_ARADDR => MAXI_addr_reg_628,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1E97,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => MAXI_RVALID,
        I_RREADY => MAXI_RREADY,
        I_RDATA => MAXI_RDATA,
        I_RID => MAXI_RID,
        I_RUSER => MAXI_RUSER,
        I_RRESP => MAXI_RRESP,
        I_RLAST => MAXI_RLAST,
        I_AWVALID => MAXI_AWVALID,
        I_AWREADY => MAXI_AWREADY,
        I_AWADDR => MAXI_addr_reg_628,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => MAXI_WVALID,
        I_WREADY => MAXI_WREADY,
        I_WDATA => MAXI_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => MAXI_BVALID,
        I_BREADY => MAXI_BREADY,
        I_BRESP => MAXI_BRESP,
        I_BID => MAXI_BID,
        I_BUSER => MAXI_BUSER);

    waypoints_x_U : component toplevel_waypoints_x
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => waypoints_x_address0,
        ce0 => waypoints_x_ce0,
        we0 => waypoints_x_we0,
        d0 => waypoints_x_d0,
        q0 => waypoints_x_q0,
        address1 => waypoints_x_address1,
        ce1 => waypoints_x_ce1,
        q1 => waypoints_x_q1);

    waypoints_y_U : component toplevel_waypoints_x
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => waypoints_y_address0,
        ce0 => waypoints_y_ce0,
        we0 => waypoints_y_we0,
        d0 => waypoints_y_d0,
        q0 => waypoints_y_q0,
        address1 => waypoints_y_address1,
        ce1 => waypoints_y_ce1,
        q1 => waypoints_y_q1);

    grp_a_star_len_fu_372 : component toplevel_a_star_len
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_a_star_len_fu_372_ap_start,
        ap_done => grp_a_star_len_fu_372_ap_done,
        ap_idle => grp_a_star_len_fu_372_ap_idle,
        ap_ready => grp_a_star_len_fu_372_ap_ready,
        start_x => waypoints_x_load_reg_727,
        start_y => waypoints_y_load_reg_732,
        goal_x => waypoints_x_load_1_reg_737,
        goal_y => waypoints_y_load_1_reg_742,
        error_flag_i => error_flag,
        error_flag_o => grp_a_star_len_fu_372_error_flag_o,
        error_flag_o_ap_vld => grp_a_star_len_fu_372_error_flag_o_ap_vld,
        world_size => world_size,
        local_ram_address0 => grp_a_star_len_fu_372_local_ram_address0,
        local_ram_ce0 => grp_a_star_len_fu_372_local_ram_ce0,
        local_ram_q0 => local_ram_q0,
        ap_return => grp_a_star_len_fu_372_ap_return);

    mac_muladd_8ns_11ns_32ns_32_4_1_U19 : component toplevel_mac_muladd_8ns_11ns_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_620_p0,
        din1 => grp_fu_620_p1,
        din2 => error_flag,
        ce => grp_fu_620_ce,
        dout => grp_fu_620_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state15) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((or_ln406_1_fu_493_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state15) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state15);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((or_ln406_1_fu_493_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_a_star_len_fu_372_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_a_star_len_fu_372_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    grp_a_star_len_fu_372_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_a_star_len_fu_372_ap_ready = ap_const_logic_1)) then 
                    grp_a_star_len_fu_372_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    error_flag_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                error_flag <= ap_const_lv32_0;
            elsif (((icmp_ln427_1_reg_697 = ap_const_lv1_1) and (icmp_ln427_reg_693 = ap_const_lv1_1) and (or_ln406_1_reg_670 = ap_const_lv1_0) and (ap_const_logic_1 = MAXI_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                error_flag <= grp_fu_620_p3;
            elsif (((grp_a_star_len_fu_372_error_flag_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                error_flag <= grp_a_star_len_fu_372_error_flag_o;
            end if; 
        end if;
    end process;

    i_2_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln406_1_fu_493_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i_2_reg_299 <= ap_const_lv8_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln412_reg_679 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_2_reg_299 <= i_3_reg_674;
            end if; 
        end if;
    end process;

    i_4_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln427_fu_555_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                i_4_reg_311 <= ap_const_lv8_0;
            elsif (((icmp_ln431_fu_595_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                i_4_reg_311 <= i_5_reg_701;
            end if; 
        end if;
    end process;

    i_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln401_reg_640 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_287 <= i_1_reg_635;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_287 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    storemerge3_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln427_1_fu_565_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                storemerge3_reg_334 <= ap_phi_mux_total_len_phi_fu_326_p4;
            elsif (((icmp_ln427_fu_555_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                storemerge3_reg_334 <= ap_const_lv24_0;
            elsif (((or_ln406_1_fu_493_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                storemerge3_reg_334 <= ap_const_lv24_FFFF;
            elsif (((icmp_ln427_1_reg_697 = ap_const_lv1_1) and (icmp_ln427_reg_693 = ap_const_lv1_1) and (or_ln406_1_reg_670 = ap_const_lv1_0) and (ap_const_logic_1 = MAXI_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                storemerge3_reg_334 <= total_len_reg_322;
            end if; 
        end if;
    end process;

    storemerge_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln427_1_fu_565_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((icmp_ln427_fu_555_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
                storemerge_reg_353 <= ap_const_lv32_0;
            elsif (((or_ln406_1_fu_493_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                storemerge_reg_353 <= ap_const_lv32_2710;
            elsif (((icmp_ln427_1_reg_697 = ap_const_lv1_1) and (icmp_ln427_reg_693 = ap_const_lv1_1) and (or_ln406_1_reg_670 = ap_const_lv1_0) and (ap_const_logic_1 = MAXI_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                storemerge_reg_353 <= grp_fu_620_p3;
            end if; 
        end if;
    end process;

    total_len_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln427_fu_555_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                total_len_reg_322 <= ap_const_lv24_0;
            elsif (((icmp_ln431_fu_595_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                total_len_reg_322 <= total_len_1_fu_601_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln401_reg_640 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                MAXI_addr_read_reg_644 <= MAXI_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                MAXI_addr_reg_628 <= sext_ln401_fu_416_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln427_reg_688 <= add_ln427_fu_550_p2;
                icmp_ln427_reg_693 <= icmp_ln427_fu_555_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_1_reg_635 <= i_1_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                i_3_reg_674 <= i_3_fu_498_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                i_5_reg_701 <= i_5_fu_570_p2;
                icmp_ln427_1_reg_697 <= icmp_ln427_1_fu_565_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_287_pp0_iter1_reg <= i_reg_287;
                icmp_ln401_reg_640 <= icmp_ln401_fu_432_p2;
                icmp_ln401_reg_640_pp0_iter1_reg <= icmp_ln401_reg_640;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                icmp_ln406_1_reg_665 <= icmp_ln406_1_fu_467_p2;
                icmp_ln406_reg_660 <= icmp_ln406_fu_461_p2;
                trunc_ln405_1_reg_655 <= trunc_ln405_1_fu_457_p1;
                waypoint_count_reg_649 <= waypoint_count_fu_453_p1;
                world_size <= trunc_ln404_fu_443_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln412_reg_679 <= icmp_ln412_fu_508_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                or_ln406_1_reg_670 <= or_ln406_1_fu_493_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                ret_reg_747 <= grp_a_star_len_fu_372_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                waypoints_x_load_1_reg_737 <= waypoints_x_q0;
                waypoints_x_load_reg_727 <= waypoints_x_q1;
                waypoints_y_load_1_reg_742 <= waypoints_y_q0;
                waypoints_y_load_reg_732 <= waypoints_y_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state30, MAXI_AWREADY, MAXI_WREADY, MAXI_ARREADY, MAXI_BVALID, ap_enable_reg_pp0_iter0, icmp_ln401_fu_432_p2, or_ln406_1_fu_493_p2, ap_CS_fsm_state14, ap_enable_reg_pp1_iter0, icmp_ln412_fu_508_p2, ap_CS_fsm_state17, icmp_ln427_fu_555_p2, icmp_ln427_1_fu_565_p2, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state21, icmp_ln431_fu_595_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, grp_a_star_len_fu_372_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = MAXI_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln401_fu_432_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((icmp_ln401_fu_432_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((or_ln406_1_fu_493_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln412_fu_508_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln412_fu_508_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln427_fu_555_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln427_1_fu_565_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((grp_a_star_len_fu_372_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln431_fu_595_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = MAXI_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = MAXI_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = MAXI_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    MAXI_ARVALID_assign_proc : process(ap_CS_fsm_state2, MAXI_ARREADY)
    begin
        if (((ap_const_logic_1 = MAXI_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            MAXI_ARVALID <= ap_const_logic_1;
        else 
            MAXI_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    MAXI_AWVALID_assign_proc : process(ap_CS_fsm_state24, MAXI_AWREADY)
    begin
        if (((ap_const_logic_1 = MAXI_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            MAXI_AWVALID <= ap_const_logic_1;
        else 
            MAXI_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    MAXI_BREADY_assign_proc : process(ap_CS_fsm_state30, MAXI_BVALID)
    begin
        if (((ap_const_logic_1 = MAXI_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            MAXI_BREADY <= ap_const_logic_1;
        else 
            MAXI_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    MAXI_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln401_reg_640, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln401_reg_640 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            MAXI_RREADY <= ap_const_logic_1;
        else 
            MAXI_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    MAXI_WDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(storemerge3_reg_334),32));

    MAXI_WVALID_assign_proc : process(ap_CS_fsm_state25, MAXI_WREADY)
    begin
        if (((ap_const_logic_1 = MAXI_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            MAXI_WVALID <= ap_const_logic_1;
        else 
            MAXI_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    MAXI_blk_n_AR_assign_proc : process(m_axi_MAXI_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            MAXI_blk_n_AR <= m_axi_MAXI_ARREADY;
        else 
            MAXI_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    MAXI_blk_n_AW_assign_proc : process(m_axi_MAXI_AWREADY, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            MAXI_blk_n_AW <= m_axi_MAXI_AWREADY;
        else 
            MAXI_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    MAXI_blk_n_B_assign_proc : process(m_axi_MAXI_BVALID, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            MAXI_blk_n_B <= m_axi_MAXI_BVALID;
        else 
            MAXI_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    MAXI_blk_n_R_assign_proc : process(m_axi_MAXI_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln401_reg_640)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln401_reg_640 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            MAXI_blk_n_R <= m_axi_MAXI_RVALID;
        else 
            MAXI_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    MAXI_blk_n_W_assign_proc : process(m_axi_MAXI_WREADY, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            MAXI_blk_n_W <= m_axi_MAXI_WREADY;
        else 
            MAXI_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    add_ln406_fu_476_p2 <= std_logic_vector(unsigned(zext_ln406_fu_473_p1) + unsigned(ap_const_lv17_1FFFE));
    add_ln413_fu_517_p2 <= std_logic_vector(unsigned(zext_ln412_fu_513_p1) + unsigned(ap_const_lv9_2));
    add_ln427_fu_550_p2 <= std_logic_vector(unsigned(trunc_ln405_1_reg_655) + unsigned(ap_const_lv9_1FF));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state17 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(16);
    ap_CS_fsm_state21 <= ap_CS_fsm(17);
    ap_CS_fsm_state22 <= ap_CS_fsm(18);
    ap_CS_fsm_state23 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(20);
    ap_CS_fsm_state25 <= ap_CS_fsm(21);
    ap_CS_fsm_state30 <= ap_CS_fsm(26);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln401_reg_640, MAXI_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_logic_0 = MAXI_RVALID) and (icmp_ln401_reg_640 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln401_reg_640, MAXI_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = MAXI_RVALID) and (icmp_ln401_reg_640 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state10_pp0_stage0_iter1_assign_proc : process(icmp_ln401_reg_640, MAXI_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((ap_const_logic_0 = MAXI_RVALID) and (icmp_ln401_reg_640 = ap_const_lv1_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln401_fu_432_p2)
    begin
        if ((icmp_ln401_fu_432_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state15_assign_proc : process(icmp_ln412_fu_508_p2)
    begin
        if ((icmp_ln412_fu_508_p2 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state15 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state30, MAXI_BVALID)
    begin
        if (((ap_const_logic_1 = MAXI_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_2_phi_fu_303_p4_assign_proc : process(i_2_reg_299, i_3_reg_674, ap_CS_fsm_pp1_stage0, icmp_ln412_reg_679, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln412_reg_679 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_i_2_phi_fu_303_p4 <= i_3_reg_674;
        else 
            ap_phi_mux_i_2_phi_fu_303_p4 <= i_2_reg_299;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_291_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln401_reg_640, i_reg_287, i_1_reg_635)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln401_reg_640 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_291_p4 <= i_1_reg_635;
        else 
            ap_phi_mux_i_phi_fu_291_p4 <= i_reg_287;
        end if; 
    end process;

    ap_phi_mux_total_len_phi_fu_326_p4 <= total_len_reg_322;

    ap_ready_assign_proc : process(ap_CS_fsm_state30, MAXI_BVALID)
    begin
        if (((ap_const_logic_1 = MAXI_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    code_ap_vld_assign_proc : process(ap_CS_fsm_state25, MAXI_WREADY)
    begin
        if (((ap_const_logic_1 = MAXI_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            code_ap_vld <= ap_const_logic_1;
        else 
            code_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_a_star_len_fu_372_ap_start <= grp_a_star_len_fu_372_ap_start_reg;

    grp_fu_620_ce_assign_proc : process(ap_CS_fsm_state24, MAXI_AWREADY, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = MAXI_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state24)))) then 
            grp_fu_620_ce <= ap_const_logic_1;
        else 
            grp_fu_620_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_620_p0 <= grp_fu_620_p00(8 - 1 downto 0);
    grp_fu_620_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_701),18));
    grp_fu_620_p1 <= ap_const_lv18_3E8(11 - 1 downto 0);
    i_1_fu_426_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_291_p4) + unsigned(ap_const_lv13_1));
    i_3_fu_498_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_2_phi_fu_303_p4) + unsigned(ap_const_lv8_1));
    i_5_fu_570_p2 <= std_logic_vector(unsigned(i_4_reg_311) + unsigned(ap_const_lv8_1));
    icmp_ln401_fu_432_p2 <= "1" when (ap_phi_mux_i_phi_fu_291_p4 = ap_const_lv13_1E97) else "0";
    icmp_ln406_1_fu_467_p2 <= "1" when (unsigned(trunc_ln404_fu_443_p1) > unsigned(ap_const_lv16_1F4)) else "0";
    icmp_ln406_2_fu_482_p2 <= "1" when (unsigned(add_ln406_fu_476_p2) > unsigned(ap_const_lv17_E)) else "0";
    icmp_ln406_fu_461_p2 <= "1" when (trunc_ln404_fu_443_p1 = ap_const_lv16_0) else "0";
    icmp_ln412_fu_508_p2 <= "1" when (unsigned(zext_ln412_1_fu_504_p1) < unsigned(waypoint_count_reg_649)) else "0";
    icmp_ln427_1_fu_565_p2 <= "1" when (signed(zext_ln427_fu_561_p1) < signed(add_ln427_reg_688)) else "0";
    icmp_ln427_fu_555_p2 <= "1" when (signed(add_ln427_fu_550_p2) > signed(ap_const_lv9_0)) else "0";
    icmp_ln431_fu_595_p2 <= "1" when (error_flag = ap_const_lv32_0) else "0";

    local_ram_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state20, ap_enable_reg_pp0_iter2, grp_a_star_len_fu_372_local_ram_address0, zext_ln402_fu_438_p1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            local_ram_address0 <= ap_const_lv13_1;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            local_ram_address0 <= zext_ln402_fu_438_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            local_ram_address0 <= grp_a_star_len_fu_372_local_ram_address0;
        else 
            local_ram_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    local_ram_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, zext_ln413_fu_523_p1, ap_CS_fsm_state12)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            local_ram_address1 <= zext_ln413_fu_523_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            local_ram_address1 <= ap_const_lv13_0;
        else 
            local_ram_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    local_ram_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state20, ap_enable_reg_pp0_iter2, grp_a_star_len_fu_372_local_ram_ce0, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            local_ram_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            local_ram_ce0 <= grp_a_star_len_fu_372_local_ram_ce0;
        else 
            local_ram_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_ram_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            local_ram_ce1 <= ap_const_logic_1;
        else 
            local_ram_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    local_ram_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln401_reg_640_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln401_reg_640_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            local_ram_we0 <= ap_const_logic_1;
        else 
            local_ram_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln406_1_fu_493_p2 <= (or_ln406_fu_488_p2 or icmp_ln406_reg_660);
    or_ln406_fu_488_p2 <= (icmp_ln406_2_fu_482_p2 or icmp_ln406_1_reg_665);
        sext_ln401_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_406_p4),64));

    total_len_1_fu_601_p2 <= std_logic_vector(unsigned(zext_ln430_3_fu_588_p1) + unsigned(total_len_reg_322));
    trunc_ln404_fu_443_p1 <= local_ram_q1(16 - 1 downto 0);
    trunc_ln405_1_fu_457_p1 <= local_ram_q0(9 - 1 downto 0);
    trunc_ln_fu_406_p4 <= ram(63 downto 2);
    waypoint_count_fu_453_p1 <= local_ram_q0(16 - 1 downto 0);

    waypoints_x_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_state18, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, zext_ln414_fu_539_p1, zext_ln430_1_fu_582_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            waypoints_x_address0 <= zext_ln430_1_fu_582_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            waypoints_x_address0 <= zext_ln414_fu_539_p1(4 - 1 downto 0);
        else 
            waypoints_x_address0 <= "XXXX";
        end if; 
    end process;

    waypoints_x_address1 <= zext_ln430_fu_576_p1(4 - 1 downto 0);

    waypoints_x_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state18, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            waypoints_x_ce0 <= ap_const_logic_1;
        else 
            waypoints_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    waypoints_x_ce1_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            waypoints_x_ce1 <= ap_const_logic_1;
        else 
            waypoints_x_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    waypoints_x_d0 <= local_ram_q1(31 downto 16);

    waypoints_x_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln412_reg_679, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln412_reg_679 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            waypoints_x_we0 <= ap_const_logic_1;
        else 
            waypoints_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    waypoints_y_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_state18, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, zext_ln414_fu_539_p1, zext_ln430_1_fu_582_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            waypoints_y_address0 <= zext_ln430_1_fu_582_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            waypoints_y_address0 <= zext_ln414_fu_539_p1(4 - 1 downto 0);
        else 
            waypoints_y_address0 <= "XXXX";
        end if; 
    end process;

    waypoints_y_address1 <= zext_ln430_fu_576_p1(4 - 1 downto 0);

    waypoints_y_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state18, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            waypoints_y_ce0 <= ap_const_logic_1;
        else 
            waypoints_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    waypoints_y_ce1_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            waypoints_y_ce1 <= ap_const_logic_1;
        else 
            waypoints_y_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    waypoints_y_d0 <= local_ram_q1(16 - 1 downto 0);

    waypoints_y_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln412_reg_679, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln412_reg_679 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            waypoints_y_we0 <= ap_const_logic_1;
        else 
            waypoints_y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln402_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_287_pp0_iter1_reg),64));
    zext_ln406_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(waypoint_count_reg_649),17));
    zext_ln412_1_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_2_phi_fu_303_p4),16));
    zext_ln412_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_2_phi_fu_303_p4),9));
    zext_ln413_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln413_fu_517_p2),64));
    zext_ln414_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_299),64));
    zext_ln427_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_311),9));
    zext_ln430_1_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_fu_570_p2),64));
    zext_ln430_3_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_reg_747),24));
    zext_ln430_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_311),64));
end behav;
