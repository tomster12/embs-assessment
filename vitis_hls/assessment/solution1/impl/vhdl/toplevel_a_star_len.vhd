-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity toplevel_a_star_len is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_x : IN STD_LOGIC_VECTOR (15 downto 0);
    start_y : IN STD_LOGIC_VECTOR (15 downto 0);
    goal_x : IN STD_LOGIC_VECTOR (15 downto 0);
    goal_y : IN STD_LOGIC_VECTOR (15 downto 0);
    error_flag_i : IN STD_LOGIC_VECTOR (31 downto 0);
    error_flag_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    error_flag_o_ap_vld : OUT STD_LOGIC;
    world_size : IN STD_LOGIC_VECTOR (31 downto 0);
    local_ram_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    local_ram_ce0 : OUT STD_LOGIC;
    local_ram_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of toplevel_a_star_len is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage3 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_190 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010000";
    constant ap_const_lv32_1F4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_1E85 : STD_LOGIC_VECTOR (12 downto 0) := "1111010000101";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_12C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv13_E : STD_LOGIC_VECTOR (12 downto 0) := "0000000001110";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal closed_set_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal closed_set_ce0 : STD_LOGIC;
    signal closed_set_we0 : STD_LOGIC;
    signal closed_set_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal closed_set_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal open_set_heap_f_score_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal open_set_heap_f_score_ce0 : STD_LOGIC;
    signal open_set_heap_f_score_we0 : STD_LOGIC;
    signal open_set_heap_f_score_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal open_set_heap_f_score_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal open_set_heap_f_score_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal open_set_heap_f_score_ce1 : STD_LOGIC;
    signal open_set_heap_f_score_we1 : STD_LOGIC;
    signal open_set_heap_f_score_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal open_set_heap_f_score_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal open_set_heap_g_score_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal open_set_heap_g_score_ce0 : STD_LOGIC;
    signal open_set_heap_g_score_we0 : STD_LOGIC;
    signal open_set_heap_g_score_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal open_set_heap_g_score_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal open_set_heap_g_score_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal open_set_heap_g_score_ce1 : STD_LOGIC;
    signal open_set_heap_g_score_we1 : STD_LOGIC;
    signal open_set_heap_g_score_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal open_set_heap_g_score_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal open_set_heap_x_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal open_set_heap_x_ce0 : STD_LOGIC;
    signal open_set_heap_x_we0 : STD_LOGIC;
    signal open_set_heap_x_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal open_set_heap_x_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal open_set_heap_x_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal open_set_heap_x_ce1 : STD_LOGIC;
    signal open_set_heap_x_we1 : STD_LOGIC;
    signal open_set_heap_x_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal open_set_heap_x_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal open_set_heap_y_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal open_set_heap_y_ce0 : STD_LOGIC;
    signal open_set_heap_y_we0 : STD_LOGIC;
    signal open_set_heap_y_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal open_set_heap_y_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal open_set_heap_y_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal open_set_heap_y_ce1 : STD_LOGIC;
    signal open_set_heap_y_we1 : STD_LOGIC;
    signal open_set_heap_y_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal open_set_heap_y_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx_assign_2_reg_618 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_690 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp3_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage2 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state33_pp3_stage2_iter0 : BOOLEAN;
    signal ap_block_pp3_stage2_11001 : BOOLEAN;
    signal icmp_ln107_reg_1772 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal icmp_ln93_reg_1595 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_1_reg_1609 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_1577 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_1_reg_1591 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_695 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp3_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage3 : signal is "none";
    signal ap_block_state34_pp3_stage3_iter0 : BOOLEAN;
    signal ap_block_pp3_stage3_11001 : BOOLEAN;
    signal icmp_ln112_reg_1816 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_701 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_707 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_30_fu_713_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_33_fu_730_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal h_start_fu_790_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_start_reg_1477 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln52_fu_816_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln52_reg_1488 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln165_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iteration_limit_fu_820_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal iteration_limit_reg_1494 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal cmp8_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp8_reg_1499 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal iteration_count_1_fu_831_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal iteration_count_1_reg_1504 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln144_fu_848_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln144_reg_1512 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal and_ln170_fu_843_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal open_set_heap_g_score_load_reg_1543 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal current_y_reg_1549 : STD_LOGIC_VECTOR (15 downto 0);
    signal current_x_reg_1557 : STD_LOGIC_VECTOR (15 downto 0);
    signal left_fu_900_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal left_reg_1565 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal right_fu_906_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal right_reg_1570 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln92_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_1_fu_931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln93_fu_940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal trunc_ln93_fu_954_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln93_reg_1613 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln176_fu_958_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln176_reg_1618 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal and_ln176_fu_969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bit_idx_fu_978_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal bit_idx_reg_1631 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal closed_set_addr_1_reg_1636 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln64_fu_1016_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln64_reg_1644 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln179_fu_1010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp29_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp29_reg_1649 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal cmp33_fu_1027_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp33_reg_1654 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_g_score_tentative_fu_1032_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal n_g_score_tentative_reg_1659 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln187_fu_1045_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln187_reg_1668 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal n_x_fu_1109_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal n_x_reg_1679 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_1037_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln190_1_fu_1057_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln190_fu_1086_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_y_fu_1118_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal n_y_reg_1688 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln193_fu_1127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln193_reg_1697 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln193_1_fu_1136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln193_1_reg_1702 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln193_2_fu_1141_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln193_2_reg_1707 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal or_ln193_fu_1154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bit_idx_1_fu_1163_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal bit_idx_1_reg_1720 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal word_idx_1_reg_1725 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal shl_ln194_fu_1188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln194_reg_1736 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal icmp_ln194_fu_1200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln194_reg_1741 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal icmp_ln195_fu_1215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_reg_1750 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal n_f_score_fu_1266_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal n_f_score_reg_1754 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal add_ln133_fu_1302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln133_reg_1762 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal zext_ln134_fu_1312_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln107_fu_1316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state31_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state35_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal zext_ln111_fu_1322_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln111_reg_1776 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln111_1_reg_1781 : STD_LOGIC_VECTOR (15 downto 0);
    signal parent_fu_1370_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal parent_reg_1786 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp3_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage1 : signal is "none";
    signal ap_block_state32_pp3_stage1_iter0 : BOOLEAN;
    signal ap_block_pp3_stage1_11001 : BOOLEAN;
    signal zext_ln112_fu_1378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_reg_1791 : STD_LOGIC_VECTOR (63 downto 0);
    signal open_set_heap_f_score_addr_9_reg_1798 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln112_1_fu_1383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_1_reg_1804 : STD_LOGIC_VECTOR (63 downto 0);
    signal open_set_heap_f_score_addr_10_reg_1811 : STD_LOGIC_VECTOR (12 downto 0);
    signal open_set_heap_g_score_addr_5_reg_1820 : STD_LOGIC_VECTOR (12 downto 0);
    signal open_set_heap_x_addr_5_reg_1826 : STD_LOGIC_VECTOR (12 downto 0);
    signal open_set_heap_y_addr_5_reg_1832 : STD_LOGIC_VECTOR (12 downto 0);
    signal smallest_1_fu_1388_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal smallest_1_reg_1838 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal open_set_heap_f_score_addr_6_reg_1843 : STD_LOGIC_VECTOR (12 downto 0);
    signal open_set_heap_g_score_addr_2_reg_1848 : STD_LOGIC_VECTOR (12 downto 0);
    signal open_set_heap_x_addr_2_reg_1853 : STD_LOGIC_VECTOR (12 downto 0);
    signal open_set_heap_y_addr_2_reg_1858 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp3_stage2_subdone : BOOLEAN;
    signal ap_predicate_tran33to36_state33 : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state33 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage3_subdone : BOOLEAN;
    signal empty_reg_528 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond7016_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_32_reg_539 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond15_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_phi_mux_empty_37_phi_fu_611_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_35_reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal iteration_count_reg_562 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_36_reg_574 : STD_LOGIC_VECTOR (31 downto 0);
    signal smallest_reg_584 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal i_reg_596 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal empty_37_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_idx_assign_2_phi_fu_621_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal empty_39_reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal smallest_in_in_reg_652 : STD_LOGIC_VECTOR (15 downto 0);
    signal retval_0_reg_661 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln213_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_fu_1282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_fu_725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast3_fu_742_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_fu_854_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln92_1_fu_921_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln92_2_fu_926_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_1_fu_945_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_2_fu_949_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_fu_990_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_fu_1180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_1_fu_1206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln132_fu_1294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage1 : BOOLEAN;
    signal ap_block_pp3_stage2 : BOOLEAN;
    signal ap_block_pp3_stage3 : BOOLEAN;
    signal zext_ln98_fu_1392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln87_fu_1400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln214_fu_880_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln70_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln70_fu_754_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln70_1_fu_758_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln70_1_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln70_2_fu_774_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln70_3_fu_778_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln70_1_fu_782_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln70_fu_762_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln52_fu_816_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_810_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln170_fu_837_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_892_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln92_fu_912_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln93_fu_937_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln176_fu_961_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_1_fu_965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1407_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal word_idx_fu_981_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln54_fu_995_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln179_fu_998_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln179_fu_1004_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln190_fu_1051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln190_fu_1062_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln190_1_fu_1080_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_1091_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln191_fu_1105_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_1066_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln192_fu_1114_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln193_fu_1123_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln193_fu_1127_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln193_1_fu_1132_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln193_1_fu_1136_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln193_fu_1144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln193_1_fu_1149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1415_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln46_fu_1175_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln45_fu_1185_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln194_fu_1194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln195_fu_1210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln70_2_fu_1221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln70_4_fu_1225_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln70_5_fu_1229_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln70_3_fu_1241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln70_6_fu_1245_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln70_7_fu_1249_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln70_2_fu_1233_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln201_fu_1261_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln70_3_fu_1253_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_1272_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln134_fu_1308_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln111_fu_1326_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln111_fu_1342_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_fu_1347_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln111_1_fu_1355_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln111_2_fu_1360_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1407_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1407_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_1415_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1415_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_return_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_block_pp3_stage1_subdone : BOOLEAN;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal grp_fu_1407_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1415_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component toplevel_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component toplevel_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component toplevel_mac_muladd_18s_16ns_16ns_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component toplevel_a_star_len_closed_set IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component toplevel_a_star_len_open_set_heap_f_score IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    closed_set_U : component toplevel_a_star_len_closed_set
    generic map (
        DataWidth => 32,
        AddressRange => 7813,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => closed_set_address0,
        ce0 => closed_set_ce0,
        we0 => closed_set_we0,
        d0 => closed_set_d0,
        q0 => closed_set_q0);

    open_set_heap_f_score_U : component toplevel_a_star_len_open_set_heap_f_score
    generic map (
        DataWidth => 16,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => open_set_heap_f_score_address0,
        ce0 => open_set_heap_f_score_ce0,
        we0 => open_set_heap_f_score_we0,
        d0 => open_set_heap_f_score_d0,
        q0 => open_set_heap_f_score_q0,
        address1 => open_set_heap_f_score_address1,
        ce1 => open_set_heap_f_score_ce1,
        we1 => open_set_heap_f_score_we1,
        d1 => open_set_heap_f_score_d1,
        q1 => open_set_heap_f_score_q1);

    open_set_heap_g_score_U : component toplevel_a_star_len_open_set_heap_f_score
    generic map (
        DataWidth => 16,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => open_set_heap_g_score_address0,
        ce0 => open_set_heap_g_score_ce0,
        we0 => open_set_heap_g_score_we0,
        d0 => open_set_heap_g_score_d0,
        q0 => open_set_heap_g_score_q0,
        address1 => open_set_heap_g_score_address1,
        ce1 => open_set_heap_g_score_ce1,
        we1 => open_set_heap_g_score_we1,
        d1 => open_set_heap_g_score_d1,
        q1 => open_set_heap_g_score_q1);

    open_set_heap_x_U : component toplevel_a_star_len_open_set_heap_f_score
    generic map (
        DataWidth => 16,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => open_set_heap_x_address0,
        ce0 => open_set_heap_x_ce0,
        we0 => open_set_heap_x_we0,
        d0 => open_set_heap_x_d0,
        q0 => open_set_heap_x_q0,
        address1 => open_set_heap_x_address1,
        ce1 => open_set_heap_x_ce1,
        we1 => open_set_heap_x_we1,
        d1 => open_set_heap_x_d1,
        q1 => open_set_heap_x_q1);

    open_set_heap_y_U : component toplevel_a_star_len_open_set_heap_f_score
    generic map (
        DataWidth => 16,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => open_set_heap_y_address0,
        ce0 => open_set_heap_y_ce0,
        we0 => open_set_heap_y_we0,
        d0 => open_set_heap_y_d0,
        q0 => open_set_heap_y_q0,
        address1 => open_set_heap_y_address1,
        ce1 => open_set_heap_y_ce1,
        we1 => open_set_heap_y_we1,
        d1 => open_set_heap_y_d1,
        q1 => open_set_heap_y_q1);

    mul_32s_32s_32_2_1_U1 : component toplevel_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => world_size,
        din1 => world_size,
        ce => ap_const_logic_1,
        dout => grp_fu_810_p2);

    mux_42_32_1_1_U2 : component toplevel_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_FFFFFFFF,
        din1 => ap_const_lv32_1,
        din2 => ap_const_lv32_0,
        din3 => ap_const_lv32_0,
        din4 => trunc_ln190_fu_1062_p1,
        dout => tmp_1_fu_1066_p6);

    mux_42_32_1_1_U3 : component toplevel_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => ap_const_lv32_FFFFFFFF,
        din3 => ap_const_lv32_1,
        din4 => trunc_ln190_fu_1062_p1,
        dout => tmp_2_fu_1091_p6);

    mac_muladd_18s_16ns_16ns_18_4_1_U4 : component toplevel_mac_muladd_18s_16ns_16ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln52_reg_1488,
        din1 => grp_fu_1407_p1,
        din2 => grp_fu_1407_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1407_p3);

    mac_muladd_18s_16ns_16ns_18_4_1_U5 : component toplevel_mac_muladd_18s_16ns_16ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln52_reg_1488,
        din1 => grp_fu_1415_p1,
        din2 => grp_fu_1415_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1415_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state33) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_boolean_0 = ap_block_pp3_stage3_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0)))) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                    ap_return_preg <= retval_0_reg_661;
                end if; 
            end if;
        end if;
    end process;


    empty_32_reg_539_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                empty_32_reg_539 <= ap_const_lv14_0;
            elsif (((exitcond15_fu_736_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_32_reg_539 <= empty_33_fu_730_p2;
            end if; 
        end if;
    end process;

    empty_35_reg_550_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                empty_35_reg_550 <= ap_const_lv32_1;
            elsif (((tmp_fu_1037_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                empty_35_reg_550 <= empty_37_reg_607;
            end if; 
        end if;
    end process;

    empty_36_reg_574_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln179_fu_1010_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                empty_36_reg_574 <= add_ln144_reg_1512;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                empty_36_reg_574 <= empty_35_reg_550;
            end if; 
        end if;
    end process;

    empty_37_reg_607_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                empty_37_reg_607 <= empty_39_reg_628;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                empty_37_reg_607 <= add_ln144_reg_1512;
            end if; 
        end if;
    end process;

    empty_39_reg_628_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln195_reg_1750 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((icmp_ln194_reg_1741 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((or_ln193_fu_1154_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
                empty_39_reg_628 <= empty_37_reg_607;
            elsif ((((tmp_fu_1037_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_1 = and_ln190_1_fu_1057_p2)) or ((tmp_fu_1037_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_1 = and_ln190_fu_1086_p2) and (ap_const_lv1_0 = and_ln190_1_fu_1057_p2)))) then 
                empty_39_reg_628 <= ap_phi_mux_empty_37_phi_fu_611_p4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                empty_39_reg_628 <= add_ln133_reg_1762;
            end if; 
        end if;
    end process;

    empty_reg_528_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7016_fu_719_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_reg_528 <= empty_30_fu_713_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_reg_528 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    i_reg_596_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                i_reg_596 <= add_ln187_reg_1668;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_reg_596 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    idx_assign_2_reg_618_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln112_reg_1816 = ap_const_lv1_1) and (icmp_ln107_reg_1772 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                idx_assign_2_reg_618 <= parent_reg_1786;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                idx_assign_2_reg_618 <= zext_ln134_fu_1312_p1;
            end if; 
        end if;
    end process;

    iteration_count_reg_562_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                iteration_count_reg_562 <= ap_const_lv32_0;
            elsif (((tmp_fu_1037_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                iteration_count_reg_562 <= iteration_count_1_reg_1504;
            end if; 
        end if;
    end process;

    retval_0_reg_661_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = and_ln176_fu_969_p2))) then 
                retval_0_reg_661 <= open_set_heap_g_score_load_reg_1543;
            elsif ((((icmp_ln165_fu_800_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln126_fu_1282_p2 = ap_const_lv1_0) and (icmp_ln195_reg_1750 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((icmp_ln213_fu_862_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = and_ln170_fu_843_p2)) or ((icmp_ln213_fu_862_p2 = ap_const_lv1_0) and (cmp8_reg_1499 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = and_ln170_fu_843_p2)) or ((icmp_ln213_fu_862_p2 = ap_const_lv1_0) and (cmp8_reg_1499 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = and_ln170_fu_843_p2)))) then 
                retval_0_reg_661 <= ap_const_lv16_FFFF;
            end if; 
        end if;
    end process;

    smallest_in_in_reg_652_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (((grp_fu_684_p2 = ap_const_lv1_1) and (icmp_ln92_1_reg_1591 = ap_const_lv1_0) and (icmp_ln93_reg_1595 = ap_const_lv1_1)) or ((grp_fu_684_p2 = ap_const_lv1_1) and (icmp_ln92_reg_1577 = ap_const_lv1_0) and (icmp_ln93_reg_1595 = ap_const_lv1_1))))) then 
                smallest_in_in_reg_652 <= right_reg_1570;
            elsif (((icmp_ln92_1_fu_931_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln92_reg_1577 = ap_const_lv1_1))) then 
                smallest_in_in_reg_652 <= left_reg_1565;
            end if; 
        end if;
    end process;

    smallest_reg_584_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and (((icmp_ln92_1_reg_1591 = ap_const_lv1_1) and (icmp_ln92_reg_1577 = ap_const_lv1_1)) or ((icmp_ln93_1_reg_1609 = ap_const_lv1_1) and (icmp_ln93_reg_1595 = ap_const_lv1_1))))) then 
                smallest_reg_584 <= smallest_1_reg_1838;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                smallest_reg_584 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                add_ln133_reg_1762 <= add_ln133_fu_1302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln170_fu_843_p2))) then
                add_ln144_reg_1512 <= add_ln144_fu_848_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln187_reg_1668 <= add_ln187_fu_1045_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                bit_idx_1_reg_1720 <= bit_idx_1_fu_1163_p1;
                word_idx_1_reg_1725 <= grp_fu_1415_p3(17 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                bit_idx_reg_1631 <= bit_idx_fu_978_p1;
                closed_set_addr_1_reg_1636 <= zext_ln55_fu_990_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                cmp29_reg_1649 <= cmp29_fu_1022_p2;
                cmp33_reg_1654 <= cmp33_fu_1027_p2;
                n_g_score_tentative_reg_1659 <= n_g_score_tentative_fu_1032_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                cmp8_reg_1499 <= cmp8_fu_826_p2;
                iteration_count_1_reg_1504 <= iteration_count_1_fu_831_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                current_x_reg_1557 <= open_set_heap_x_q1;
                current_y_reg_1549 <= open_set_heap_y_q1;
                open_set_heap_g_score_load_reg_1543 <= open_set_heap_g_score_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                h_start_reg_1477 <= h_start_fu_790_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln107_reg_1772 <= icmp_ln107_fu_1316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (icmp_ln107_reg_1772 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                icmp_ln112_reg_1816 <= grp_fu_684_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_1037_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = and_ln190_fu_1086_p2) and (ap_const_lv1_0 = and_ln190_1_fu_1057_p2))) then
                icmp_ln193_1_reg_1702 <= icmp_ln193_1_fu_1136_p2;
                icmp_ln193_reg_1697 <= icmp_ln193_fu_1127_p2;
                n_x_reg_1679 <= n_x_fu_1109_p2;
                n_y_reg_1688 <= n_y_fu_1118_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                icmp_ln194_reg_1741 <= icmp_ln194_fu_1200_p2;
                shl_ln194_reg_1736 <= shl_ln194_fu_1188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                icmp_ln195_reg_1750 <= icmp_ln195_fu_1215_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln92_reg_1577 = ap_const_lv1_1))) then
                icmp_ln92_1_reg_1591 <= icmp_ln92_1_fu_931_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                icmp_ln92_reg_1577 <= icmp_ln92_fu_916_p2;
                    left_reg_1565(15 downto 1) <= left_fu_900_p2(15 downto 1);
                    right_reg_1570(15 downto 1) <= right_fu_906_p2(15 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (((icmp_ln92_1_reg_1591 = ap_const_lv1_0) and (icmp_ln93_reg_1595 = ap_const_lv1_1)) or ((icmp_ln92_reg_1577 = ap_const_lv1_0) and (icmp_ln93_reg_1595 = ap_const_lv1_1))))) then
                icmp_ln93_1_reg_1609 <= grp_fu_684_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and ((icmp_ln92_1_fu_931_p2 = ap_const_lv1_0) or (icmp_ln92_reg_1577 = ap_const_lv1_0)))) then
                icmp_ln93_reg_1595 <= icmp_ln93_fu_940_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    iteration_limit_reg_1494(31 downto 1) <= iteration_limit_fu_820_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln195_reg_1750 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                n_f_score_reg_1754 <= n_f_score_fu_1266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (icmp_ln107_reg_1772 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001))) then
                open_set_heap_f_score_addr_10_reg_1811 <= zext_ln112_1_fu_1383_p1(13 - 1 downto 0);
                open_set_heap_f_score_addr_9_reg_1798 <= zext_ln112_fu_1378_p1(13 - 1 downto 0);
                    zext_ln112_1_reg_1804(15 downto 0) <= zext_ln112_1_fu_1383_p1(15 downto 0);
                    zext_ln112_reg_1791(15 downto 0) <= zext_ln112_fu_1378_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (((icmp_ln92_1_reg_1591 = ap_const_lv1_1) and (icmp_ln92_reg_1577 = ap_const_lv1_1)) or ((icmp_ln93_1_reg_1609 = ap_const_lv1_1) and (icmp_ln93_reg_1595 = ap_const_lv1_1))))) then
                open_set_heap_f_score_addr_6_reg_1843 <= zext_ln98_fu_1392_p1(13 - 1 downto 0);
                open_set_heap_g_score_addr_2_reg_1848 <= zext_ln98_fu_1392_p1(13 - 1 downto 0);
                open_set_heap_x_addr_2_reg_1853 <= zext_ln98_fu_1392_p1(13 - 1 downto 0);
                open_set_heap_y_addr_2_reg_1858 <= zext_ln98_fu_1392_p1(13 - 1 downto 0);
                smallest_1_reg_1838 <= smallest_1_fu_1388_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_684_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (icmp_ln107_reg_1772 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001))) then
                open_set_heap_g_score_addr_5_reg_1820 <= zext_ln112_1_reg_1804(13 - 1 downto 0);
                open_set_heap_x_addr_5_reg_1826 <= zext_ln112_1_reg_1804(13 - 1 downto 0);
                open_set_heap_y_addr_5_reg_1832 <= zext_ln112_1_reg_1804(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln179_fu_1010_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                or_ln64_reg_1644 <= or_ln64_fu_1016_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (icmp_ln107_reg_1772 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                parent_reg_1786 <= parent_fu_1370_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state39) and (((icmp_ln92_1_reg_1591 = ap_const_lv1_1) and (icmp_ln92_reg_1577 = ap_const_lv1_1)) or ((icmp_ln93_1_reg_1609 = ap_const_lv1_1) and (icmp_ln93_reg_1595 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (icmp_ln107_reg_1772 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                reg_690 <= open_set_heap_f_score_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (icmp_ln112_reg_1816 = ap_const_lv1_1) and (icmp_ln107_reg_1772 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage3_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state39) and (((icmp_ln92_1_reg_1591 = ap_const_lv1_1) and (icmp_ln92_reg_1577 = ap_const_lv1_1)) or ((icmp_ln93_1_reg_1609 = ap_const_lv1_1) and (icmp_ln93_reg_1595 = ap_const_lv1_1)))))) then
                reg_695 <= open_set_heap_g_score_q1;
                reg_701 <= open_set_heap_x_q1;
                reg_707 <= open_set_heap_y_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln107_fu_1316_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                trunc_ln111_1_reg_1781 <= sub_ln111_fu_1326_p2(16 downto 1);
                    zext_ln111_reg_1776(15 downto 0) <= zext_ln111_fu_1322_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_fu_800_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                trunc_ln52_reg_1488 <= trunc_ln52_fu_816_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (((grp_fu_684_p2 = ap_const_lv1_1) and (icmp_ln93_reg_1595 = ap_const_lv1_1)) or ((icmp_ln92_1_reg_1591 = ap_const_lv1_1) and (icmp_ln92_reg_1577 = ap_const_lv1_1))))) then
                trunc_ln93_reg_1613 <= trunc_ln93_fu_954_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                    zext_ln176_reg_1618(15 downto 0) <= zext_ln176_fu_958_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                    zext_ln193_2_reg_1707(15 downto 0) <= zext_ln193_2_fu_1141_p1(15 downto 0);
            end if;
        end if;
    end process;
    iteration_limit_reg_1494(0) <= '0';
    left_reg_1565(0) <= '1';
    right_reg_1570(0) <= '0';
    zext_ln176_reg_1618(17 downto 16) <= "00";
    zext_ln193_2_reg_1707(17 downto 16) <= "00";
    zext_ln111_reg_1776(16) <= '0';
    zext_ln112_reg_1791(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln112_1_reg_1804(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp3_iter0, icmp_ln93_reg_1595, icmp_ln92_reg_1577, icmp_ln92_1_reg_1591, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, icmp_ln165_fu_800_p2, ap_CS_fsm_state9, and_ln170_fu_843_p2, grp_fu_684_p2, ap_CS_fsm_state13, ap_CS_fsm_state14, and_ln176_fu_969_p2, ap_CS_fsm_state18, icmp_ln179_fu_1010_p2, ap_CS_fsm_state20, tmp_fu_1037_p3, and_ln190_1_fu_1057_p2, and_ln190_fu_1086_p2, ap_CS_fsm_state21, or_ln193_fu_1154_p2, icmp_ln194_reg_1741, ap_CS_fsm_state27, icmp_ln195_reg_1750, ap_CS_fsm_state29, ap_block_pp3_stage2_subdone, ap_predicate_tran33to36_state33, ap_block_pp3_stage3_subdone, exitcond7016_fu_719_p2, exitcond15_fu_736_p2, icmp_ln126_fu_1282_p2, ap_block_pp3_stage0_subdone, ap_block_pp3_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond7016_fu_719_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((exitcond15_fu_736_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln165_fu_800_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = and_ln170_fu_843_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (((grp_fu_684_p2 = ap_const_lv1_1) and (icmp_ln93_reg_1595 = ap_const_lv1_1)) or ((icmp_ln92_1_reg_1591 = ap_const_lv1_1) and (icmp_ln92_reg_1577 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = and_ln176_fu_969_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln179_fu_1010_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((tmp_fu_1037_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((tmp_fu_1037_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = and_ln190_fu_1086_p2) and (ap_const_lv1_0 = and_ln190_1_fu_1057_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state21 => 
                if (((or_ln193_fu_1154_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((icmp_ln194_reg_1741 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((icmp_ln126_fu_1282_p2 = ap_const_lv1_0) and (icmp_ln195_reg_1750 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                elsif (((icmp_ln126_fu_1282_p2 = ap_const_lv1_1) and (icmp_ln195_reg_1750 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_pp3_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                end if;
            when ap_ST_fsm_pp3_stage2 => 
                if ((not(((ap_predicate_tran33to36_state33 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp3_stage2_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp3_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage3;
                elsif (((ap_predicate_tran33to36_state33 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp3_stage2_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                end if;
            when ap_ST_fsm_pp3_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage3;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln111_fu_1342_p2 <= std_logic_vector(unsigned(zext_ln111_reg_1776) + unsigned(ap_const_lv17_1FFFF));
    add_ln133_fu_1302_p2 <= std_logic_vector(unsigned(empty_37_reg_607) + unsigned(ap_const_lv32_1));
    add_ln144_fu_848_p2 <= std_logic_vector(unsigned(empty_36_reg_574) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln187_fu_1045_p2 <= std_logic_vector(unsigned(i_reg_596) + unsigned(ap_const_lv3_1));
    add_ln201_fu_1261_p2 <= std_logic_vector(unsigned(n_g_score_tentative_reg_1659) + unsigned(select_ln70_2_fu_1233_p3));
    add_ln214_fu_880_p2 <= std_logic_vector(unsigned(iteration_count_reg_562) + unsigned(ap_const_lv32_12C));
    add_ln46_fu_1175_p2 <= std_logic_vector(unsigned(word_idx_1_reg_1725) + unsigned(ap_const_lv13_E));
    and_ln170_fu_843_p2 <= (icmp_ln170_fu_837_p2 and cmp8_reg_1499);
    and_ln176_fu_969_p2 <= (icmp_ln176_fu_961_p2 and icmp_ln176_1_fu_965_p2);
    and_ln179_fu_1004_p2 <= (shl_ln179_fu_998_p2 and closed_set_q0);
    and_ln190_1_fu_1057_p2 <= (icmp_ln190_fu_1051_p2 and cmp29_reg_1649);
    and_ln190_fu_1086_p2 <= (icmp_ln190_1_fu_1080_p2 and cmp33_reg_1654);
    and_ln194_fu_1194_p2 <= (shl_ln194_fu_1188_p2 and local_ram_q0);
    and_ln195_fu_1210_p2 <= (shl_ln194_reg_1736 and closed_set_q0);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(30);
    ap_CS_fsm_pp3_stage1 <= ap_CS_fsm(31);
    ap_CS_fsm_pp3_stage2 <= ap_CS_fsm(32);
    ap_CS_fsm_pp3_stage3 <= ap_CS_fsm(33);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state36 <= ap_CS_fsm(34);
    ap_CS_fsm_state37 <= ap_CS_fsm(35);
    ap_CS_fsm_state38 <= ap_CS_fsm(36);
    ap_CS_fsm_state39 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(38);
    ap_CS_fsm_state41 <= ap_CS_fsm(39);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp3_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp3_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp3_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp3_exit_iter0_state33_assign_proc : process(ap_predicate_tran33to36_state33)
    begin
        if ((ap_predicate_tran33to36_state33 = ap_const_boolean_1)) then 
            ap_condition_pp3_exit_iter0_state33 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_empty_37_phi_fu_611_p4 <= empty_37_reg_607;

    ap_phi_mux_idx_assign_2_phi_fu_621_p4_assign_proc : process(idx_assign_2_reg_618, icmp_ln107_reg_1772, icmp_ln112_reg_1816, ap_CS_fsm_pp3_stage0, parent_reg_1786, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln112_reg_1816 = ap_const_lv1_1) and (icmp_ln107_reg_1772 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            ap_phi_mux_idx_assign_2_phi_fu_621_p4 <= parent_reg_1786;
        else 
            ap_phi_mux_idx_assign_2_phi_fu_621_p4 <= idx_assign_2_reg_618;
        end if; 
    end process;


    ap_predicate_tran33to36_state33_assign_proc : process(icmp_ln107_reg_1772, grp_fu_684_p2)
    begin
                ap_predicate_tran33to36_state33 <= ((grp_fu_684_p2 = ap_const_lv1_0) or (icmp_ln107_reg_1772 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(retval_0_reg_661, ap_return_preg, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            ap_return <= retval_0_reg_661;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bit_idx_1_fu_1163_p1 <= grp_fu_1415_p3(5 - 1 downto 0);
    bit_idx_fu_978_p1 <= grp_fu_1407_p3(5 - 1 downto 0);

    closed_set_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state17, closed_set_addr_1_reg_1636, ap_CS_fsm_state19, ap_CS_fsm_state27, p_cast_fu_725_p1, zext_ln55_fu_990_p1, zext_ln55_1_fu_1206_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            closed_set_address0 <= zext_ln55_1_fu_1206_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            closed_set_address0 <= closed_set_addr_1_reg_1636;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            closed_set_address0 <= zext_ln55_fu_990_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            closed_set_address0 <= p_cast_fu_725_p1(13 - 1 downto 0);
        else 
            closed_set_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    closed_set_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            closed_set_ce0 <= ap_const_logic_1;
        else 
            closed_set_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    closed_set_d0_assign_proc : process(ap_CS_fsm_state2, or_ln64_reg_1644, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            closed_set_d0 <= or_ln64_reg_1644;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            closed_set_d0 <= ap_const_lv32_0;
        else 
            closed_set_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    closed_set_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state19, exitcond7016_fu_719_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((exitcond7016_fu_719_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            closed_set_we0 <= ap_const_logic_1;
        else 
            closed_set_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cmp29_fu_1022_p2 <= "1" when (current_x_reg_1557 = ap_const_lv16_0) else "0";
    cmp33_fu_1027_p2 <= "1" when (current_y_reg_1549 = ap_const_lv16_0) else "0";
    cmp8_fu_826_p2 <= "1" when (unsigned(iteration_count_reg_562) < unsigned(iteration_limit_reg_1494)) else "0";
    empty_30_fu_713_p2 <= std_logic_vector(unsigned(empty_reg_528) + unsigned(ap_const_lv13_1));
    empty_33_fu_730_p2 <= std_logic_vector(unsigned(empty_32_reg_539) + unsigned(ap_const_lv14_1));

    error_flag_o_assign_proc : process(error_flag_i, cmp8_reg_1499, ap_CS_fsm_state9, and_ln170_fu_843_p2, icmp_ln195_reg_1750, ap_CS_fsm_state29, icmp_ln213_fu_862_p2, icmp_ln126_fu_1282_p2, add_ln214_fu_880_p2)
    begin
        if (((icmp_ln213_fu_862_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = and_ln170_fu_843_p2))) then 
            error_flag_o <= add_ln214_fu_880_p2;
        elsif (((icmp_ln213_fu_862_p2 = ap_const_lv1_0) and (cmp8_reg_1499 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = and_ln170_fu_843_p2))) then 
            error_flag_o <= ap_const_lv32_1F4;
        elsif (((icmp_ln213_fu_862_p2 = ap_const_lv1_0) and (cmp8_reg_1499 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = and_ln170_fu_843_p2))) then 
            error_flag_o <= ap_const_lv32_190;
        elsif (((icmp_ln126_fu_1282_p2 = ap_const_lv1_0) and (icmp_ln195_reg_1750 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            error_flag_o <= ap_const_lv32_C8;
        else 
            error_flag_o <= error_flag_i;
        end if; 
    end process;


    error_flag_o_ap_vld_assign_proc : process(cmp8_reg_1499, ap_CS_fsm_state9, and_ln170_fu_843_p2, icmp_ln195_reg_1750, ap_CS_fsm_state29, icmp_ln213_fu_862_p2, icmp_ln126_fu_1282_p2)
    begin
        if ((((icmp_ln126_fu_1282_p2 = ap_const_lv1_0) and (icmp_ln195_reg_1750 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((icmp_ln213_fu_862_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = and_ln170_fu_843_p2)) or ((icmp_ln213_fu_862_p2 = ap_const_lv1_0) and (cmp8_reg_1499 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = and_ln170_fu_843_p2)) or ((icmp_ln213_fu_862_p2 = ap_const_lv1_0) and (cmp8_reg_1499 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = and_ln170_fu_843_p2)))) then 
            error_flag_o_ap_vld <= ap_const_logic_1;
        else 
            error_flag_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    exitcond15_fu_736_p2 <= "1" when (empty_32_reg_539 = ap_const_lv14_2000) else "0";
    exitcond7016_fu_719_p2 <= "1" when (empty_reg_528 = ap_const_lv13_1E85) else "0";
    grp_fu_1407_p1 <= grp_fu_1407_p10(16 - 1 downto 0);
    grp_fu_1407_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(current_y_reg_1549),18));
    grp_fu_1407_p2 <= zext_ln176_reg_1618(16 - 1 downto 0);
    grp_fu_1415_p1 <= grp_fu_1415_p10(16 - 1 downto 0);
    grp_fu_1415_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_y_reg_1688),18));
    grp_fu_1415_p2 <= zext_ln193_2_reg_1707(16 - 1 downto 0);
    grp_fu_684_p2 <= "1" when (unsigned(open_set_heap_f_score_q0) < unsigned(open_set_heap_f_score_q1)) else "0";
    h_start_fu_790_p2 <= std_logic_vector(unsigned(select_ln70_1_fu_782_p3) + unsigned(select_ln70_fu_762_p3));
    icmp_ln107_fu_1316_p2 <= "1" when (ap_phi_mux_idx_assign_2_phi_fu_621_p4 = ap_const_lv16_0) else "0";
    icmp_ln126_fu_1282_p2 <= "1" when (tmp_3_fu_1272_p4 = ap_const_lv19_0) else "0";
    icmp_ln165_fu_800_p2 <= "1" when (error_flag_i = ap_const_lv32_0) else "0";
    icmp_ln170_fu_837_p2 <= "0" when (empty_36_reg_574 = ap_const_lv32_0) else "1";
    icmp_ln176_1_fu_965_p2 <= "1" when (current_y_reg_1549 = goal_y) else "0";
    icmp_ln176_fu_961_p2 <= "1" when (current_x_reg_1557 = goal_x) else "0";
    icmp_ln179_fu_1010_p2 <= "1" when (and_ln179_fu_1004_p2 = ap_const_lv32_0) else "0";
    icmp_ln190_1_fu_1080_p2 <= "1" when (i_reg_596 = ap_const_lv3_0) else "0";
    icmp_ln190_fu_1051_p2 <= "1" when (i_reg_596 = ap_const_lv3_2) else "0";
    icmp_ln193_1_fu_1136_p1 <= world_size;
    icmp_ln193_1_fu_1136_p2 <= "1" when (unsigned(zext_ln193_1_fu_1132_p1) < unsigned(icmp_ln193_1_fu_1136_p1)) else "0";
    icmp_ln193_fu_1127_p1 <= world_size;
    icmp_ln193_fu_1127_p2 <= "1" when (unsigned(zext_ln193_fu_1123_p1) < unsigned(icmp_ln193_fu_1127_p1)) else "0";
    icmp_ln194_fu_1200_p2 <= "1" when (and_ln194_fu_1194_p2 = ap_const_lv32_0) else "0";
    icmp_ln195_fu_1215_p2 <= "1" when (and_ln195_fu_1210_p2 = ap_const_lv32_0) else "0";
    icmp_ln213_fu_862_p2 <= "1" when (empty_36_reg_574 = ap_const_lv32_0) else "0";
    icmp_ln70_1_fu_770_p2 <= "1" when (unsigned(start_y) > unsigned(goal_y)) else "0";
    icmp_ln70_2_fu_1221_p2 <= "1" when (unsigned(n_x_reg_1679) > unsigned(goal_x)) else "0";
    icmp_ln70_3_fu_1241_p2 <= "1" when (unsigned(n_y_reg_1688) > unsigned(goal_y)) else "0";
    icmp_ln70_fu_750_p2 <= "1" when (unsigned(start_x) > unsigned(goal_x)) else "0";
    icmp_ln92_1_fu_931_p2 <= "1" when (unsigned(open_set_heap_f_score_q1) < unsigned(open_set_heap_f_score_q0)) else "0";
    icmp_ln92_fu_916_p2 <= "1" when (unsigned(zext_ln92_fu_912_p1) < unsigned(add_ln144_reg_1512)) else "0";
    icmp_ln93_fu_940_p2 <= "1" when (unsigned(zext_ln93_fu_937_p1) < unsigned(add_ln144_reg_1512)) else "0";
    iteration_count_1_fu_831_p2 <= std_logic_vector(unsigned(iteration_count_reg_562) + unsigned(ap_const_lv32_1));
    iteration_limit_fu_820_p2 <= std_logic_vector(shift_left(unsigned(grp_fu_810_p2),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    left_fu_900_p2 <= (shl_ln_fu_892_p3 or ap_const_lv16_1);
    local_ram_address0 <= zext_ln46_fu_1180_p1(13 - 1 downto 0);

    local_ram_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            local_ram_ce0 <= ap_const_logic_1;
        else 
            local_ram_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    n_f_score_fu_1266_p2 <= std_logic_vector(unsigned(add_ln201_fu_1261_p2) + unsigned(select_ln70_3_fu_1253_p3));
    n_g_score_tentative_fu_1032_p2 <= std_logic_vector(unsigned(open_set_heap_g_score_load_reg_1543) + unsigned(ap_const_lv16_1));
    n_x_fu_1109_p2 <= std_logic_vector(unsigned(current_x_reg_1557) + unsigned(trunc_ln191_fu_1105_p1));
    n_y_fu_1118_p2 <= std_logic_vector(unsigned(current_y_reg_1549) + unsigned(trunc_ln192_fu_1114_p1));

    open_set_heap_f_score_address0_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_state39, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_pp3_stage1, zext_ln112_fu_1378_p1, p_cast3_fu_742_p1, zext_ln144_fu_854_p1, zext_ln92_2_fu_926_p1, zext_ln93_1_fu_945_p1, ap_block_pp3_stage1, zext_ln87_fu_1400_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            open_set_heap_f_score_address0 <= zext_ln87_fu_1400_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            open_set_heap_f_score_address0 <= zext_ln112_fu_1378_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            open_set_heap_f_score_address0 <= zext_ln93_1_fu_945_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            open_set_heap_f_score_address0 <= zext_ln92_2_fu_926_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            open_set_heap_f_score_address0 <= zext_ln144_fu_854_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            open_set_heap_f_score_address0 <= ap_const_lv13_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            open_set_heap_f_score_address0 <= p_cast3_fu_742_p1(13 - 1 downto 0);
        else 
            open_set_heap_f_score_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    open_set_heap_f_score_address1_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage3, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state30, ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp3_stage1, open_set_heap_f_score_addr_9_reg_1798, zext_ln112_1_fu_1383_p1, open_set_heap_f_score_addr_10_reg_1811, ap_CS_fsm_state38, open_set_heap_f_score_addr_6_reg_1843, ap_enable_reg_pp3_iter1, ap_CS_fsm_state40, ap_block_pp3_stage0, zext_ln92_1_fu_921_p1, zext_ln93_2_fu_949_p1, zext_ln132_fu_1294_p1, ap_block_pp3_stage1, ap_block_pp3_stage3, zext_ln98_fu_1392_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            open_set_heap_f_score_address1 <= open_set_heap_f_score_addr_6_reg_1843;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            open_set_heap_f_score_address1 <= zext_ln98_fu_1392_p1(13 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            open_set_heap_f_score_address1 <= open_set_heap_f_score_addr_10_reg_1811;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_boolean_0 = ap_block_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            open_set_heap_f_score_address1 <= open_set_heap_f_score_addr_9_reg_1798;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            open_set_heap_f_score_address1 <= zext_ln112_1_fu_1383_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            open_set_heap_f_score_address1 <= zext_ln132_fu_1294_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            open_set_heap_f_score_address1 <= zext_ln93_2_fu_949_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            open_set_heap_f_score_address1 <= zext_ln92_1_fu_921_p1(13 - 1 downto 0);
        else 
            open_set_heap_f_score_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    open_set_heap_f_score_ce0_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_state39, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state39) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then 
            open_set_heap_f_score_ce0 <= ap_const_logic_1;
        else 
            open_set_heap_f_score_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    open_set_heap_f_score_ce1_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage3, ap_block_pp3_stage3_11001, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state30, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1_11001, ap_CS_fsm_state38, ap_enable_reg_pp3_iter1, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_boolean_0 = ap_block_pp3_stage3_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then 
            open_set_heap_f_score_ce1 <= ap_const_logic_1;
        else 
            open_set_heap_f_score_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    open_set_heap_f_score_d0_assign_proc : process(open_set_heap_f_score_q0, open_set_heap_f_score_q1, ap_CS_fsm_state39, ap_CS_fsm_state4, h_start_reg_1477, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            open_set_heap_f_score_d0 <= open_set_heap_f_score_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            open_set_heap_f_score_d0 <= open_set_heap_f_score_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            open_set_heap_f_score_d0 <= h_start_reg_1477;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            open_set_heap_f_score_d0 <= ap_const_lv16_0;
        else 
            open_set_heap_f_score_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    open_set_heap_f_score_d1_assign_proc : process(reg_690, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage3, n_f_score_reg_1754, ap_CS_fsm_state30, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_CS_fsm_state40, ap_block_pp3_stage0, ap_block_pp3_stage3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_boolean_0 = ap_block_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then 
            open_set_heap_f_score_d1 <= reg_690;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            open_set_heap_f_score_d1 <= n_f_score_reg_1754;
        else 
            open_set_heap_f_score_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    open_set_heap_f_score_we0_assign_proc : process(ap_CS_fsm_state39, icmp_ln93_reg_1595, icmp_ln93_1_reg_1609, icmp_ln92_reg_1577, icmp_ln92_1_reg_1591, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state10, exitcond15_fu_736_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((exitcond15_fu_736_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state39) and (((icmp_ln92_1_reg_1591 = ap_const_lv1_1) and (icmp_ln92_reg_1577 = ap_const_lv1_1)) or ((icmp_ln93_1_reg_1609 = ap_const_lv1_1) and (icmp_ln93_reg_1595 = ap_const_lv1_1)))))) then 
            open_set_heap_f_score_we0 <= ap_const_logic_1;
        else 
            open_set_heap_f_score_we0 <= ap_const_logic_0;
        end if; 
    end process;


    open_set_heap_f_score_we1_assign_proc : process(ap_enable_reg_pp3_iter0, icmp_ln107_reg_1772, icmp_ln93_reg_1595, icmp_ln93_1_reg_1609, icmp_ln92_reg_1577, icmp_ln92_1_reg_1591, ap_CS_fsm_pp3_stage3, ap_block_pp3_stage3_11001, icmp_ln112_reg_1816, ap_CS_fsm_state30, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln112_reg_1816 = ap_const_lv1_1) and (icmp_ln107_reg_1772 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (((icmp_ln92_1_reg_1591 = ap_const_lv1_1) and (icmp_ln92_reg_1577 = ap_const_lv1_1)) or ((icmp_ln93_1_reg_1609 = ap_const_lv1_1) and (icmp_ln93_reg_1595 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (icmp_ln112_reg_1816 = ap_const_lv1_1) and (icmp_ln107_reg_1772 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage3_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then 
            open_set_heap_f_score_we1 <= ap_const_logic_1;
        else 
            open_set_heap_f_score_we1 <= ap_const_logic_0;
        end if; 
    end process;


    open_set_heap_g_score_address0_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_state39, ap_CS_fsm_pp3_stage3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, zext_ln112_reg_1791, open_set_heap_g_score_addr_5_reg_1820, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, p_cast3_fu_742_p1, zext_ln144_fu_854_p1, ap_block_pp3_stage3, zext_ln87_fu_1400_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            open_set_heap_g_score_address0 <= zext_ln87_fu_1400_p1(13 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            open_set_heap_g_score_address0 <= open_set_heap_g_score_addr_5_reg_1820;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_boolean_0 = ap_block_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            open_set_heap_g_score_address0 <= zext_ln112_reg_1791(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            open_set_heap_g_score_address0 <= zext_ln144_fu_854_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            open_set_heap_g_score_address0 <= ap_const_lv13_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            open_set_heap_g_score_address0 <= p_cast3_fu_742_p1(13 - 1 downto 0);
        else 
            open_set_heap_g_score_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    open_set_heap_g_score_address1_assign_proc : process(ap_CS_fsm_pp3_stage2, ap_enable_reg_pp3_iter0, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state30, zext_ln112_1_reg_1804, ap_CS_fsm_state38, open_set_heap_g_score_addr_2_reg_1848, ap_CS_fsm_state40, zext_ln132_fu_1294_p1, ap_block_pp3_stage2, zext_ln98_fu_1392_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            open_set_heap_g_score_address1 <= open_set_heap_g_score_addr_2_reg_1848;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            open_set_heap_g_score_address1 <= zext_ln98_fu_1392_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            open_set_heap_g_score_address1 <= zext_ln112_1_reg_1804(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            open_set_heap_g_score_address1 <= zext_ln132_fu_1294_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            open_set_heap_g_score_address1 <= ap_const_lv13_0;
        else 
            open_set_heap_g_score_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    open_set_heap_g_score_ce0_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_state39, ap_CS_fsm_pp3_stage3, ap_block_pp3_stage3_11001, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state39) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_boolean_0 = ap_block_pp3_stage3_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then 
            open_set_heap_g_score_ce0 <= ap_const_logic_1;
        else 
            open_set_heap_g_score_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    open_set_heap_g_score_ce1_assign_proc : process(ap_CS_fsm_pp3_stage2, ap_enable_reg_pp3_iter0, ap_block_pp3_stage2_11001, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state30, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then 
            open_set_heap_g_score_ce1 <= ap_const_logic_1;
        else 
            open_set_heap_g_score_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    open_set_heap_g_score_d0_assign_proc : process(open_set_heap_g_score_q1, ap_enable_reg_pp3_iter0, ap_CS_fsm_state39, reg_695, ap_CS_fsm_pp3_stage3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, ap_block_pp3_stage3)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            open_set_heap_g_score_d0 <= reg_695;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_boolean_0 = ap_block_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then 
            open_set_heap_g_score_d0 <= open_set_heap_g_score_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            open_set_heap_g_score_d0 <= ap_const_lv16_0;
        else 
            open_set_heap_g_score_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    open_set_heap_g_score_d1_assign_proc : process(open_set_heap_g_score_q0, reg_695, ap_CS_fsm_state10, n_g_score_tentative_reg_1659, ap_CS_fsm_state30, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            open_set_heap_g_score_d1 <= reg_695;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            open_set_heap_g_score_d1 <= n_g_score_tentative_reg_1659;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            open_set_heap_g_score_d1 <= open_set_heap_g_score_q0;
        else 
            open_set_heap_g_score_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    open_set_heap_g_score_we0_assign_proc : process(ap_enable_reg_pp3_iter0, icmp_ln107_reg_1772, ap_CS_fsm_state39, icmp_ln93_reg_1595, icmp_ln93_1_reg_1609, icmp_ln92_reg_1577, icmp_ln92_1_reg_1591, ap_CS_fsm_pp3_stage3, ap_block_pp3_stage3_11001, icmp_ln112_reg_1816, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1, exitcond15_fu_736_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln112_reg_1816 = ap_const_lv1_1) and (icmp_ln107_reg_1772 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((exitcond15_fu_736_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (icmp_ln112_reg_1816 = ap_const_lv1_1) and (icmp_ln107_reg_1772 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage3_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state39) and (((icmp_ln92_1_reg_1591 = ap_const_lv1_1) and (icmp_ln92_reg_1577 = ap_const_lv1_1)) or ((icmp_ln93_1_reg_1609 = ap_const_lv1_1) and (icmp_ln93_reg_1595 = ap_const_lv1_1)))))) then 
            open_set_heap_g_score_we0 <= ap_const_logic_1;
        else 
            open_set_heap_g_score_we0 <= ap_const_logic_0;
        end if; 
    end process;


    open_set_heap_g_score_we1_assign_proc : process(icmp_ln93_reg_1595, icmp_ln93_1_reg_1609, icmp_ln92_reg_1577, icmp_ln92_1_reg_1591, ap_CS_fsm_state10, ap_CS_fsm_state30, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (((icmp_ln92_1_reg_1591 = ap_const_lv1_1) and (icmp_ln92_reg_1577 = ap_const_lv1_1)) or ((icmp_ln93_1_reg_1609 = ap_const_lv1_1) and (icmp_ln93_reg_1595 = ap_const_lv1_1)))))) then 
            open_set_heap_g_score_we1 <= ap_const_logic_1;
        else 
            open_set_heap_g_score_we1 <= ap_const_logic_0;
        end if; 
    end process;


    open_set_heap_x_address0_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_state39, ap_CS_fsm_pp3_stage3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, zext_ln112_reg_1791, open_set_heap_x_addr_5_reg_1826, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, p_cast3_fu_742_p1, zext_ln144_fu_854_p1, ap_block_pp3_stage3, zext_ln87_fu_1400_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            open_set_heap_x_address0 <= zext_ln87_fu_1400_p1(13 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            open_set_heap_x_address0 <= open_set_heap_x_addr_5_reg_1826;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_boolean_0 = ap_block_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            open_set_heap_x_address0 <= zext_ln112_reg_1791(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            open_set_heap_x_address0 <= zext_ln144_fu_854_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            open_set_heap_x_address0 <= ap_const_lv13_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            open_set_heap_x_address0 <= p_cast3_fu_742_p1(13 - 1 downto 0);
        else 
            open_set_heap_x_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    open_set_heap_x_address1_assign_proc : process(ap_CS_fsm_pp3_stage2, ap_enable_reg_pp3_iter0, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state30, zext_ln112_1_reg_1804, ap_CS_fsm_state38, open_set_heap_x_addr_2_reg_1853, ap_CS_fsm_state40, zext_ln132_fu_1294_p1, ap_block_pp3_stage2, zext_ln98_fu_1392_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            open_set_heap_x_address1 <= open_set_heap_x_addr_2_reg_1853;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            open_set_heap_x_address1 <= zext_ln98_fu_1392_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            open_set_heap_x_address1 <= zext_ln112_1_reg_1804(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            open_set_heap_x_address1 <= zext_ln132_fu_1294_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            open_set_heap_x_address1 <= ap_const_lv13_0;
        else 
            open_set_heap_x_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    open_set_heap_x_ce0_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_state39, ap_CS_fsm_pp3_stage3, ap_block_pp3_stage3_11001, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state39) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_boolean_0 = ap_block_pp3_stage3_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then 
            open_set_heap_x_ce0 <= ap_const_logic_1;
        else 
            open_set_heap_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    open_set_heap_x_ce1_assign_proc : process(ap_CS_fsm_pp3_stage2, ap_enable_reg_pp3_iter0, ap_block_pp3_stage2_11001, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state30, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then 
            open_set_heap_x_ce1 <= ap_const_logic_1;
        else 
            open_set_heap_x_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    open_set_heap_x_d0_assign_proc : process(start_x, open_set_heap_x_q1, ap_enable_reg_pp3_iter0, ap_CS_fsm_state39, ap_CS_fsm_pp3_stage3, reg_701, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, ap_block_pp3_stage3)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            open_set_heap_x_d0 <= reg_701;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_boolean_0 = ap_block_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then 
            open_set_heap_x_d0 <= open_set_heap_x_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            open_set_heap_x_d0 <= start_x;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            open_set_heap_x_d0 <= ap_const_lv16_0;
        else 
            open_set_heap_x_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    open_set_heap_x_d1_assign_proc : process(open_set_heap_x_q0, reg_701, ap_CS_fsm_state10, n_x_reg_1679, ap_CS_fsm_state30, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            open_set_heap_x_d1 <= reg_701;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            open_set_heap_x_d1 <= n_x_reg_1679;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            open_set_heap_x_d1 <= open_set_heap_x_q0;
        else 
            open_set_heap_x_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    open_set_heap_x_we0_assign_proc : process(ap_enable_reg_pp3_iter0, icmp_ln107_reg_1772, ap_CS_fsm_state39, icmp_ln93_reg_1595, icmp_ln93_1_reg_1609, icmp_ln92_reg_1577, icmp_ln92_1_reg_1591, ap_CS_fsm_pp3_stage3, ap_block_pp3_stage3_11001, icmp_ln112_reg_1816, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1, exitcond15_fu_736_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln112_reg_1816 = ap_const_lv1_1) and (icmp_ln107_reg_1772 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((exitcond15_fu_736_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (icmp_ln112_reg_1816 = ap_const_lv1_1) and (icmp_ln107_reg_1772 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage3_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state39) and (((icmp_ln92_1_reg_1591 = ap_const_lv1_1) and (icmp_ln92_reg_1577 = ap_const_lv1_1)) or ((icmp_ln93_1_reg_1609 = ap_const_lv1_1) and (icmp_ln93_reg_1595 = ap_const_lv1_1)))))) then 
            open_set_heap_x_we0 <= ap_const_logic_1;
        else 
            open_set_heap_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    open_set_heap_x_we1_assign_proc : process(icmp_ln93_reg_1595, icmp_ln93_1_reg_1609, icmp_ln92_reg_1577, icmp_ln92_1_reg_1591, ap_CS_fsm_state10, ap_CS_fsm_state30, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (((icmp_ln92_1_reg_1591 = ap_const_lv1_1) and (icmp_ln92_reg_1577 = ap_const_lv1_1)) or ((icmp_ln93_1_reg_1609 = ap_const_lv1_1) and (icmp_ln93_reg_1595 = ap_const_lv1_1)))))) then 
            open_set_heap_x_we1 <= ap_const_logic_1;
        else 
            open_set_heap_x_we1 <= ap_const_logic_0;
        end if; 
    end process;


    open_set_heap_y_address0_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_state39, ap_CS_fsm_pp3_stage3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, zext_ln112_reg_1791, open_set_heap_y_addr_5_reg_1832, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, p_cast3_fu_742_p1, zext_ln144_fu_854_p1, ap_block_pp3_stage3, zext_ln87_fu_1400_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            open_set_heap_y_address0 <= zext_ln87_fu_1400_p1(13 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            open_set_heap_y_address0 <= open_set_heap_y_addr_5_reg_1832;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_boolean_0 = ap_block_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            open_set_heap_y_address0 <= zext_ln112_reg_1791(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            open_set_heap_y_address0 <= zext_ln144_fu_854_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            open_set_heap_y_address0 <= ap_const_lv13_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            open_set_heap_y_address0 <= p_cast3_fu_742_p1(13 - 1 downto 0);
        else 
            open_set_heap_y_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    open_set_heap_y_address1_assign_proc : process(ap_CS_fsm_pp3_stage2, ap_enable_reg_pp3_iter0, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state30, zext_ln112_1_reg_1804, ap_CS_fsm_state38, open_set_heap_y_addr_2_reg_1858, ap_CS_fsm_state40, zext_ln132_fu_1294_p1, ap_block_pp3_stage2, zext_ln98_fu_1392_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            open_set_heap_y_address1 <= open_set_heap_y_addr_2_reg_1858;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            open_set_heap_y_address1 <= zext_ln98_fu_1392_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            open_set_heap_y_address1 <= zext_ln112_1_reg_1804(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            open_set_heap_y_address1 <= zext_ln132_fu_1294_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            open_set_heap_y_address1 <= ap_const_lv13_0;
        else 
            open_set_heap_y_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    open_set_heap_y_ce0_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_state39, ap_CS_fsm_pp3_stage3, ap_block_pp3_stage3_11001, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state39) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_boolean_0 = ap_block_pp3_stage3_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then 
            open_set_heap_y_ce0 <= ap_const_logic_1;
        else 
            open_set_heap_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    open_set_heap_y_ce1_assign_proc : process(ap_CS_fsm_pp3_stage2, ap_enable_reg_pp3_iter0, ap_block_pp3_stage2_11001, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state30, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then 
            open_set_heap_y_ce1 <= ap_const_logic_1;
        else 
            open_set_heap_y_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    open_set_heap_y_d0_assign_proc : process(start_y, open_set_heap_y_q1, ap_enable_reg_pp3_iter0, ap_CS_fsm_state39, ap_CS_fsm_pp3_stage3, reg_707, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, ap_block_pp3_stage3)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            open_set_heap_y_d0 <= reg_707;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_const_boolean_0 = ap_block_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then 
            open_set_heap_y_d0 <= open_set_heap_y_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            open_set_heap_y_d0 <= start_y;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            open_set_heap_y_d0 <= ap_const_lv16_0;
        else 
            open_set_heap_y_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    open_set_heap_y_d1_assign_proc : process(open_set_heap_y_q0, reg_707, ap_CS_fsm_state10, n_y_reg_1688, ap_CS_fsm_state30, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            open_set_heap_y_d1 <= reg_707;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            open_set_heap_y_d1 <= n_y_reg_1688;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            open_set_heap_y_d1 <= open_set_heap_y_q0;
        else 
            open_set_heap_y_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    open_set_heap_y_we0_assign_proc : process(ap_enable_reg_pp3_iter0, icmp_ln107_reg_1772, ap_CS_fsm_state39, icmp_ln93_reg_1595, icmp_ln93_1_reg_1609, icmp_ln92_reg_1577, icmp_ln92_1_reg_1591, ap_CS_fsm_pp3_stage3, ap_block_pp3_stage3_11001, icmp_ln112_reg_1816, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1, exitcond15_fu_736_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln112_reg_1816 = ap_const_lv1_1) and (icmp_ln107_reg_1772 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((exitcond15_fu_736_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (icmp_ln112_reg_1816 = ap_const_lv1_1) and (icmp_ln107_reg_1772 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage3_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state39) and (((icmp_ln92_1_reg_1591 = ap_const_lv1_1) and (icmp_ln92_reg_1577 = ap_const_lv1_1)) or ((icmp_ln93_1_reg_1609 = ap_const_lv1_1) and (icmp_ln93_reg_1595 = ap_const_lv1_1)))))) then 
            open_set_heap_y_we0 <= ap_const_logic_1;
        else 
            open_set_heap_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    open_set_heap_y_we1_assign_proc : process(icmp_ln93_reg_1595, icmp_ln93_1_reg_1609, icmp_ln92_reg_1577, icmp_ln92_1_reg_1591, ap_CS_fsm_state10, ap_CS_fsm_state30, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (((icmp_ln92_1_reg_1591 = ap_const_lv1_1) and (icmp_ln92_reg_1577 = ap_const_lv1_1)) or ((icmp_ln93_1_reg_1609 = ap_const_lv1_1) and (icmp_ln93_reg_1595 = ap_const_lv1_1)))))) then 
            open_set_heap_y_we1 <= ap_const_logic_1;
        else 
            open_set_heap_y_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln193_fu_1154_p2 <= (xor_ln193_fu_1144_p2 or xor_ln193_1_fu_1149_p2);
    or_ln64_fu_1016_p2 <= (shl_ln179_fu_998_p2 or closed_set_q0);
    p_cast3_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_32_reg_539),64));
    p_cast_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_528),64));
    parent_fu_1370_p3 <= 
        sub_ln111_1_fu_1355_p2 when (tmp_4_fu_1347_p3(0) = '1') else 
        trunc_ln111_2_fu_1360_p4;
    right_fu_906_p2 <= std_logic_vector(unsigned(shl_ln_fu_892_p3) + unsigned(ap_const_lv16_2));
    select_ln70_1_fu_782_p3 <= 
        sub_ln70_2_fu_774_p2 when (icmp_ln70_1_fu_770_p2(0) = '1') else 
        sub_ln70_3_fu_778_p2;
    select_ln70_2_fu_1233_p3 <= 
        sub_ln70_4_fu_1225_p2 when (icmp_ln70_2_fu_1221_p2(0) = '1') else 
        sub_ln70_5_fu_1229_p2;
    select_ln70_3_fu_1253_p3 <= 
        sub_ln70_6_fu_1245_p2 when (icmp_ln70_3_fu_1241_p2(0) = '1') else 
        sub_ln70_7_fu_1249_p2;
    select_ln70_fu_762_p3 <= 
        sub_ln70_fu_754_p2 when (icmp_ln70_fu_750_p2(0) = '1') else 
        sub_ln70_1_fu_758_p2;
    shl_ln179_fu_998_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & zext_ln54_fu_995_p1(31-1 downto 0)))));
    shl_ln194_fu_1188_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & zext_ln45_fu_1185_p1(31-1 downto 0)))));
    shl_ln_fu_892_p3 <= (smallest_reg_584 & ap_const_lv1_0);
    smallest_1_fu_1388_p1 <= smallest_in_in_reg_652(15 - 1 downto 0);
    sub_ln111_1_fu_1355_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(trunc_ln111_1_reg_1781));
    sub_ln111_fu_1326_p2 <= std_logic_vector(unsigned(ap_const_lv17_1) - unsigned(zext_ln111_fu_1322_p1));
    sub_ln70_1_fu_758_p2 <= std_logic_vector(unsigned(goal_x) - unsigned(start_x));
    sub_ln70_2_fu_774_p2 <= std_logic_vector(unsigned(start_y) - unsigned(goal_y));
    sub_ln70_3_fu_778_p2 <= std_logic_vector(unsigned(goal_y) - unsigned(start_y));
    sub_ln70_4_fu_1225_p2 <= std_logic_vector(unsigned(n_x_reg_1679) - unsigned(goal_x));
    sub_ln70_5_fu_1229_p2 <= std_logic_vector(unsigned(goal_x) - unsigned(n_x_reg_1679));
    sub_ln70_6_fu_1245_p2 <= std_logic_vector(unsigned(n_y_reg_1688) - unsigned(goal_y));
    sub_ln70_7_fu_1249_p2 <= std_logic_vector(unsigned(goal_y) - unsigned(n_y_reg_1688));
    sub_ln70_fu_754_p2 <= std_logic_vector(unsigned(start_x) - unsigned(goal_x));
    tmp_3_fu_1272_p4 <= empty_37_reg_607(31 downto 13);
    tmp_4_fu_1347_p3 <= add_ln111_fu_1342_p2(16 downto 16);
    tmp_fu_1037_p3 <= i_reg_596(2 downto 2);
    trunc_ln111_2_fu_1360_p4 <= add_ln111_fu_1342_p2(16 downto 1);
    trunc_ln134_fu_1308_p1 <= empty_37_reg_607(13 - 1 downto 0);
    trunc_ln190_fu_1062_p1 <= i_reg_596(2 - 1 downto 0);
    trunc_ln191_fu_1105_p1 <= tmp_2_fu_1091_p6(16 - 1 downto 0);
    trunc_ln192_fu_1114_p1 <= tmp_1_fu_1066_p6(16 - 1 downto 0);
    trunc_ln52_fu_816_p0 <= world_size;
    trunc_ln52_fu_816_p1 <= trunc_ln52_fu_816_p0(18 - 1 downto 0);
    trunc_ln93_fu_954_p1 <= smallest_reg_584(13 - 1 downto 0);
    word_idx_fu_981_p4 <= grp_fu_1407_p3(17 downto 5);
    xor_ln193_1_fu_1149_p2 <= (icmp_ln193_1_reg_1702 xor ap_const_lv1_1);
    xor_ln193_fu_1144_p2 <= (icmp_ln193_reg_1697 xor ap_const_lv1_1);
    zext_ln111_fu_1322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_idx_assign_2_phi_fu_621_p4),17));
    zext_ln112_1_fu_1383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(parent_fu_1370_p3),64));
    zext_ln112_fu_1378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_assign_2_reg_618),64));
    zext_ln132_fu_1294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_37_reg_607),64));
    zext_ln134_fu_1312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln134_fu_1308_p1),16));
    zext_ln144_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln144_fu_848_p2),64));
    zext_ln176_fu_958_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(current_x_reg_1557),18));
    zext_ln193_1_fu_1132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_y_fu_1118_p2),32));
    zext_ln193_2_fu_1141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_x_reg_1679),18));
    zext_ln193_fu_1123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_x_fu_1109_p2),32));
    zext_ln45_fu_1185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bit_idx_1_reg_1720),32));
    zext_ln46_fu_1180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_fu_1175_p2),64));
    zext_ln54_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bit_idx_reg_1631),32));
    zext_ln55_1_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(word_idx_1_reg_1725),64));
    zext_ln55_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(word_idx_fu_981_p4),64));
    zext_ln87_fu_1400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln93_reg_1613),64));
    zext_ln92_1_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(left_fu_900_p2),64));
    zext_ln92_2_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(smallest_reg_584),64));
    zext_ln92_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(left_fu_900_p2),32));
    zext_ln93_1_fu_945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(right_reg_1570),64));
    zext_ln93_2_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(smallest_reg_584),64));
    zext_ln93_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(right_reg_1570),32));
    zext_ln98_fu_1392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(smallest_1_fu_1388_p1),64));
end behav;
